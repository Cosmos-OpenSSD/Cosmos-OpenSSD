//////////////////////////////////////////////////////////////////////////////////
// key_equation_solver.v for Cosmos OpenSSD
// Copyright (c) 2015 Hanyang University ENC Lab.
// Contributed by Ilyong Jung <iyjung@enc.hanyang.ac.kr>
//                Yong Ho Song <yhsong@enc.hanyang.ac.kr>
//
// This file is part of Cosmos OpenSSD.
//
// Cosmos OpenSSD is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// Cosmos OpenSSD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Cosmos OpenSSD; see the file COPYING.
// If not, see <http://www.gnu.org/licenses/>. 
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: ENC Lab. <http://enc.hanyang.ac.kr>
// Engineer: Ilyong Jung <iyjung@enc.hanyang.ac.kr>
// 
// Project Name: Cosmos OpenSSD
// Design Name: BCH Decoder
// Module Name: key_equation_solver
// File Name: key_equation_solver.v
//
// Version: v1.1.3-2KB_T32
//
// Description: 
//   - BCH decoder: key equation solver (KES) TOP module
//   - based on binary version of inversion-less Berlekamp-Massey algorithm (iBM.b)
//   - for data area
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Revision History:
//
// * v1.1.3
//   - temporary roll-back for releasing
//   - coding style of this version is not unified
//
// * v1.1.2
//   - minor modification for releasing
//
// * v1.1.1
//   - bug fix: state machine
//
// * v1.1.0
//   - change state machine: divide states
//   - insert additional registers
//   - improve frequency characteristic
//
// * v1.0.0
//   - first draft
//   - KES: binary version of inversion-less Berlekamp-Massey algorithm (iBM.b)
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module key_equation_solver(
    clk,
	nRESET,
	
	execute_kes,
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// input port: syndrome
	// output port: error locator polynomial term
	
	// syndrome: 63, 2t-1
	// elpt: 33, t+1
	
	sdr_001,
    sdr_002,
    sdr_003,
    sdr_004,
    sdr_005,
    sdr_006,
    sdr_007,
    sdr_008,
    sdr_009,
    sdr_010,
    sdr_011,
    sdr_012,
    sdr_013,
    sdr_014,
    sdr_015,
    sdr_016,
    sdr_017,
    sdr_018,
    sdr_019,
    sdr_020,
    sdr_021,
    sdr_022,
    sdr_023,
    sdr_024,
    sdr_025,
    sdr_026,
    sdr_027,
    sdr_028,
    sdr_029,
    sdr_030,
    sdr_031,
    sdr_032,
    sdr_033,
    sdr_034,
    sdr_035,
    sdr_036,
    sdr_037,
    sdr_038,
    sdr_039,
    sdr_040,
    sdr_041,
    sdr_042,
    sdr_043,
    sdr_044,
    sdr_045,
    sdr_046,
    sdr_047,
    sdr_048,
    sdr_049,
    sdr_050,
    sdr_051,
    sdr_052,
    sdr_053,
    sdr_054,
    sdr_055,
    sdr_056,
    sdr_057,
    sdr_058,
    sdr_059,
    sdr_060,
    sdr_061,
    sdr_062,
    sdr_063,

    v_2i_000,
    v_2i_001,
    v_2i_002,
    v_2i_003,
    v_2i_004,
    v_2i_005,
    v_2i_006,
    v_2i_007,
    v_2i_008,
    v_2i_009,
    v_2i_010,
    v_2i_011,
    v_2i_012,
    v_2i_013,
    v_2i_014,
    v_2i_015,
    v_2i_016,
    v_2i_017,
    v_2i_018,
    v_2i_019,
    v_2i_020,
    v_2i_021,
    v_2i_022,
    v_2i_023,
    v_2i_024,
    v_2i_025,
    v_2i_026,
    v_2i_027,
    v_2i_028,
    v_2i_029,
    v_2i_030,
    v_2i_031,
    v_2i_032,
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	kes_fail,
	kes_sequence_end
    );

	////////////////////////////////////////////////////////////////////////////////
	parameter GF_ORDER = 15; // GF(2^GF_ORDER)
	parameter [14:0] VALUE_ZERO = 15'b00000_00000_00000;
	parameter [14:0] VALUE_ONE = 15'b00000_00000_00001;
	parameter ECC_PARAM_T = 32; // t = 32
	parameter KES_LOOP_COUNT = 32; // t = 32
	parameter KES_LOOP_COUNT_BIT = 6; // must be bigger than t, 2^6 = 64
	////////////////////////////////////////////////////////////////////////////////

	parameter KES_FSM_BIT = 9;
	parameter KES_RESET = 9'b000000001; // reset: nRESET_KES <= 0
	parameter KES_START = 9'b000000010; // start: SDR capture, nRESET_KES <= 1
	parameter KES_STEP1 = 9'b000000100; // step 1: degree capture, S & V capture (EXE DC)
	parameter KES_STEP2 = 9'b000001000; // step 2: S*V out
	parameter KES_STEP3 = 9'b000010000; // step 3: S*V capture
	parameter KES_STEP4 = 9'b000100000; // step 4: S*V XOR buffer update
	parameter KES_STEP5 = 9'b001000000; // step 5: delta buffer update, duplicated buffer(d, delta, control) update
	parameter KES_STEP6 = 9'b010000000; // step 6: SDR<<, ELU input buffer update (EXE ELU)
	parameter KES_STEP7 = 9'b100000000; // step 7: counter++, ELU out
	

	
	input wire clk;
	input wire nRESET;
	
	input wire execute_kes;
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// input port: syndrome
	// output port: error locator polynomial term
	
	// syndrome: 63, 2t-1
	// elpt: 33, t+1
	
	input wire [GF_ORDER-1:0] sdr_001;
    input wire [GF_ORDER-1:0] sdr_002;
    input wire [GF_ORDER-1:0] sdr_003;
    input wire [GF_ORDER-1:0] sdr_004;
    input wire [GF_ORDER-1:0] sdr_005;
    input wire [GF_ORDER-1:0] sdr_006;
    input wire [GF_ORDER-1:0] sdr_007;
    input wire [GF_ORDER-1:0] sdr_008;
    input wire [GF_ORDER-1:0] sdr_009;
    input wire [GF_ORDER-1:0] sdr_010;
    input wire [GF_ORDER-1:0] sdr_011;
    input wire [GF_ORDER-1:0] sdr_012;
    input wire [GF_ORDER-1:0] sdr_013;
    input wire [GF_ORDER-1:0] sdr_014;
    input wire [GF_ORDER-1:0] sdr_015;
    input wire [GF_ORDER-1:0] sdr_016;
    input wire [GF_ORDER-1:0] sdr_017;
    input wire [GF_ORDER-1:0] sdr_018;
    input wire [GF_ORDER-1:0] sdr_019;
    input wire [GF_ORDER-1:0] sdr_020;
    input wire [GF_ORDER-1:0] sdr_021;
    input wire [GF_ORDER-1:0] sdr_022;
    input wire [GF_ORDER-1:0] sdr_023;
    input wire [GF_ORDER-1:0] sdr_024;
    input wire [GF_ORDER-1:0] sdr_025;
    input wire [GF_ORDER-1:0] sdr_026;
    input wire [GF_ORDER-1:0] sdr_027;
    input wire [GF_ORDER-1:0] sdr_028;
    input wire [GF_ORDER-1:0] sdr_029;
    input wire [GF_ORDER-1:0] sdr_030;
    input wire [GF_ORDER-1:0] sdr_031;
    input wire [GF_ORDER-1:0] sdr_032;
    input wire [GF_ORDER-1:0] sdr_033;
    input wire [GF_ORDER-1:0] sdr_034;
    input wire [GF_ORDER-1:0] sdr_035;
    input wire [GF_ORDER-1:0] sdr_036;
    input wire [GF_ORDER-1:0] sdr_037;
    input wire [GF_ORDER-1:0] sdr_038;
    input wire [GF_ORDER-1:0] sdr_039;
    input wire [GF_ORDER-1:0] sdr_040;
    input wire [GF_ORDER-1:0] sdr_041;
    input wire [GF_ORDER-1:0] sdr_042;
    input wire [GF_ORDER-1:0] sdr_043;
    input wire [GF_ORDER-1:0] sdr_044;
    input wire [GF_ORDER-1:0] sdr_045;
    input wire [GF_ORDER-1:0] sdr_046;
    input wire [GF_ORDER-1:0] sdr_047;
    input wire [GF_ORDER-1:0] sdr_048;
    input wire [GF_ORDER-1:0] sdr_049;
    input wire [GF_ORDER-1:0] sdr_050;
    input wire [GF_ORDER-1:0] sdr_051;
    input wire [GF_ORDER-1:0] sdr_052;
    input wire [GF_ORDER-1:0] sdr_053;
    input wire [GF_ORDER-1:0] sdr_054;
    input wire [GF_ORDER-1:0] sdr_055;
    input wire [GF_ORDER-1:0] sdr_056;
    input wire [GF_ORDER-1:0] sdr_057;
    input wire [GF_ORDER-1:0] sdr_058;
    input wire [GF_ORDER-1:0] sdr_059;
    input wire [GF_ORDER-1:0] sdr_060;
    input wire [GF_ORDER-1:0] sdr_061;
    input wire [GF_ORDER-1:0] sdr_062;
    input wire [GF_ORDER-1:0] sdr_063;

    output wire [GF_ORDER-1:0] v_2i_000;
    output wire [GF_ORDER-1:0] v_2i_001;
    output wire [GF_ORDER-1:0] v_2i_002;
    output wire [GF_ORDER-1:0] v_2i_003;
    output wire [GF_ORDER-1:0] v_2i_004;
    output wire [GF_ORDER-1:0] v_2i_005;
    output wire [GF_ORDER-1:0] v_2i_006;
    output wire [GF_ORDER-1:0] v_2i_007;
    output wire [GF_ORDER-1:0] v_2i_008;
    output wire [GF_ORDER-1:0] v_2i_009;
    output wire [GF_ORDER-1:0] v_2i_010;
    output wire [GF_ORDER-1:0] v_2i_011;
    output wire [GF_ORDER-1:0] v_2i_012;
    output wire [GF_ORDER-1:0] v_2i_013;
    output wire [GF_ORDER-1:0] v_2i_014;
    output wire [GF_ORDER-1:0] v_2i_015;
    output wire [GF_ORDER-1:0] v_2i_016;
    output wire [GF_ORDER-1:0] v_2i_017;
    output wire [GF_ORDER-1:0] v_2i_018;
    output wire [GF_ORDER-1:0] v_2i_019;
    output wire [GF_ORDER-1:0] v_2i_020;
    output wire [GF_ORDER-1:0] v_2i_021;
    output wire [GF_ORDER-1:0] v_2i_022;
    output wire [GF_ORDER-1:0] v_2i_023;
    output wire [GF_ORDER-1:0] v_2i_024;
    output wire [GF_ORDER-1:0] v_2i_025;
    output wire [GF_ORDER-1:0] v_2i_026;
    output wire [GF_ORDER-1:0] v_2i_027;
    output wire [GF_ORDER-1:0] v_2i_028;
    output wire [GF_ORDER-1:0] v_2i_029;
    output wire [GF_ORDER-1:0] v_2i_030;
    output wire [GF_ORDER-1:0] v_2i_031;
    output wire [GF_ORDER-1:0] v_2i_032;
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	output wire kes_fail;
	output wire kes_sequence_end;
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// internal wires for PE
	// coef: (1+S)V, v_2i, deg 0 chk bit
	
	// coef: (1+S)V: 33, t+1
	// v_2i: 33, t+1
	// deg 0 chk bit: 34, t+2
	
	wire [GF_ORDER-1:0] coef_2ip1_000;
    wire [GF_ORDER-1:0] coef_2ip1_001;
    wire [GF_ORDER-1:0] coef_2ip1_002;
    wire [GF_ORDER-1:0] coef_2ip1_003;
    wire [GF_ORDER-1:0] coef_2ip1_004;
    wire [GF_ORDER-1:0] coef_2ip1_005;
    wire [GF_ORDER-1:0] coef_2ip1_006;
    wire [GF_ORDER-1:0] coef_2ip1_007;
    wire [GF_ORDER-1:0] coef_2ip1_008;
    wire [GF_ORDER-1:0] coef_2ip1_009;
    wire [GF_ORDER-1:0] coef_2ip1_010;
    wire [GF_ORDER-1:0] coef_2ip1_011;
    wire [GF_ORDER-1:0] coef_2ip1_012;
    wire [GF_ORDER-1:0] coef_2ip1_013;
    wire [GF_ORDER-1:0] coef_2ip1_014;
    wire [GF_ORDER-1:0] coef_2ip1_015;
    wire [GF_ORDER-1:0] coef_2ip1_016;
    wire [GF_ORDER-1:0] coef_2ip1_017;
    wire [GF_ORDER-1:0] coef_2ip1_018;
    wire [GF_ORDER-1:0] coef_2ip1_019;
    wire [GF_ORDER-1:0] coef_2ip1_020;
    wire [GF_ORDER-1:0] coef_2ip1_021;
    wire [GF_ORDER-1:0] coef_2ip1_022;
    wire [GF_ORDER-1:0] coef_2ip1_023;
    wire [GF_ORDER-1:0] coef_2ip1_024;
    wire [GF_ORDER-1:0] coef_2ip1_025;
    wire [GF_ORDER-1:0] coef_2ip1_026;
    wire [GF_ORDER-1:0] coef_2ip1_027;
    wire [GF_ORDER-1:0] coef_2ip1_028;
    wire [GF_ORDER-1:0] coef_2ip1_029;
    wire [GF_ORDER-1:0] coef_2ip1_030;
    wire [GF_ORDER-1:0] coef_2ip1_031;
    wire [GF_ORDER-1:0] coef_2ip1_032;

    wire v_2i_X_deg_chk_bit_000; // from PE_ELU_MINodr
    wire v_2i_X_deg_chk_bit_001; // from PE_ELU_sMINodr
    wire v_2i_X_deg_chk_bit_002; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_003; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_004; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_005; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_006; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_007; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_008; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_009; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_010; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_011; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_012; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_013; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_014; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_015; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_016; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_017; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_018; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_019; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_020; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_021; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_022; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_023; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_024; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_025; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_026; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_027; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_028; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_029; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_030; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_031; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_032; // from PE_ELU_NMLodr
    wire v_2i_X_deg_chk_bit_033; // from PE_ELU_eMAXodr
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////

	wire nRESET_KES;
	
	wire last_interation;
	
	reg [GF_ORDER*(ECC_PARAM_T+1)-1:0] coef_2ip1_b;
	reg [GF_ORDER-1:0] d_2i;
	wire d_2i_ZERO_chk_bit;
	reg [GF_ORDER-1:0] d_2i_d0;
	reg [GF_ORDER-1:0] d_2i_d1;
	reg [GF_ORDER-1:0] d_2i_d2;
	reg [GF_ORDER-1:0] d_2i_d3;
	
	wire [GF_ORDER-1:0] delta_2i;
	reg [GF_ORDER-1:0] delta_2im2;
	reg [GF_ORDER-1:0] delta_2im2_d0;
	reg [GF_ORDER-1:0] delta_2im2_d1;
	reg [GF_ORDER-1:0] delta_2im2_d2;
	reg [GF_ORDER-1:0] delta_2im2_d3;
	
	wire condition_2i;
	reg condition_2i_d0;
	reg condition_2i_d1;
	reg condition_2i_d2;
	reg condition_2i_d3;
	
	reg EXECUTE_PE_DC_d0;
	reg EXECUTE_PE_DC_d1;
	reg EXECUTE_PE_DC_d2;
	reg EXECUTE_PE_DC_d3;
	
	reg EXECUTE_PE_ELU_d0;
	reg EXECUTE_PE_ELU_d1;
	reg EXECUTE_PE_ELU_d2;
	reg EXECUTE_PE_ELU_d3;
	
	wire [ECC_PARAM_T+1:0] v_2ip2_deg_info;
	reg [ECC_PARAM_T+1:0] v_2i_X_deg_chk_bit_b;
	
	
	reg ELP_degree_condition_violation;
	reg [KES_LOOP_COUNT_BIT-1:0] v_2i_maximum_deg;
	reg v_2i_deg_condition;
	
	wire [GF_ORDER-1:0] sdr_to_DC_001;
	wire [GF_ORDER-1:0] sdr_to_DC_000;
	
	
	
	// FSM
	// registered input
	reg [(ECC_PARAM_T*2*GF_ORDER)-1:0] sdr_buffer;
	
	// encoder FSM state
	reg [KES_FSM_BIT-1:0] cur_state;
	reg [KES_FSM_BIT-1:0] nxt_state;
	
	// internal counter
	reg [KES_LOOP_COUNT_BIT-1:0] count_kes;
	
	reg nRESET_kes_sequence;
	
	
	
	assign nRESET_KES = (nRESET) & (nRESET_kes_sequence);	
	
	assign last_interation = (count_kes == KES_LOOP_COUNT);
	assign kes_sequence_end = (last_interation) & (cur_state == KES_STEP7); // i = 0 ~ t: t+1
	assign kes_fail = ELP_degree_condition_violation;
	
	
	
	assign delta_2i[GF_ORDER-1:0] = (condition_2i)? (d_2i[GF_ORDER-1:0]):(delta_2im2[GF_ORDER-1:0]);
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// v_2ip2_deg_info
		
	// all deg info: 34, t+2
	
	assign v_2ip2_deg_info[ECC_PARAM_T+1:0] = { v_2i_X_deg_chk_bit_033, v_2i_X_deg_chk_bit_032, v_2i_X_deg_chk_bit_031, v_2i_X_deg_chk_bit_030, v_2i_X_deg_chk_bit_029, v_2i_X_deg_chk_bit_028, v_2i_X_deg_chk_bit_027, v_2i_X_deg_chk_bit_026, v_2i_X_deg_chk_bit_025, v_2i_X_deg_chk_bit_024, v_2i_X_deg_chk_bit_023, v_2i_X_deg_chk_bit_022, v_2i_X_deg_chk_bit_021, v_2i_X_deg_chk_bit_020, v_2i_X_deg_chk_bit_019, v_2i_X_deg_chk_bit_018, v_2i_X_deg_chk_bit_017, v_2i_X_deg_chk_bit_016, v_2i_X_deg_chk_bit_015, v_2i_X_deg_chk_bit_014, v_2i_X_deg_chk_bit_013, v_2i_X_deg_chk_bit_012, v_2i_X_deg_chk_bit_011, v_2i_X_deg_chk_bit_010, v_2i_X_deg_chk_bit_009, v_2i_X_deg_chk_bit_008, v_2i_X_deg_chk_bit_007, v_2i_X_deg_chk_bit_006, v_2i_X_deg_chk_bit_005, v_2i_X_deg_chk_bit_004, v_2i_X_deg_chk_bit_003, v_2i_X_deg_chk_bit_002, v_2i_X_deg_chk_bit_001, v_2i_X_deg_chk_bit_000};
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	assign d_2i_ZERO_chk_bit = |(d_2i[GF_ORDER-1:0]);
	always @ ( v_2i_maximum_deg, count_kes )
	begin	
		if ( v_2i_maximum_deg > count_kes )	begin
			v_2i_deg_condition <= 1'b0;
		end	else begin
			v_2i_deg_condition <= 1'b1;
		end
	end
	assign condition_2i = (d_2i_ZERO_chk_bit) & (v_2i_deg_condition);
	
	
	
	assign sdr_to_DC_001[GF_ORDER-1:0] = sdr_buffer[(ECC_PARAM_T*2  )*GF_ORDER-1:(ECC_PARAM_T*2-1)*GF_ORDER];
	assign sdr_to_DC_000[GF_ORDER-1:0] = sdr_buffer[(ECC_PARAM_T*2-1)*GF_ORDER-1:(ECC_PARAM_T*2-2)*GF_ORDER];
	
	
	
	//FSM
	// update current state to next state
	always @ (posedge clk, negedge nRESET)
	begin
		if (!nRESET) begin
			cur_state <= KES_RESET;
		end else begin
			cur_state <= nxt_state;
		end
	end
	
	// decide next state
	always @ ( * )
	begin
		if (kes_fail) begin
			nxt_state <= KES_RESET;
		end	else begin
			case (cur_state)
			KES_RESET: begin
				nxt_state <= (execute_kes)? KES_START:KES_RESET;
			end
			KES_START: begin
				nxt_state <= KES_STEP1;
			end
			KES_STEP1: begin
				nxt_state <= KES_STEP2;
			end
			KES_STEP2: begin
				nxt_state <= KES_STEP3;
			end
			KES_STEP3: begin
				nxt_state <= KES_STEP4;
			end
			KES_STEP4: begin
				nxt_state <= KES_STEP5;
			end
			KES_STEP5: begin
				nxt_state <= KES_STEP6;
			end
			KES_STEP6: begin
				nxt_state <= KES_STEP7;
			end
			KES_STEP7: begin
				nxt_state <= (kes_sequence_end)? (KES_RESET):(KES_STEP1);
			end
			default: begin
				nxt_state <= KES_RESET;
			end
			endcase
		end
	end

	// state behaviour
	always @ (posedge clk, negedge nRESET)
	begin
		if (!nRESET) begin
			count_kes <= 0;
			sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= 0;
			nRESET_kes_sequence <= 0;
			
			v_2i_X_deg_chk_bit_b <= 0;
			
			EXECUTE_PE_DC_d0 <= 0;
			EXECUTE_PE_DC_d1 <= 0;
			EXECUTE_PE_DC_d2 <= 0;
			EXECUTE_PE_DC_d3 <= 0;
	
			EXECUTE_PE_ELU_d0 <= 0;
			EXECUTE_PE_ELU_d1 <= 0;
			EXECUTE_PE_ELU_d2 <= 0;
			EXECUTE_PE_ELU_d3 <= 0;
			
			coef_2ip1_b <= 0;
			d_2i <= 0;
			delta_2im2[GF_ORDER-1:0] <= VALUE_ONE[GF_ORDER-1:0];
			
			d_2i_d0[GF_ORDER-1:0] <= 0;
			d_2i_d1[GF_ORDER-1:0] <= 0;
			d_2i_d2[GF_ORDER-1:0] <= 0;
			d_2i_d3[GF_ORDER-1:0] <= 0;
			
			delta_2im2_d0[GF_ORDER-1:0] <= 0;
			delta_2im2_d1[GF_ORDER-1:0] <= 0;
			delta_2im2_d2[GF_ORDER-1:0] <= 0;
			delta_2im2_d3[GF_ORDER-1:0] <= 0;
			
			condition_2i_d0 <= 0;
			condition_2i_d1 <= 0;
			condition_2i_d2 <= 0;
			condition_2i_d3 <= 0;
		end
		
		else begin		
			case (nxt_state)
			KES_RESET: begin
				count_kes <= 0;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= 0;
				nRESET_kes_sequence <= 0;
				
				v_2i_X_deg_chk_bit_b <= 0;
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= VALUE_ONE[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_START: begin
				count_kes <= 0;
				/////////////////////////////////////////////
				////////// GENERATED BY C PROGRAMA //////////
				/////
				///
				
				// syndrome capture
					
				// buffer size: 1+63

				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= { VALUE_ONE[GF_ORDER-1:0], sdr_001[GF_ORDER - 1:0], sdr_002[GF_ORDER - 1:0], sdr_003[GF_ORDER - 1:0], sdr_004[GF_ORDER - 1:0], sdr_005[GF_ORDER - 1:0], sdr_006[GF_ORDER - 1:0], sdr_007[GF_ORDER - 1:0], sdr_008[GF_ORDER - 1:0], sdr_009[GF_ORDER - 1:0], sdr_010[GF_ORDER - 1:0], sdr_011[GF_ORDER - 1:0], sdr_012[GF_ORDER - 1:0], sdr_013[GF_ORDER - 1:0], sdr_014[GF_ORDER - 1:0], sdr_015[GF_ORDER - 1:0], sdr_016[GF_ORDER - 1:0], sdr_017[GF_ORDER - 1:0], sdr_018[GF_ORDER - 1:0], sdr_019[GF_ORDER - 1:0], sdr_020[GF_ORDER - 1:0], sdr_021[GF_ORDER - 1:0], sdr_022[GF_ORDER - 1:0], sdr_023[GF_ORDER - 1:0], sdr_024[GF_ORDER - 1:0], sdr_025[GF_ORDER - 1:0], sdr_026[GF_ORDER - 1:0], sdr_027[GF_ORDER - 1:0], sdr_028[GF_ORDER - 1:0], sdr_029[GF_ORDER - 1:0], sdr_030[GF_ORDER - 1:0], sdr_031[GF_ORDER - 1:0], sdr_032[GF_ORDER - 1:0], sdr_033[GF_ORDER - 1:0], sdr_034[GF_ORDER - 1:0], sdr_035[GF_ORDER - 1:0], sdr_036[GF_ORDER - 1:0], sdr_037[GF_ORDER - 1:0], sdr_038[GF_ORDER - 1:0], sdr_039[GF_ORDER - 1:0], sdr_040[GF_ORDER - 1:0], sdr_041[GF_ORDER - 1:0], sdr_042[GF_ORDER - 1:0], sdr_043[GF_ORDER - 1:0], sdr_044[GF_ORDER - 1:0], sdr_045[GF_ORDER - 1:0], sdr_046[GF_ORDER - 1:0], sdr_047[GF_ORDER - 1:0], sdr_048[GF_ORDER - 1:0], sdr_049[GF_ORDER - 1:0], sdr_050[GF_ORDER - 1:0], sdr_051[GF_ORDER - 1:0], sdr_052[GF_ORDER - 1:0], sdr_053[GF_ORDER - 1:0], sdr_054[GF_ORDER - 1:0], sdr_055[GF_ORDER - 1:0], sdr_056[GF_ORDER - 1:0], sdr_057[GF_ORDER - 1:0], sdr_058[GF_ORDER - 1:0], sdr_059[GF_ORDER - 1:0], sdr_060[GF_ORDER - 1:0], sdr_061[GF_ORDER - 1:0], sdr_062[GF_ORDER - 1:0], sdr_063[GF_ORDER - 1:0] };

				                                          ///
														/////	
				////////// GENERATED BY C PROGRAMA //////////
				/////////////////////////////////////////////
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2ip2_deg_info[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 1;
				EXECUTE_PE_DC_d1 <= 1;
				EXECUTE_PE_DC_d2 <= 1;
				EXECUTE_PE_DC_d3 <= 1;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= VALUE_ONE[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_STEP1: begin
				count_kes <= count_kes;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0];
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_STEP2: begin
				count_kes <= count_kes;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0];
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_STEP3: begin
				count_kes <= count_kes;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0];
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				/////////////////////////////////////////////
				////////// GENERATED BY C PROGRAMA //////////
				/////
				///
				
				// d
					
				// d = XORXORXOR... all coef: 33, t+1
				
				coef_2ip1_b[GF_ORDER*(ECC_PARAM_T+1)-1:0] <= { coef_2ip1_000[GF_ORDER-1:0], coef_2ip1_001[GF_ORDER-1:0], coef_2ip1_002[GF_ORDER-1:0], coef_2ip1_003[GF_ORDER-1:0], coef_2ip1_004[GF_ORDER-1:0], coef_2ip1_005[GF_ORDER-1:0], coef_2ip1_006[GF_ORDER-1:0], coef_2ip1_007[GF_ORDER-1:0], coef_2ip1_008[GF_ORDER-1:0], coef_2ip1_009[GF_ORDER-1:0], coef_2ip1_010[GF_ORDER-1:0], coef_2ip1_011[GF_ORDER-1:0], coef_2ip1_012[GF_ORDER-1:0], coef_2ip1_013[GF_ORDER-1:0], coef_2ip1_014[GF_ORDER-1:0], coef_2ip1_015[GF_ORDER-1:0], coef_2ip1_016[GF_ORDER-1:0], coef_2ip1_017[GF_ORDER-1:0], coef_2ip1_018[GF_ORDER-1:0], coef_2ip1_019[GF_ORDER-1:0], coef_2ip1_020[GF_ORDER-1:0], coef_2ip1_021[GF_ORDER-1:0], coef_2ip1_022[GF_ORDER-1:0], coef_2ip1_023[GF_ORDER-1:0], coef_2ip1_024[GF_ORDER-1:0], coef_2ip1_025[GF_ORDER-1:0], coef_2ip1_026[GF_ORDER-1:0], coef_2ip1_027[GF_ORDER-1:0], coef_2ip1_028[GF_ORDER-1:0], coef_2ip1_029[GF_ORDER-1:0], coef_2ip1_030[GF_ORDER-1:0], coef_2ip1_031[GF_ORDER-1:0], coef_2ip1_032[GF_ORDER-1:0] };
				d_2i <= 0;
				
														  ///
														/////	
				////////// GENERATED BY C PROGRAMA //////////
				/////////////////////////////////////////////
				delta_2im2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_STEP4: begin
				count_kes <= count_kes;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0];
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i[GF_ORDER-1:0] <= coef_2ip1_b[(GF_ORDER* 1)-1:(GF_ORDER* 0)] ^ coef_2ip1_b[(GF_ORDER* 2)-1:(GF_ORDER* 1)] ^ coef_2ip1_b[(GF_ORDER* 3)-1:(GF_ORDER* 2)] ^ coef_2ip1_b[(GF_ORDER* 4)-1:(GF_ORDER* 3)] ^ coef_2ip1_b[(GF_ORDER* 5)-1:(GF_ORDER* 4)] ^ coef_2ip1_b[(GF_ORDER* 6)-1:(GF_ORDER* 5)] ^ coef_2ip1_b[(GF_ORDER* 7)-1:(GF_ORDER* 6)] ^ coef_2ip1_b[(GF_ORDER* 8)-1:(GF_ORDER* 7)] ^ coef_2ip1_b[(GF_ORDER* 9)-1:(GF_ORDER* 8)] ^ coef_2ip1_b[(GF_ORDER*10)-1:(GF_ORDER* 9)] ^ coef_2ip1_b[(GF_ORDER*11)-1:(GF_ORDER*10)] ^ coef_2ip1_b[(GF_ORDER*12)-1:(GF_ORDER*11)] ^ coef_2ip1_b[(GF_ORDER*13)-1:(GF_ORDER*12)] ^ coef_2ip1_b[(GF_ORDER*14)-1:(GF_ORDER*13)] ^ coef_2ip1_b[(GF_ORDER*15)-1:(GF_ORDER*14)] ^ coef_2ip1_b[(GF_ORDER*16)-1:(GF_ORDER*15)] ^ coef_2ip1_b[(GF_ORDER*17)-1:(GF_ORDER*16)] ^ coef_2ip1_b[(GF_ORDER*18)-1:(GF_ORDER*17)] ^ coef_2ip1_b[(GF_ORDER*19)-1:(GF_ORDER*18)] ^ coef_2ip1_b[(GF_ORDER*20)-1:(GF_ORDER*19)] ^ coef_2ip1_b[(GF_ORDER*21)-1:(GF_ORDER*20)] ^ coef_2ip1_b[(GF_ORDER*22)-1:(GF_ORDER*21)] ^ coef_2ip1_b[(GF_ORDER*23)-1:(GF_ORDER*22)] ^ coef_2ip1_b[(GF_ORDER*24)-1:(GF_ORDER*23)] ^ coef_2ip1_b[(GF_ORDER*25)-1:(GF_ORDER*24)] ^ coef_2ip1_b[(GF_ORDER*26)-1:(GF_ORDER*25)] ^ coef_2ip1_b[(GF_ORDER*27)-1:(GF_ORDER*26)] ^ coef_2ip1_b[(GF_ORDER*28)-1:(GF_ORDER*27)] ^ coef_2ip1_b[(GF_ORDER*29)-1:(GF_ORDER*28)] ^ coef_2ip1_b[(GF_ORDER*30)-1:(GF_ORDER*29)] ^ coef_2ip1_b[(GF_ORDER*31)-1:(GF_ORDER*30)] ^ coef_2ip1_b[(GF_ORDER*32)-1:(GF_ORDER*31)] ^ coef_2ip1_b[(GF_ORDER*33)-1:(GF_ORDER*32)];
				delta_2im2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_STEP5: begin
				count_kes <= count_kes;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0];
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 1;
				EXECUTE_PE_ELU_d1 <= 1;
				EXECUTE_PE_ELU_d2 <= 1;
				EXECUTE_PE_ELU_d3 <= 1;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= delta_2i[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= d_2i[GF_ORDER-1:0];
				d_2i_d1[GF_ORDER-1:0] <= d_2i[GF_ORDER-1:0];
				d_2i_d2[GF_ORDER-1:0] <= d_2i[GF_ORDER-1:0];
				d_2i_d3[GF_ORDER-1:0] <= d_2i[GF_ORDER-1:0];
				
				delta_2im2_d0[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				delta_2im2_d1[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				delta_2im2_d2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				delta_2im2_d3[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				condition_2i_d0 <= condition_2i;
				condition_2i_d1 <= condition_2i;
				condition_2i_d2 <= condition_2i;
				condition_2i_d3 <= condition_2i;
			end
			KES_STEP6: begin
				count_kes <= count_kes + 1'b1;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= (sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0]) << (GF_ORDER*2);
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= 0;
				EXECUTE_PE_DC_d1 <= 0;
				EXECUTE_PE_DC_d2 <= 0;
				EXECUTE_PE_DC_d3 <= 0;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			KES_STEP7: begin
				count_kes <= count_kes;
				sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0] <= sdr_buffer[(ECC_PARAM_T*2*GF_ORDER)-1:0];
				nRESET_kes_sequence <= 1;
				
				v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0] <= v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0];
				
				EXECUTE_PE_DC_d0 <= ~kes_sequence_end;
				EXECUTE_PE_DC_d1 <= ~kes_sequence_end;
				EXECUTE_PE_DC_d2 <= ~kes_sequence_end;
				EXECUTE_PE_DC_d3 <= ~kes_sequence_end;
		
				EXECUTE_PE_ELU_d0 <= 0;
				EXECUTE_PE_ELU_d1 <= 0;
				EXECUTE_PE_ELU_d2 <= 0;
				EXECUTE_PE_ELU_d3 <= 0;
				
				coef_2ip1_b <= 0;
				d_2i <= 0;
				delta_2im2[GF_ORDER-1:0] <= delta_2im2[GF_ORDER-1:0];
				
				d_2i_d0[GF_ORDER-1:0] <= 0;
				d_2i_d1[GF_ORDER-1:0] <= 0;
				d_2i_d2[GF_ORDER-1:0] <= 0;
				d_2i_d3[GF_ORDER-1:0] <= 0;
				
				delta_2im2_d0[GF_ORDER-1:0] <= 0;
				delta_2im2_d1[GF_ORDER-1:0] <= 0;
				delta_2im2_d2[GF_ORDER-1:0] <= 0;
				delta_2im2_d3[GF_ORDER-1:0] <= 0;
				
				condition_2i_d0 <= 0;
				condition_2i_d1 <= 0;
				condition_2i_d2 <= 0;
				condition_2i_d3 <= 0;
			end
			default: begin
				
			end
			endcase
		end
	end
	
	
	
	// MAXIMUM degree checker
	always @ (posedge clk, negedge nRESET_KES)
	begin
		if (!nRESET_KES) begin
			ELP_degree_condition_violation <= 0;
			v_2i_maximum_deg[KES_LOOP_COUNT_BIT-1:0] <= 0;
		end	else begin			
			/////////////////////////////////////////////
			////////// GENERATED BY C PROGRAMA //////////
			/////
			///
			
			// check maximum degree
			
			// violation check
			// casez: 34
			
			ELP_degree_condition_violation <= (last_interation)? v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1]:1'b0;

            casez (v_2i_X_deg_chk_bit_b[ECC_PARAM_T+1:0])
            34'b000000000000000000000000000000000?: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000000;
            end
            34'b000000000000000000000000000000001?: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000001;
            end
            34'b00000000000000000000000000000001??: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000010;
            end
            34'b0000000000000000000000000000001???: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000011;
            end
            34'b000000000000000000000000000001????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000100;
            end
            34'b00000000000000000000000000001?????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000101;
            end
            34'b0000000000000000000000000001??????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000110;
            end
            34'b000000000000000000000000001???????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000111;
            end
            34'b00000000000000000000000001????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001000;
            end
            34'b0000000000000000000000001?????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001001;
            end
            34'b000000000000000000000001??????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001010;
            end
            34'b00000000000000000000001???????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001011;
            end
            34'b0000000000000000000001????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001100;
            end
            34'b000000000000000000001?????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001101;
            end
            34'b00000000000000000001??????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001110;
            end
            34'b0000000000000000001???????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b001111;
            end
            34'b000000000000000001????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010000;
            end
            34'b00000000000000001?????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010001;
            end
            34'b0000000000000001??????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010010;
            end
            34'b000000000000001???????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010011;
            end
            34'b00000000000001????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010100;
            end
            34'b0000000000001?????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010101;
            end
            34'b000000000001??????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010110;
            end
            34'b00000000001???????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b010111;
            end
            34'b0000000001????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011000;
            end
            34'b000000001?????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011001;
            end
            34'b00000001??????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011010;
            end
            34'b0000001???????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011011;
            end
            34'b000001????????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011100;
            end
            34'b00001?????????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011101;
            end
            34'b0001??????????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011110;
            end
            34'b001???????????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b011111;
            end
            34'b01????????????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b100000;
            end
            34'b1?????????????????????????????????: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b100001;
            end
            default: begin
                v_2i_maximum_deg[KES_LOOP_COUNT_BIT - 1:0] <= 6'b000000;
            end
            endcase
			
			                                          ///
													/////	
			////////// GENERATED BY C PROGRAMA //////////
			/////////////////////////////////////////////
		end
	end
	
	
	
	
	
	

	
	
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// PE_DC, PE_ELU
	
	// sdr_connection_wire: 31, t+1-2
	// PE_DC: 33, t+1
	// k: 33 t+2-1
	// PE_ELU: 34, t+2
	
    wire [GF_ORDER-1:0] sdr_from_DC_030_to_DC_032;
    wire [GF_ORDER-1:0] sdr_from_DC_029_to_DC_031;
    wire [GF_ORDER-1:0] sdr_from_DC_028_to_DC_030;
    wire [GF_ORDER-1:0] sdr_from_DC_027_to_DC_029;
    wire [GF_ORDER-1:0] sdr_from_DC_026_to_DC_028;
    wire [GF_ORDER-1:0] sdr_from_DC_025_to_DC_027;
    wire [GF_ORDER-1:0] sdr_from_DC_024_to_DC_026;
    wire [GF_ORDER-1:0] sdr_from_DC_023_to_DC_025;
    wire [GF_ORDER-1:0] sdr_from_DC_022_to_DC_024;
    wire [GF_ORDER-1:0] sdr_from_DC_021_to_DC_023;
    wire [GF_ORDER-1:0] sdr_from_DC_020_to_DC_022;
    wire [GF_ORDER-1:0] sdr_from_DC_019_to_DC_021;
    wire [GF_ORDER-1:0] sdr_from_DC_018_to_DC_020;
    wire [GF_ORDER-1:0] sdr_from_DC_017_to_DC_019;
    wire [GF_ORDER-1:0] sdr_from_DC_016_to_DC_018;
    wire [GF_ORDER-1:0] sdr_from_DC_015_to_DC_017;
    wire [GF_ORDER-1:0] sdr_from_DC_014_to_DC_016;
    wire [GF_ORDER-1:0] sdr_from_DC_013_to_DC_015;
    wire [GF_ORDER-1:0] sdr_from_DC_012_to_DC_014;
    wire [GF_ORDER-1:0] sdr_from_DC_011_to_DC_013;
    wire [GF_ORDER-1:0] sdr_from_DC_010_to_DC_012;
    wire [GF_ORDER-1:0] sdr_from_DC_009_to_DC_011;
    wire [GF_ORDER-1:0] sdr_from_DC_008_to_DC_010;
    wire [GF_ORDER-1:0] sdr_from_DC_007_to_DC_009;
    wire [GF_ORDER-1:0] sdr_from_DC_006_to_DC_008;
    wire [GF_ORDER-1:0] sdr_from_DC_005_to_DC_007;
    wire [GF_ORDER-1:0] sdr_from_DC_004_to_DC_006;
    wire [GF_ORDER-1:0] sdr_from_DC_003_to_DC_005;
    wire [GF_ORDER-1:0] sdr_from_DC_002_to_DC_004;
    wire [GF_ORDER-1:0] sdr_from_DC_001_to_DC_003;
    wire [GF_ORDER-1:0] sdr_from_DC_000_to_DC_002;

    PE_DC_2MAXodr DC_032 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_030_to_DC_032[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_032[GF_ORDER-1:0]),

    .coef_2ip1(coef_2ip1_032[GF_ORDER - 1:0]));

    PE_DC_2MAXodr DC_031 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_029_to_DC_031[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_031[GF_ORDER-1:0]),

    .coef_2ip1(coef_2ip1_031[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_030 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_028_to_DC_030[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_030[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_030_to_DC_032[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_030[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_029 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_027_to_DC_029[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_029[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_029_to_DC_031[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_029[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_028 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_026_to_DC_028[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_028[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_028_to_DC_030[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_028[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_027 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_025_to_DC_027[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_027[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_027_to_DC_029[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_027[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_026 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_024_to_DC_026[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_026[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_026_to_DC_028[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_026[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_025 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_023_to_DC_025[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_025[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_025_to_DC_027[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_025[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_024 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d3),
    .S_in(sdr_from_DC_022_to_DC_024[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_024[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_024_to_DC_026[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_024[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_023 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_021_to_DC_023[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_023[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_023_to_DC_025[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_023[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_022 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_020_to_DC_022[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_022[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_022_to_DC_024[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_022[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_021 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_019_to_DC_021[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_021[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_021_to_DC_023[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_021[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_020 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_018_to_DC_020[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_020[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_020_to_DC_022[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_020[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_019 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_017_to_DC_019[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_019[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_019_to_DC_021[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_019[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_018 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_016_to_DC_018[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_018[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_018_to_DC_020[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_018[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_017 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_015_to_DC_017[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_017[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_017_to_DC_019[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_017[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_016 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d2),
    .S_in(sdr_from_DC_014_to_DC_016[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_016[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_016_to_DC_018[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_016[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_015 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_013_to_DC_015[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_015[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_015_to_DC_017[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_015[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_014 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_012_to_DC_014[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_014[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_014_to_DC_016[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_014[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_013 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_011_to_DC_013[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_013[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_013_to_DC_015[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_013[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_012 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_010_to_DC_012[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_012[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_012_to_DC_014[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_012[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_011 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_009_to_DC_011[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_011[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_011_to_DC_013[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_011[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_010 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_008_to_DC_010[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_010[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_010_to_DC_012[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_010[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_009 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_007_to_DC_009[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_009[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_009_to_DC_011[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_009[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_008 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d1),
    .S_in(sdr_from_DC_006_to_DC_008[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_008[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_008_to_DC_010[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_008[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_007 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_from_DC_005_to_DC_007[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_007[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_007_to_DC_009[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_007[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_006 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_from_DC_004_to_DC_006[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_006[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_006_to_DC_008[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_006[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_005 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_from_DC_003_to_DC_005[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_005[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_005_to_DC_007[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_005[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_004 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_from_DC_002_to_DC_004[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_004[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_004_to_DC_006[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_004[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_003 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_from_DC_001_to_DC_003[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_003[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_003_to_DC_005[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_003[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_002 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_from_DC_000_to_DC_002[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_002[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_002_to_DC_004[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_002[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_001 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_to_DC_001[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_001[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_001_to_DC_003[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_001[GF_ORDER - 1:0]));

    PE_DC_NMLodr DC_000 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_DC(EXECUTE_PE_DC_d0),
    .S_in(sdr_to_DC_000[GF_ORDER - 1:0]),
    .v_2i_X(v_2i_000[GF_ORDER-1:0]),

    .S_out(sdr_from_DC_000_to_DC_002[GF_ORDER - 1:0]),
    .coef_2ip1(coef_2ip1_000[GF_ORDER - 1:0]));
	
    wire [GF_ORDER-1:0] k_032;
    wire [GF_ORDER-1:0] k_031;
    wire [GF_ORDER-1:0] k_030;
    wire [GF_ORDER-1:0] k_029;
    wire [GF_ORDER-1:0] k_028;
    wire [GF_ORDER-1:0] k_027;
    wire [GF_ORDER-1:0] k_026;
    wire [GF_ORDER-1:0] k_025;
    wire [GF_ORDER-1:0] k_024;
    wire [GF_ORDER-1:0] k_023;
    wire [GF_ORDER-1:0] k_022;
    wire [GF_ORDER-1:0] k_021;
    wire [GF_ORDER-1:0] k_020;
    wire [GF_ORDER-1:0] k_019;
    wire [GF_ORDER-1:0] k_018;
    wire [GF_ORDER-1:0] k_017;
    wire [GF_ORDER-1:0] k_016;
    wire [GF_ORDER-1:0] k_015;
    wire [GF_ORDER-1:0] k_014;
    wire [GF_ORDER-1:0] k_013;
    wire [GF_ORDER-1:0] k_012;
    wire [GF_ORDER-1:0] k_011;
    wire [GF_ORDER-1:0] k_010;
    wire [GF_ORDER-1:0] k_009;
    wire [GF_ORDER-1:0] k_008;
    wire [GF_ORDER-1:0] k_007;
    wire [GF_ORDER-1:0] k_006;
    wire [GF_ORDER-1:0] k_005;
    wire [GF_ORDER-1:0] k_004;
    wire [GF_ORDER-1:0] k_003;
    wire [GF_ORDER-1:0] k_002;
    wire [GF_ORDER-1:0] k_001;
    wire [GF_ORDER-1:0] k_000;

    PE_ELU_eMAXodr ELU_033 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .k_2i_Xm1(k_032[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),

    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_033));

    PE_ELU_NMLodr ELU_032 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_031[GF_ORDER-1:0]),
    .k_2i_Xm1(k_031[GF_ORDER-1:0]),
    .k_2i_Xm2(k_030[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_032[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_032),
    .k_2i_X(k_032[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_031 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_030[GF_ORDER-1:0]),
    .k_2i_Xm1(k_030[GF_ORDER-1:0]),
    .k_2i_Xm2(k_029[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_031[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_031),
    .k_2i_X(k_031[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_030 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_029[GF_ORDER-1:0]),
    .k_2i_Xm1(k_029[GF_ORDER-1:0]),
    .k_2i_Xm2(k_028[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_030[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_030),
    .k_2i_X(k_030[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_029 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_028[GF_ORDER-1:0]),
    .k_2i_Xm1(k_028[GF_ORDER-1:0]),
    .k_2i_Xm2(k_027[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_029[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_029),
    .k_2i_X(k_029[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_028 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_027[GF_ORDER-1:0]),
    .k_2i_Xm1(k_027[GF_ORDER-1:0]),
    .k_2i_Xm2(k_026[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_028[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_028),
    .k_2i_X(k_028[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_027 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_026[GF_ORDER-1:0]),
    .k_2i_Xm1(k_026[GF_ORDER-1:0]),
    .k_2i_Xm2(k_025[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_027[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_027),
    .k_2i_X(k_027[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_026 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_025[GF_ORDER-1:0]),
    .k_2i_Xm1(k_025[GF_ORDER-1:0]),
    .k_2i_Xm2(k_024[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_026[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_026),
    .k_2i_X(k_026[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_025 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_024[GF_ORDER-1:0]),
    .k_2i_Xm1(k_024[GF_ORDER-1:0]),
    .k_2i_Xm2(k_023[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_025[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_025),
    .k_2i_X(k_025[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_024 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d3),
    .v_2i_Xm1(v_2i_023[GF_ORDER-1:0]),
    .k_2i_Xm1(k_023[GF_ORDER-1:0]),
    .k_2i_Xm2(k_022[GF_ORDER-1:0]),
    .d_2i(d_2i_d3[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d3[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d3),

    .v_2i_X(v_2i_024[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_024),
    .k_2i_X(k_024[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_023 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_022[GF_ORDER-1:0]),
    .k_2i_Xm1(k_022[GF_ORDER-1:0]),
    .k_2i_Xm2(k_021[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_023[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_023),
    .k_2i_X(k_023[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_022 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_021[GF_ORDER-1:0]),
    .k_2i_Xm1(k_021[GF_ORDER-1:0]),
    .k_2i_Xm2(k_020[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_022[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_022),
    .k_2i_X(k_022[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_021 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_020[GF_ORDER-1:0]),
    .k_2i_Xm1(k_020[GF_ORDER-1:0]),
    .k_2i_Xm2(k_019[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_021[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_021),
    .k_2i_X(k_021[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_020 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_019[GF_ORDER-1:0]),
    .k_2i_Xm1(k_019[GF_ORDER-1:0]),
    .k_2i_Xm2(k_018[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_020[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_020),
    .k_2i_X(k_020[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_019 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_018[GF_ORDER-1:0]),
    .k_2i_Xm1(k_018[GF_ORDER-1:0]),
    .k_2i_Xm2(k_017[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_019[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_019),
    .k_2i_X(k_019[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_018 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_017[GF_ORDER-1:0]),
    .k_2i_Xm1(k_017[GF_ORDER-1:0]),
    .k_2i_Xm2(k_016[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_018[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_018),
    .k_2i_X(k_018[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_017 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_016[GF_ORDER-1:0]),
    .k_2i_Xm1(k_016[GF_ORDER-1:0]),
    .k_2i_Xm2(k_015[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_017[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_017),
    .k_2i_X(k_017[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_016 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d2),
    .v_2i_Xm1(v_2i_015[GF_ORDER-1:0]),
    .k_2i_Xm1(k_015[GF_ORDER-1:0]),
    .k_2i_Xm2(k_014[GF_ORDER-1:0]),
    .d_2i(d_2i_d2[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d2[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d2),

    .v_2i_X(v_2i_016[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_016),
    .k_2i_X(k_016[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_015 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_014[GF_ORDER-1:0]),
    .k_2i_Xm1(k_014[GF_ORDER-1:0]),
    .k_2i_Xm2(k_013[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_015[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_015),
    .k_2i_X(k_015[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_014 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_013[GF_ORDER-1:0]),
    .k_2i_Xm1(k_013[GF_ORDER-1:0]),
    .k_2i_Xm2(k_012[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_014[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_014),
    .k_2i_X(k_014[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_013 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_012[GF_ORDER-1:0]),
    .k_2i_Xm1(k_012[GF_ORDER-1:0]),
    .k_2i_Xm2(k_011[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_013[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_013),
    .k_2i_X(k_013[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_012 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_011[GF_ORDER-1:0]),
    .k_2i_Xm1(k_011[GF_ORDER-1:0]),
    .k_2i_Xm2(k_010[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_012[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_012),
    .k_2i_X(k_012[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_011 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_010[GF_ORDER-1:0]),
    .k_2i_Xm1(k_010[GF_ORDER-1:0]),
    .k_2i_Xm2(k_009[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_011[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_011),
    .k_2i_X(k_011[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_010 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_009[GF_ORDER-1:0]),
    .k_2i_Xm1(k_009[GF_ORDER-1:0]),
    .k_2i_Xm2(k_008[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_010[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_010),
    .k_2i_X(k_010[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_009 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_008[GF_ORDER-1:0]),
    .k_2i_Xm1(k_008[GF_ORDER-1:0]),
    .k_2i_Xm2(k_007[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_009[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_009),
    .k_2i_X(k_009[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_008 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d1),
    .v_2i_Xm1(v_2i_007[GF_ORDER-1:0]),
    .k_2i_Xm1(k_007[GF_ORDER-1:0]),
    .k_2i_Xm2(k_006[GF_ORDER-1:0]),
    .d_2i(d_2i_d1[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d1[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d1),

    .v_2i_X(v_2i_008[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_008),
    .k_2i_X(k_008[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_007 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_006[GF_ORDER-1:0]),
    .k_2i_Xm1(k_006[GF_ORDER-1:0]),
    .k_2i_Xm2(k_005[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_007[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_007),
    .k_2i_X(k_007[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_006 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_005[GF_ORDER-1:0]),
    .k_2i_Xm1(k_005[GF_ORDER-1:0]),
    .k_2i_Xm2(k_004[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_006[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_006),
    .k_2i_X(k_006[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_005 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_004[GF_ORDER-1:0]),
    .k_2i_Xm1(k_004[GF_ORDER-1:0]),
    .k_2i_Xm2(k_003[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_005[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_005),
    .k_2i_X(k_005[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_004 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_003[GF_ORDER-1:0]),
    .k_2i_Xm1(k_003[GF_ORDER-1:0]),
    .k_2i_Xm2(k_002[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_004[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_004),
    .k_2i_X(k_004[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_003 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_002[GF_ORDER-1:0]),
    .k_2i_Xm1(k_002[GF_ORDER-1:0]),
    .k_2i_Xm2(k_001[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_003[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_003),
    .k_2i_X(k_003[GF_ORDER-1:0]));

    PE_ELU_NMLodr ELU_002 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_001[GF_ORDER-1:0]),
    .k_2i_Xm1(k_001[GF_ORDER-1:0]),
    .k_2i_Xm2(k_000[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_002[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_002),
    .k_2i_X(k_002[GF_ORDER-1:0]));

    PE_ELU_sMINodr ELU_001 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .v_2i_Xm1(v_2i_000[GF_ORDER-1:0]),
    .k_2i_Xm1(k_000[GF_ORDER-1:0]),
    .d_2i(d_2i_d0[GF_ORDER-1:0]),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),
    .condition_2i(condition_2i_d0),

    .v_2i_X(v_2i_001[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_001),
    .k_2i_X(k_001[GF_ORDER-1:0]));

    PE_ELU_MINodr ELU_000 (
    .clk(clk),
    .nRESET_KES(nRESET_KES),
    .EXECUTE_PE_ELU(EXECUTE_PE_ELU_d0),
    .delta_2im2(delta_2im2_d0[GF_ORDER-1:0]),

    .v_2i_X(v_2i_000[GF_ORDER-1:0]),
    .v_2i_X_deg_chk_bit(v_2i_X_deg_chk_bit_000),
    .k_2i_X(k_000[GF_ORDER-1:0]));
	
	                                          ///
											/////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
endmodule
