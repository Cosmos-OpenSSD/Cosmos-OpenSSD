//////////////////////////////////////////////////////////////////////////////////
// sc_deviders_p_lfs_XOR.v for Cosmos OpenSSD
// Copyright (c) 2015 Hanyang University ENC Lab.
// Contributed by Ilyong Jung <iyjung@enc.hanyang.ac.kr>
//                Yong Ho Song <yhsong@enc.hanyang.ac.kr>
//
// This file is part of Cosmos OpenSSD.
//
// Cosmos OpenSSD is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// Cosmos OpenSSD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Cosmos OpenSSD; see the file COPYING.
// If not, see <http://www.gnu.org/licenses/>. 
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: ENC Lab. <http://enc.hanyang.ac.kr>
// Engineer: Ilyong Jung <iyjung@enc.hanyang.ac.kr>
// 
// Project Name: Cosmos OpenSSD
// Design Name: BCH Decoder
// Module Name: sc_parallel_lfs_XOR_***
// File Name: sc_deviders_p_lfs_XOR.v
//
// Version: v1.0.2-2KB_T32
//
// Description: 
//   - parallel Linear Feedback Shift XOR
//   - for data area
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Revision History:
//
// * v1.0.2
//   - temporary roll-back for releasing
//   - coding style of this version is not unified
//
// * v1.0.1
//   - minor modification for releasing
//
// * v1.0.0
//   - first draft
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// This file was generated by C program.
	
	// total: 32
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////


module sc_parallel_lfs_XOR_001(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_001 lfs_XOR_001_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_003(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_003 lfs_XOR_003_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_005(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_005 lfs_XOR_005_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_007(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_007 lfs_XOR_007_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_009(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_009 lfs_XOR_009_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_011(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_011 lfs_XOR_011_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_013(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_013 lfs_XOR_013_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_015(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_015 lfs_XOR_015_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_017(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_017 lfs_XOR_017_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_019(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_019 lfs_XOR_019_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_021(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_021 lfs_XOR_021_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_023(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_023 lfs_XOR_023_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_025(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_025 lfs_XOR_025_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_027(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_027 lfs_XOR_027_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_029(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_029 lfs_XOR_029_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_031(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_031 lfs_XOR_031_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_033(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_033 lfs_XOR_033_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_035(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_035 lfs_XOR_035_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_037(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_037 lfs_XOR_037_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_039(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_039 lfs_XOR_039_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_041(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_041 lfs_XOR_041_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_043(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_043 lfs_XOR_043_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_045(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_045 lfs_XOR_045_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_047(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_047 lfs_XOR_047_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_049(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_049 lfs_XOR_049_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_051(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_051 lfs_XOR_051_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_053(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_053 lfs_XOR_053_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_055(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_055 lfs_XOR_055_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_057(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_057 lfs_XOR_057_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_059(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_059 lfs_XOR_059_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_061(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_061 lfs_XOR_061_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule

module sc_parallel_lfs_XOR_063(message, cur_remainder, nxt_remainder);
`include "SC_parameters.vh"
    input wire [`SC_PARALLEL-1:0] message;
    input wire [`REMAINDERS_SIZE-1:0] cur_remainder;
    output wire [`REMAINDERS_SIZE-1:0] nxt_remainder;
    wire [`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:0] parallel_wire;
    genvar i;
    generate
        for (i=0; i<`SC_PARALLEL; i=i+1)
        begin: lfs_XOR_blade_enclosure
            sc_serial_lfs_XOR_063 lfs_XOR_063_blade(
                .message(message[i]),
                .cur_remainder(parallel_wire[`REMAINDERS_SIZE*(i+2)-1:`REMAINDERS_SIZE*(i+1)]),
                .nxt_remainder(parallel_wire[`REMAINDERS_SIZE*(i+1)-1:`REMAINDERS_SIZE*(i)]  ) );
        end
    endgenerate
    assign parallel_wire[`REMAINDERS_SIZE*(`SC_PARALLEL+1)-1:`REMAINDERS_SIZE*(`SC_PARALLEL)] = cur_remainder[`REMAINDERS_SIZE-1:0];
    assign nxt_remainder[`REMAINDERS_SIZE-1:0] = parallel_wire[`REMAINDERS_SIZE-1:0];
endmodule
