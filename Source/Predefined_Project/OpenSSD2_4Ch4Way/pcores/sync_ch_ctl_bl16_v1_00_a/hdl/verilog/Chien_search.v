//////////////////////////////////////////////////////////////////////////////////
// Chien_search.v for Cosmos OpenSSD
// Copyright (c) 2015 Hanyang University ENC Lab.
// Contributed by Ilyong Jung <iyjung@enc.hanyang.ac.kr>
//                Yong Ho Song <yhsong@enc.hanyang.ac.kr>
//
// This file is part of Cosmos OpenSSD.
//
// Cosmos OpenSSD is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// Cosmos OpenSSD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Cosmos OpenSSD; see the file COPYING.
// If not, see <http://www.gnu.org/licenses/>. 
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: ENC Lab. <http://enc.hanyang.ac.kr>
// Engineer: Ilyong Jung <iyjung@enc.hanyang.ac.kr>
// 
// Project Name: Cosmos OpenSSD
// Design Name: BCH Decoder
// Module Name: Chien_search
// File Name: Chien_search.v
//
// Version: v1.0.3-2KB_T32
//
// Description: 
//   - BCH decoder: Chien search (CS) TOP module
//   - for data area
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Revision History:
//
// * v1.0.3
//   - temporary roll-back for releasing
//   - coding style of this version is not unified
//
// * v1.0.2
//   - minor modification for releasing
//
// * v1.0.1
//   - state machine: minor change
//
// * v1.0.0
//   - first draft
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module Chien_search(
	clk,
	nRESET,
	
	execute_cs,
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 33
	
	v_000,
    v_001,
    v_002,
    v_003,
    v_004,
    v_005,
    v_006,
    v_007,
    v_008,
    v_009,
    v_010,
    v_011,
    v_012,
    v_013,
    v_014,
    v_015,
    v_016,
    v_017,
    v_018,
    v_019,
    v_020,
    v_021,
    v_022,
    v_023,
    v_024,
    v_025,
    v_026,
    v_027,
    v_028,
    v_029,
    v_030,
    v_031,
    v_032,
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	BRAM_read_enable,
	BRAM_read_address,
	BRAM_read_data,
	
	cs_start,
	next_cs_available,
	cs_complete,
	
	corrected_message_BUS_valid,
	corrected_message_output_start,
    corrected_message_output_end,
    corrected_message
    );

`include "CS_parameters.vh"
	
	parameter CS_FSM_BIT = 5;
	parameter RESET     = 5'b00001; // RESET
	parameter EVAL_SHT  = 5'b00010; // evaluation shortening
	parameter CS_STRT   = 5'b00100; // Chien search, start
	parameter CS_FBCK   = 5'b01000; // Chien search, feedback
	parameter CS_FNLS   = 5'b10000; // final stage, output last corrected message
	
	
	
	input wire clk;
    input wire nRESET;
    
	input wire execute_cs;
	
	output wire BRAM_read_enable;
	output wire [`CS_OUTPUT_LOOP_COUNT_BIT-2:0] BRAM_read_address;
	input wire [`CS_PARALLEL-1:0] BRAM_read_data; // received message
	
	output wire cs_start;
	output wire next_cs_available;
	output wire cs_complete;
	
	output wire corrected_message_BUS_valid;
    output wire corrected_message_output_start;
    output wire corrected_message_output_end;
    output reg [`CS_PARALLEL-1:0] corrected_message;
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 33
	
	input wire [`GF_ORDER -1:0] v_000;
    input wire [`GF_ORDER -1:0] v_001;
    input wire [`GF_ORDER -1:0] v_002;
    input wire [`GF_ORDER -1:0] v_003;
    input wire [`GF_ORDER -1:0] v_004;
    input wire [`GF_ORDER -1:0] v_005;
    input wire [`GF_ORDER -1:0] v_006;
    input wire [`GF_ORDER -1:0] v_007;
    input wire [`GF_ORDER -1:0] v_008;
    input wire [`GF_ORDER -1:0] v_009;
    input wire [`GF_ORDER -1:0] v_010;
    input wire [`GF_ORDER -1:0] v_011;
    input wire [`GF_ORDER -1:0] v_012;
    input wire [`GF_ORDER -1:0] v_013;
    input wire [`GF_ORDER -1:0] v_014;
    input wire [`GF_ORDER -1:0] v_015;
    input wire [`GF_ORDER -1:0] v_016;
    input wire [`GF_ORDER -1:0] v_017;
    input wire [`GF_ORDER -1:0] v_018;
    input wire [`GF_ORDER -1:0] v_019;
    input wire [`GF_ORDER -1:0] v_020;
    input wire [`GF_ORDER -1:0] v_021;
    input wire [`GF_ORDER -1:0] v_022;
    input wire [`GF_ORDER -1:0] v_023;
    input wire [`GF_ORDER -1:0] v_024;
    input wire [`GF_ORDER -1:0] v_025;
    input wire [`GF_ORDER -1:0] v_026;
    input wire [`GF_ORDER -1:0] v_027;
    input wire [`GF_ORDER -1:0] v_028;
    input wire [`GF_ORDER -1:0] v_029;
    input wire [`GF_ORDER -1:0] v_030;
    input wire [`GF_ORDER -1:0] v_031;
    input wire [`GF_ORDER -1:0] v_032;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 8, 8
	
	wire slot_001_flip;
    wire slot_002_flip;
    wire slot_003_flip;
    wire slot_004_flip;
    wire slot_005_flip;
    wire slot_006_flip;
    wire slot_007_flip;
    wire slot_008_flip;

    wire slot_001_flipped_message;
    wire slot_002_flipped_message;
    wire slot_003_flipped_message;
    wire slot_004_flipped_message;
    wire slot_005_flipped_message;
    wire slot_006_flipped_message;
    wire slot_007_flipped_message;
    wire slot_008_flipped_message;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 32
	
    wire [`GF_ORDER -1:0] shortened_v_001;
    wire [`GF_ORDER -1:0] shortened_v_002;
    wire [`GF_ORDER -1:0] shortened_v_003;
    wire [`GF_ORDER -1:0] shortened_v_004;
    wire [`GF_ORDER -1:0] shortened_v_005;
    wire [`GF_ORDER -1:0] shortened_v_006;
    wire [`GF_ORDER -1:0] shortened_v_007;
    wire [`GF_ORDER -1:0] shortened_v_008;
    wire [`GF_ORDER -1:0] shortened_v_009;
    wire [`GF_ORDER -1:0] shortened_v_010;
    wire [`GF_ORDER -1:0] shortened_v_011;
    wire [`GF_ORDER -1:0] shortened_v_012;
    wire [`GF_ORDER -1:0] shortened_v_013;
    wire [`GF_ORDER -1:0] shortened_v_014;
    wire [`GF_ORDER -1:0] shortened_v_015;
    wire [`GF_ORDER -1:0] shortened_v_016;
    wire [`GF_ORDER -1:0] shortened_v_017;
    wire [`GF_ORDER -1:0] shortened_v_018;
    wire [`GF_ORDER -1:0] shortened_v_019;
    wire [`GF_ORDER -1:0] shortened_v_020;
    wire [`GF_ORDER -1:0] shortened_v_021;
    wire [`GF_ORDER -1:0] shortened_v_022;
    wire [`GF_ORDER -1:0] shortened_v_023;
    wire [`GF_ORDER -1:0] shortened_v_024;
    wire [`GF_ORDER -1:0] shortened_v_025;
    wire [`GF_ORDER -1:0] shortened_v_026;
    wire [`GF_ORDER -1:0] shortened_v_027;
    wire [`GF_ORDER -1:0] shortened_v_028;
    wire [`GF_ORDER -1:0] shortened_v_029;
    wire [`GF_ORDER -1:0] shortened_v_030;
    wire [`GF_ORDER -1:0] shortened_v_031;
    wire [`GF_ORDER -1:0] shortened_v_032;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 33
	
	wire [`GF_ORDER -1:0] ELP_term_000;
    wire [`GF_ORDER -1:0] ELP_term_001;
    wire [`GF_ORDER -1:0] ELP_term_002;
    wire [`GF_ORDER -1:0] ELP_term_003;
    wire [`GF_ORDER -1:0] ELP_term_004;
    wire [`GF_ORDER -1:0] ELP_term_005;
    wire [`GF_ORDER -1:0] ELP_term_006;
    wire [`GF_ORDER -1:0] ELP_term_007;
    wire [`GF_ORDER -1:0] ELP_term_008;
    wire [`GF_ORDER -1:0] ELP_term_009;
    wire [`GF_ORDER -1:0] ELP_term_010;
    wire [`GF_ORDER -1:0] ELP_term_011;
    wire [`GF_ORDER -1:0] ELP_term_012;
    wire [`GF_ORDER -1:0] ELP_term_013;
    wire [`GF_ORDER -1:0] ELP_term_014;
    wire [`GF_ORDER -1:0] ELP_term_015;
    wire [`GF_ORDER -1:0] ELP_term_016;
    wire [`GF_ORDER -1:0] ELP_term_017;
    wire [`GF_ORDER -1:0] ELP_term_018;
    wire [`GF_ORDER -1:0] ELP_term_019;
    wire [`GF_ORDER -1:0] ELP_term_020;
    wire [`GF_ORDER -1:0] ELP_term_021;
    wire [`GF_ORDER -1:0] ELP_term_022;
    wire [`GF_ORDER -1:0] ELP_term_023;
    wire [`GF_ORDER -1:0] ELP_term_024;
    wire [`GF_ORDER -1:0] ELP_term_025;
    wire [`GF_ORDER -1:0] ELP_term_026;
    wire [`GF_ORDER -1:0] ELP_term_027;
    wire [`GF_ORDER -1:0] ELP_term_028;
    wire [`GF_ORDER -1:0] ELP_term_029;
    wire [`GF_ORDER -1:0] ELP_term_030;
    wire [`GF_ORDER -1:0] ELP_term_031;
    wire [`GF_ORDER -1:0] ELP_term_032;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 33 * 8 = 264
	
	wire [`GF_ORDER-1:0] evaluated_term_S001_000;
    wire [`GF_ORDER-1:0] evaluated_term_S001_001;
    wire [`GF_ORDER-1:0] evaluated_term_S001_002;
    wire [`GF_ORDER-1:0] evaluated_term_S001_003;
    wire [`GF_ORDER-1:0] evaluated_term_S001_004;
    wire [`GF_ORDER-1:0] evaluated_term_S001_005;
    wire [`GF_ORDER-1:0] evaluated_term_S001_006;
    wire [`GF_ORDER-1:0] evaluated_term_S001_007;
    wire [`GF_ORDER-1:0] evaluated_term_S001_008;
    wire [`GF_ORDER-1:0] evaluated_term_S001_009;
    wire [`GF_ORDER-1:0] evaluated_term_S001_010;
    wire [`GF_ORDER-1:0] evaluated_term_S001_011;
    wire [`GF_ORDER-1:0] evaluated_term_S001_012;
    wire [`GF_ORDER-1:0] evaluated_term_S001_013;
    wire [`GF_ORDER-1:0] evaluated_term_S001_014;
    wire [`GF_ORDER-1:0] evaluated_term_S001_015;
    wire [`GF_ORDER-1:0] evaluated_term_S001_016;
    wire [`GF_ORDER-1:0] evaluated_term_S001_017;
    wire [`GF_ORDER-1:0] evaluated_term_S001_018;
    wire [`GF_ORDER-1:0] evaluated_term_S001_019;
    wire [`GF_ORDER-1:0] evaluated_term_S001_020;
    wire [`GF_ORDER-1:0] evaluated_term_S001_021;
    wire [`GF_ORDER-1:0] evaluated_term_S001_022;
    wire [`GF_ORDER-1:0] evaluated_term_S001_023;
    wire [`GF_ORDER-1:0] evaluated_term_S001_024;
    wire [`GF_ORDER-1:0] evaluated_term_S001_025;
    wire [`GF_ORDER-1:0] evaluated_term_S001_026;
    wire [`GF_ORDER-1:0] evaluated_term_S001_027;
    wire [`GF_ORDER-1:0] evaluated_term_S001_028;
    wire [`GF_ORDER-1:0] evaluated_term_S001_029;
    wire [`GF_ORDER-1:0] evaluated_term_S001_030;
    wire [`GF_ORDER-1:0] evaluated_term_S001_031;
    wire [`GF_ORDER-1:0] evaluated_term_S001_032;

    wire [`GF_ORDER-1:0] evaluated_term_S002_000;
    wire [`GF_ORDER-1:0] evaluated_term_S002_001;
    wire [`GF_ORDER-1:0] evaluated_term_S002_002;
    wire [`GF_ORDER-1:0] evaluated_term_S002_003;
    wire [`GF_ORDER-1:0] evaluated_term_S002_004;
    wire [`GF_ORDER-1:0] evaluated_term_S002_005;
    wire [`GF_ORDER-1:0] evaluated_term_S002_006;
    wire [`GF_ORDER-1:0] evaluated_term_S002_007;
    wire [`GF_ORDER-1:0] evaluated_term_S002_008;
    wire [`GF_ORDER-1:0] evaluated_term_S002_009;
    wire [`GF_ORDER-1:0] evaluated_term_S002_010;
    wire [`GF_ORDER-1:0] evaluated_term_S002_011;
    wire [`GF_ORDER-1:0] evaluated_term_S002_012;
    wire [`GF_ORDER-1:0] evaluated_term_S002_013;
    wire [`GF_ORDER-1:0] evaluated_term_S002_014;
    wire [`GF_ORDER-1:0] evaluated_term_S002_015;
    wire [`GF_ORDER-1:0] evaluated_term_S002_016;
    wire [`GF_ORDER-1:0] evaluated_term_S002_017;
    wire [`GF_ORDER-1:0] evaluated_term_S002_018;
    wire [`GF_ORDER-1:0] evaluated_term_S002_019;
    wire [`GF_ORDER-1:0] evaluated_term_S002_020;
    wire [`GF_ORDER-1:0] evaluated_term_S002_021;
    wire [`GF_ORDER-1:0] evaluated_term_S002_022;
    wire [`GF_ORDER-1:0] evaluated_term_S002_023;
    wire [`GF_ORDER-1:0] evaluated_term_S002_024;
    wire [`GF_ORDER-1:0] evaluated_term_S002_025;
    wire [`GF_ORDER-1:0] evaluated_term_S002_026;
    wire [`GF_ORDER-1:0] evaluated_term_S002_027;
    wire [`GF_ORDER-1:0] evaluated_term_S002_028;
    wire [`GF_ORDER-1:0] evaluated_term_S002_029;
    wire [`GF_ORDER-1:0] evaluated_term_S002_030;
    wire [`GF_ORDER-1:0] evaluated_term_S002_031;
    wire [`GF_ORDER-1:0] evaluated_term_S002_032;

    wire [`GF_ORDER-1:0] evaluated_term_S003_000;
    wire [`GF_ORDER-1:0] evaluated_term_S003_001;
    wire [`GF_ORDER-1:0] evaluated_term_S003_002;
    wire [`GF_ORDER-1:0] evaluated_term_S003_003;
    wire [`GF_ORDER-1:0] evaluated_term_S003_004;
    wire [`GF_ORDER-1:0] evaluated_term_S003_005;
    wire [`GF_ORDER-1:0] evaluated_term_S003_006;
    wire [`GF_ORDER-1:0] evaluated_term_S003_007;
    wire [`GF_ORDER-1:0] evaluated_term_S003_008;
    wire [`GF_ORDER-1:0] evaluated_term_S003_009;
    wire [`GF_ORDER-1:0] evaluated_term_S003_010;
    wire [`GF_ORDER-1:0] evaluated_term_S003_011;
    wire [`GF_ORDER-1:0] evaluated_term_S003_012;
    wire [`GF_ORDER-1:0] evaluated_term_S003_013;
    wire [`GF_ORDER-1:0] evaluated_term_S003_014;
    wire [`GF_ORDER-1:0] evaluated_term_S003_015;
    wire [`GF_ORDER-1:0] evaluated_term_S003_016;
    wire [`GF_ORDER-1:0] evaluated_term_S003_017;
    wire [`GF_ORDER-1:0] evaluated_term_S003_018;
    wire [`GF_ORDER-1:0] evaluated_term_S003_019;
    wire [`GF_ORDER-1:0] evaluated_term_S003_020;
    wire [`GF_ORDER-1:0] evaluated_term_S003_021;
    wire [`GF_ORDER-1:0] evaluated_term_S003_022;
    wire [`GF_ORDER-1:0] evaluated_term_S003_023;
    wire [`GF_ORDER-1:0] evaluated_term_S003_024;
    wire [`GF_ORDER-1:0] evaluated_term_S003_025;
    wire [`GF_ORDER-1:0] evaluated_term_S003_026;
    wire [`GF_ORDER-1:0] evaluated_term_S003_027;
    wire [`GF_ORDER-1:0] evaluated_term_S003_028;
    wire [`GF_ORDER-1:0] evaluated_term_S003_029;
    wire [`GF_ORDER-1:0] evaluated_term_S003_030;
    wire [`GF_ORDER-1:0] evaluated_term_S003_031;
    wire [`GF_ORDER-1:0] evaluated_term_S003_032;

    wire [`GF_ORDER-1:0] evaluated_term_S004_000;
    wire [`GF_ORDER-1:0] evaluated_term_S004_001;
    wire [`GF_ORDER-1:0] evaluated_term_S004_002;
    wire [`GF_ORDER-1:0] evaluated_term_S004_003;
    wire [`GF_ORDER-1:0] evaluated_term_S004_004;
    wire [`GF_ORDER-1:0] evaluated_term_S004_005;
    wire [`GF_ORDER-1:0] evaluated_term_S004_006;
    wire [`GF_ORDER-1:0] evaluated_term_S004_007;
    wire [`GF_ORDER-1:0] evaluated_term_S004_008;
    wire [`GF_ORDER-1:0] evaluated_term_S004_009;
    wire [`GF_ORDER-1:0] evaluated_term_S004_010;
    wire [`GF_ORDER-1:0] evaluated_term_S004_011;
    wire [`GF_ORDER-1:0] evaluated_term_S004_012;
    wire [`GF_ORDER-1:0] evaluated_term_S004_013;
    wire [`GF_ORDER-1:0] evaluated_term_S004_014;
    wire [`GF_ORDER-1:0] evaluated_term_S004_015;
    wire [`GF_ORDER-1:0] evaluated_term_S004_016;
    wire [`GF_ORDER-1:0] evaluated_term_S004_017;
    wire [`GF_ORDER-1:0] evaluated_term_S004_018;
    wire [`GF_ORDER-1:0] evaluated_term_S004_019;
    wire [`GF_ORDER-1:0] evaluated_term_S004_020;
    wire [`GF_ORDER-1:0] evaluated_term_S004_021;
    wire [`GF_ORDER-1:0] evaluated_term_S004_022;
    wire [`GF_ORDER-1:0] evaluated_term_S004_023;
    wire [`GF_ORDER-1:0] evaluated_term_S004_024;
    wire [`GF_ORDER-1:0] evaluated_term_S004_025;
    wire [`GF_ORDER-1:0] evaluated_term_S004_026;
    wire [`GF_ORDER-1:0] evaluated_term_S004_027;
    wire [`GF_ORDER-1:0] evaluated_term_S004_028;
    wire [`GF_ORDER-1:0] evaluated_term_S004_029;
    wire [`GF_ORDER-1:0] evaluated_term_S004_030;
    wire [`GF_ORDER-1:0] evaluated_term_S004_031;
    wire [`GF_ORDER-1:0] evaluated_term_S004_032;

    wire [`GF_ORDER-1:0] evaluated_term_S005_000;
    wire [`GF_ORDER-1:0] evaluated_term_S005_001;
    wire [`GF_ORDER-1:0] evaluated_term_S005_002;
    wire [`GF_ORDER-1:0] evaluated_term_S005_003;
    wire [`GF_ORDER-1:0] evaluated_term_S005_004;
    wire [`GF_ORDER-1:0] evaluated_term_S005_005;
    wire [`GF_ORDER-1:0] evaluated_term_S005_006;
    wire [`GF_ORDER-1:0] evaluated_term_S005_007;
    wire [`GF_ORDER-1:0] evaluated_term_S005_008;
    wire [`GF_ORDER-1:0] evaluated_term_S005_009;
    wire [`GF_ORDER-1:0] evaluated_term_S005_010;
    wire [`GF_ORDER-1:0] evaluated_term_S005_011;
    wire [`GF_ORDER-1:0] evaluated_term_S005_012;
    wire [`GF_ORDER-1:0] evaluated_term_S005_013;
    wire [`GF_ORDER-1:0] evaluated_term_S005_014;
    wire [`GF_ORDER-1:0] evaluated_term_S005_015;
    wire [`GF_ORDER-1:0] evaluated_term_S005_016;
    wire [`GF_ORDER-1:0] evaluated_term_S005_017;
    wire [`GF_ORDER-1:0] evaluated_term_S005_018;
    wire [`GF_ORDER-1:0] evaluated_term_S005_019;
    wire [`GF_ORDER-1:0] evaluated_term_S005_020;
    wire [`GF_ORDER-1:0] evaluated_term_S005_021;
    wire [`GF_ORDER-1:0] evaluated_term_S005_022;
    wire [`GF_ORDER-1:0] evaluated_term_S005_023;
    wire [`GF_ORDER-1:0] evaluated_term_S005_024;
    wire [`GF_ORDER-1:0] evaluated_term_S005_025;
    wire [`GF_ORDER-1:0] evaluated_term_S005_026;
    wire [`GF_ORDER-1:0] evaluated_term_S005_027;
    wire [`GF_ORDER-1:0] evaluated_term_S005_028;
    wire [`GF_ORDER-1:0] evaluated_term_S005_029;
    wire [`GF_ORDER-1:0] evaluated_term_S005_030;
    wire [`GF_ORDER-1:0] evaluated_term_S005_031;
    wire [`GF_ORDER-1:0] evaluated_term_S005_032;

    wire [`GF_ORDER-1:0] evaluated_term_S006_000;
    wire [`GF_ORDER-1:0] evaluated_term_S006_001;
    wire [`GF_ORDER-1:0] evaluated_term_S006_002;
    wire [`GF_ORDER-1:0] evaluated_term_S006_003;
    wire [`GF_ORDER-1:0] evaluated_term_S006_004;
    wire [`GF_ORDER-1:0] evaluated_term_S006_005;
    wire [`GF_ORDER-1:0] evaluated_term_S006_006;
    wire [`GF_ORDER-1:0] evaluated_term_S006_007;
    wire [`GF_ORDER-1:0] evaluated_term_S006_008;
    wire [`GF_ORDER-1:0] evaluated_term_S006_009;
    wire [`GF_ORDER-1:0] evaluated_term_S006_010;
    wire [`GF_ORDER-1:0] evaluated_term_S006_011;
    wire [`GF_ORDER-1:0] evaluated_term_S006_012;
    wire [`GF_ORDER-1:0] evaluated_term_S006_013;
    wire [`GF_ORDER-1:0] evaluated_term_S006_014;
    wire [`GF_ORDER-1:0] evaluated_term_S006_015;
    wire [`GF_ORDER-1:0] evaluated_term_S006_016;
    wire [`GF_ORDER-1:0] evaluated_term_S006_017;
    wire [`GF_ORDER-1:0] evaluated_term_S006_018;
    wire [`GF_ORDER-1:0] evaluated_term_S006_019;
    wire [`GF_ORDER-1:0] evaluated_term_S006_020;
    wire [`GF_ORDER-1:0] evaluated_term_S006_021;
    wire [`GF_ORDER-1:0] evaluated_term_S006_022;
    wire [`GF_ORDER-1:0] evaluated_term_S006_023;
    wire [`GF_ORDER-1:0] evaluated_term_S006_024;
    wire [`GF_ORDER-1:0] evaluated_term_S006_025;
    wire [`GF_ORDER-1:0] evaluated_term_S006_026;
    wire [`GF_ORDER-1:0] evaluated_term_S006_027;
    wire [`GF_ORDER-1:0] evaluated_term_S006_028;
    wire [`GF_ORDER-1:0] evaluated_term_S006_029;
    wire [`GF_ORDER-1:0] evaluated_term_S006_030;
    wire [`GF_ORDER-1:0] evaluated_term_S006_031;
    wire [`GF_ORDER-1:0] evaluated_term_S006_032;

    wire [`GF_ORDER-1:0] evaluated_term_S007_000;
    wire [`GF_ORDER-1:0] evaluated_term_S007_001;
    wire [`GF_ORDER-1:0] evaluated_term_S007_002;
    wire [`GF_ORDER-1:0] evaluated_term_S007_003;
    wire [`GF_ORDER-1:0] evaluated_term_S007_004;
    wire [`GF_ORDER-1:0] evaluated_term_S007_005;
    wire [`GF_ORDER-1:0] evaluated_term_S007_006;
    wire [`GF_ORDER-1:0] evaluated_term_S007_007;
    wire [`GF_ORDER-1:0] evaluated_term_S007_008;
    wire [`GF_ORDER-1:0] evaluated_term_S007_009;
    wire [`GF_ORDER-1:0] evaluated_term_S007_010;
    wire [`GF_ORDER-1:0] evaluated_term_S007_011;
    wire [`GF_ORDER-1:0] evaluated_term_S007_012;
    wire [`GF_ORDER-1:0] evaluated_term_S007_013;
    wire [`GF_ORDER-1:0] evaluated_term_S007_014;
    wire [`GF_ORDER-1:0] evaluated_term_S007_015;
    wire [`GF_ORDER-1:0] evaluated_term_S007_016;
    wire [`GF_ORDER-1:0] evaluated_term_S007_017;
    wire [`GF_ORDER-1:0] evaluated_term_S007_018;
    wire [`GF_ORDER-1:0] evaluated_term_S007_019;
    wire [`GF_ORDER-1:0] evaluated_term_S007_020;
    wire [`GF_ORDER-1:0] evaluated_term_S007_021;
    wire [`GF_ORDER-1:0] evaluated_term_S007_022;
    wire [`GF_ORDER-1:0] evaluated_term_S007_023;
    wire [`GF_ORDER-1:0] evaluated_term_S007_024;
    wire [`GF_ORDER-1:0] evaluated_term_S007_025;
    wire [`GF_ORDER-1:0] evaluated_term_S007_026;
    wire [`GF_ORDER-1:0] evaluated_term_S007_027;
    wire [`GF_ORDER-1:0] evaluated_term_S007_028;
    wire [`GF_ORDER-1:0] evaluated_term_S007_029;
    wire [`GF_ORDER-1:0] evaluated_term_S007_030;
    wire [`GF_ORDER-1:0] evaluated_term_S007_031;
    wire [`GF_ORDER-1:0] evaluated_term_S007_032;

    wire [`GF_ORDER-1:0] evaluated_term_S008_000;
    wire [`GF_ORDER-1:0] evaluated_term_S008_001;
    wire [`GF_ORDER-1:0] evaluated_term_S008_002;
    wire [`GF_ORDER-1:0] evaluated_term_S008_003;
    wire [`GF_ORDER-1:0] evaluated_term_S008_004;
    wire [`GF_ORDER-1:0] evaluated_term_S008_005;
    wire [`GF_ORDER-1:0] evaluated_term_S008_006;
    wire [`GF_ORDER-1:0] evaluated_term_S008_007;
    wire [`GF_ORDER-1:0] evaluated_term_S008_008;
    wire [`GF_ORDER-1:0] evaluated_term_S008_009;
    wire [`GF_ORDER-1:0] evaluated_term_S008_010;
    wire [`GF_ORDER-1:0] evaluated_term_S008_011;
    wire [`GF_ORDER-1:0] evaluated_term_S008_012;
    wire [`GF_ORDER-1:0] evaluated_term_S008_013;
    wire [`GF_ORDER-1:0] evaluated_term_S008_014;
    wire [`GF_ORDER-1:0] evaluated_term_S008_015;
    wire [`GF_ORDER-1:0] evaluated_term_S008_016;
    wire [`GF_ORDER-1:0] evaluated_term_S008_017;
    wire [`GF_ORDER-1:0] evaluated_term_S008_018;
    wire [`GF_ORDER-1:0] evaluated_term_S008_019;
    wire [`GF_ORDER-1:0] evaluated_term_S008_020;
    wire [`GF_ORDER-1:0] evaluated_term_S008_021;
    wire [`GF_ORDER-1:0] evaluated_term_S008_022;
    wire [`GF_ORDER-1:0] evaluated_term_S008_023;
    wire [`GF_ORDER-1:0] evaluated_term_S008_024;
    wire [`GF_ORDER-1:0] evaluated_term_S008_025;
    wire [`GF_ORDER-1:0] evaluated_term_S008_026;
    wire [`GF_ORDER-1:0] evaluated_term_S008_027;
    wire [`GF_ORDER-1:0] evaluated_term_S008_028;
    wire [`GF_ORDER-1:0] evaluated_term_S008_029;
    wire [`GF_ORDER-1:0] evaluated_term_S008_030;
    wire [`GF_ORDER-1:0] evaluated_term_S008_031;
    wire [`GF_ORDER-1:0] evaluated_term_S008_032;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
	
	// encoder FSM state
	reg [CS_FSM_BIT-1:0] cur_state;
	reg [CS_FSM_BIT-1:0] nxt_state;
	
	// internal counter
	reg [`CS_OUTPUT_LOOP_COUNT_BIT:0] counter;
	
	// internal variable
	wire [(`ECC_PARAM_T+1)*`GF_ORDER -1:`GF_ORDER ] v_input_wire_e000; // v_040 ~ v_001, except v_000
	reg [(`ECC_PARAM_T+1)*`GF_ORDER -1:`GF_ORDER ] v_buffer_e000; // v_040 ~ v_001, except v_000
	reg [`GF_ORDER -1:0] v_buffer_000; // v_000
	
	wire [(`ECC_PARAM_T+1)*`GF_ORDER -1:`GF_ORDER ] shortened_v; // v_040 ~ v_001
	wire [(`ECC_PARAM_T+1)*`GF_ORDER -1:`GF_ORDER ] feedback_wire; // v_040 ~ v_001
	
	reg [(`ECC_PARAM_T+1)*`GF_ORDER -1:`GF_ORDER ] feedback_buffer; // v_040 ~ v_001
	
	reg [`CS_PARALLEL-1:0] received_code_buffer;
	wire [`CS_PARALLEL-1:0] flipped_message;
	
	
	
	assign BRAM_read_enable = (execute_cs) | ( ((cur_state == EVAL_SHT) | (cur_state == CS_STRT) | (cur_state == CS_FBCK)) & (counter != `CS_OUTPUT_LOOP_COUNT) & (counter != `CS_OUTPUT_LOOP_COUNT+1) );
	assign BRAM_read_address = counter[`CS_OUTPUT_LOOP_COUNT_BIT-2:0];
	
	assign cs_start = (cur_state == EVAL_SHT);
	assign next_cs_available = (cur_state == RESET) | (cur_state == CS_FNLS);
	assign cs_complete = (cur_state == CS_FNLS);
	
	assign corrected_message_BUS_valid = (cur_state == CS_FBCK) | (cur_state == CS_FNLS);
	assign corrected_message_output_start = (counter == 3);
	assign corrected_message_output_end = cs_complete;
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// 
	
	assign v_input_wire_e000[(`ECC_PARAM_T+1)*`GF_ORDER-1:`GF_ORDER] = { v_032[`GF_ORDER-1:0], v_031[`GF_ORDER-1:0], v_030[`GF_ORDER-1:0], v_029[`GF_ORDER-1:0], v_028[`GF_ORDER-1:0], v_027[`GF_ORDER-1:0], v_026[`GF_ORDER-1:0], v_025[`GF_ORDER-1:0], v_024[`GF_ORDER-1:0], v_023[`GF_ORDER-1:0], v_022[`GF_ORDER-1:0], v_021[`GF_ORDER-1:0], v_020[`GF_ORDER-1:0], v_019[`GF_ORDER-1:0], v_018[`GF_ORDER-1:0], v_017[`GF_ORDER-1:0], v_016[`GF_ORDER-1:0], v_015[`GF_ORDER-1:0], v_014[`GF_ORDER-1:0], v_013[`GF_ORDER-1:0], v_012[`GF_ORDER-1:0], v_011[`GF_ORDER-1:0], v_010[`GF_ORDER-1:0], v_009[`GF_ORDER-1:0], v_008[`GF_ORDER-1:0], v_007[`GF_ORDER-1:0], v_006[`GF_ORDER-1:0], v_005[`GF_ORDER-1:0], v_004[`GF_ORDER-1:0], v_003[`GF_ORDER-1:0], v_002[`GF_ORDER-1:0], v_001[`GF_ORDER-1:0] };

    assign shortened_v[(`ECC_PARAM_T+1)*`GF_ORDER-1:`GF_ORDER] = { shortened_v_032[`GF_ORDER-1:0], shortened_v_031[`GF_ORDER-1:0], shortened_v_030[`GF_ORDER-1:0], shortened_v_029[`GF_ORDER-1:0], shortened_v_028[`GF_ORDER-1:0], shortened_v_027[`GF_ORDER-1:0], shortened_v_026[`GF_ORDER-1:0], shortened_v_025[`GF_ORDER-1:0], shortened_v_024[`GF_ORDER-1:0], shortened_v_023[`GF_ORDER-1:0], shortened_v_022[`GF_ORDER-1:0], shortened_v_021[`GF_ORDER-1:0], shortened_v_020[`GF_ORDER-1:0], shortened_v_019[`GF_ORDER-1:0], shortened_v_018[`GF_ORDER-1:0], shortened_v_017[`GF_ORDER-1:0], shortened_v_016[`GF_ORDER-1:0], shortened_v_015[`GF_ORDER-1:0], shortened_v_014[`GF_ORDER-1:0], shortened_v_013[`GF_ORDER-1:0], shortened_v_012[`GF_ORDER-1:0], shortened_v_011[`GF_ORDER-1:0], shortened_v_010[`GF_ORDER-1:0], shortened_v_009[`GF_ORDER-1:0], shortened_v_008[`GF_ORDER-1:0], shortened_v_007[`GF_ORDER-1:0], shortened_v_006[`GF_ORDER-1:0], shortened_v_005[`GF_ORDER-1:0], shortened_v_004[`GF_ORDER-1:0], shortened_v_003[`GF_ORDER-1:0], shortened_v_002[`GF_ORDER-1:0], shortened_v_001[`GF_ORDER-1:0] };

    assign feedback_wire[(`ECC_PARAM_T+1)*`GF_ORDER-1:`GF_ORDER] = { evaluated_term_S008_032[`GF_ORDER-1:0], evaluated_term_S008_031[`GF_ORDER-1:0], evaluated_term_S008_030[`GF_ORDER-1:0], evaluated_term_S008_029[`GF_ORDER-1:0], evaluated_term_S008_028[`GF_ORDER-1:0], evaluated_term_S008_027[`GF_ORDER-1:0], evaluated_term_S008_026[`GF_ORDER-1:0], evaluated_term_S008_025[`GF_ORDER-1:0], evaluated_term_S008_024[`GF_ORDER-1:0], evaluated_term_S008_023[`GF_ORDER-1:0], evaluated_term_S008_022[`GF_ORDER-1:0], evaluated_term_S008_021[`GF_ORDER-1:0], evaluated_term_S008_020[`GF_ORDER-1:0], evaluated_term_S008_019[`GF_ORDER-1:0], evaluated_term_S008_018[`GF_ORDER-1:0], evaluated_term_S008_017[`GF_ORDER-1:0], evaluated_term_S008_016[`GF_ORDER-1:0], evaluated_term_S008_015[`GF_ORDER-1:0], evaluated_term_S008_014[`GF_ORDER-1:0], evaluated_term_S008_013[`GF_ORDER-1:0], evaluated_term_S008_012[`GF_ORDER-1:0], evaluated_term_S008_011[`GF_ORDER-1:0], evaluated_term_S008_010[`GF_ORDER-1:0], evaluated_term_S008_009[`GF_ORDER-1:0], evaluated_term_S008_008[`GF_ORDER-1:0], evaluated_term_S008_007[`GF_ORDER-1:0], evaluated_term_S008_006[`GF_ORDER-1:0], evaluated_term_S008_005[`GF_ORDER-1:0], evaluated_term_S008_004[`GF_ORDER-1:0], evaluated_term_S008_003[`GF_ORDER-1:0], evaluated_term_S008_002[`GF_ORDER-1:0], evaluated_term_S008_001[`GF_ORDER-1:0] };
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	assign ELP_term_000[`GF_ORDER -1:0] = v_buffer_000[`GF_ORDER -1:0];
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 32
	
    assign ELP_term_001[`GF_ORDER -1:0] = feedback_buffer[(  1+1)*`GF_ORDER -1:(  1+0)*`GF_ORDER ];
    assign ELP_term_002[`GF_ORDER -1:0] = feedback_buffer[(  2+1)*`GF_ORDER -1:(  2+0)*`GF_ORDER ];
    assign ELP_term_003[`GF_ORDER -1:0] = feedback_buffer[(  3+1)*`GF_ORDER -1:(  3+0)*`GF_ORDER ];
    assign ELP_term_004[`GF_ORDER -1:0] = feedback_buffer[(  4+1)*`GF_ORDER -1:(  4+0)*`GF_ORDER ];
    assign ELP_term_005[`GF_ORDER -1:0] = feedback_buffer[(  5+1)*`GF_ORDER -1:(  5+0)*`GF_ORDER ];
    assign ELP_term_006[`GF_ORDER -1:0] = feedback_buffer[(  6+1)*`GF_ORDER -1:(  6+0)*`GF_ORDER ];
    assign ELP_term_007[`GF_ORDER -1:0] = feedback_buffer[(  7+1)*`GF_ORDER -1:(  7+0)*`GF_ORDER ];
    assign ELP_term_008[`GF_ORDER -1:0] = feedback_buffer[(  8+1)*`GF_ORDER -1:(  8+0)*`GF_ORDER ];
    assign ELP_term_009[`GF_ORDER -1:0] = feedback_buffer[(  9+1)*`GF_ORDER -1:(  9+0)*`GF_ORDER ];
    assign ELP_term_010[`GF_ORDER -1:0] = feedback_buffer[( 10+1)*`GF_ORDER -1:( 10+0)*`GF_ORDER ];
    assign ELP_term_011[`GF_ORDER -1:0] = feedback_buffer[( 11+1)*`GF_ORDER -1:( 11+0)*`GF_ORDER ];
    assign ELP_term_012[`GF_ORDER -1:0] = feedback_buffer[( 12+1)*`GF_ORDER -1:( 12+0)*`GF_ORDER ];
    assign ELP_term_013[`GF_ORDER -1:0] = feedback_buffer[( 13+1)*`GF_ORDER -1:( 13+0)*`GF_ORDER ];
    assign ELP_term_014[`GF_ORDER -1:0] = feedback_buffer[( 14+1)*`GF_ORDER -1:( 14+0)*`GF_ORDER ];
    assign ELP_term_015[`GF_ORDER -1:0] = feedback_buffer[( 15+1)*`GF_ORDER -1:( 15+0)*`GF_ORDER ];
    assign ELP_term_016[`GF_ORDER -1:0] = feedback_buffer[( 16+1)*`GF_ORDER -1:( 16+0)*`GF_ORDER ];
    assign ELP_term_017[`GF_ORDER -1:0] = feedback_buffer[( 17+1)*`GF_ORDER -1:( 17+0)*`GF_ORDER ];
    assign ELP_term_018[`GF_ORDER -1:0] = feedback_buffer[( 18+1)*`GF_ORDER -1:( 18+0)*`GF_ORDER ];
    assign ELP_term_019[`GF_ORDER -1:0] = feedback_buffer[( 19+1)*`GF_ORDER -1:( 19+0)*`GF_ORDER ];
    assign ELP_term_020[`GF_ORDER -1:0] = feedback_buffer[( 20+1)*`GF_ORDER -1:( 20+0)*`GF_ORDER ];
    assign ELP_term_021[`GF_ORDER -1:0] = feedback_buffer[( 21+1)*`GF_ORDER -1:( 21+0)*`GF_ORDER ];
    assign ELP_term_022[`GF_ORDER -1:0] = feedback_buffer[( 22+1)*`GF_ORDER -1:( 22+0)*`GF_ORDER ];
    assign ELP_term_023[`GF_ORDER -1:0] = feedback_buffer[( 23+1)*`GF_ORDER -1:( 23+0)*`GF_ORDER ];
    assign ELP_term_024[`GF_ORDER -1:0] = feedback_buffer[( 24+1)*`GF_ORDER -1:( 24+0)*`GF_ORDER ];
    assign ELP_term_025[`GF_ORDER -1:0] = feedback_buffer[( 25+1)*`GF_ORDER -1:( 25+0)*`GF_ORDER ];
    assign ELP_term_026[`GF_ORDER -1:0] = feedback_buffer[( 26+1)*`GF_ORDER -1:( 26+0)*`GF_ORDER ];
    assign ELP_term_027[`GF_ORDER -1:0] = feedback_buffer[( 27+1)*`GF_ORDER -1:( 27+0)*`GF_ORDER ];
    assign ELP_term_028[`GF_ORDER -1:0] = feedback_buffer[( 28+1)*`GF_ORDER -1:( 28+0)*`GF_ORDER ];
    assign ELP_term_029[`GF_ORDER -1:0] = feedback_buffer[( 29+1)*`GF_ORDER -1:( 29+0)*`GF_ORDER ];
    assign ELP_term_030[`GF_ORDER -1:0] = feedback_buffer[( 30+1)*`GF_ORDER -1:( 30+0)*`GF_ORDER ];
    assign ELP_term_031[`GF_ORDER -1:0] = feedback_buffer[( 31+1)*`GF_ORDER -1:( 31+0)*`GF_ORDER ];
    assign ELP_term_032[`GF_ORDER -1:0] = feedback_buffer[( 32+1)*`GF_ORDER -1:( 32+0)*`GF_ORDER ];
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
	
	// update current state to next state
	always @ (posedge clk, negedge nRESET)
	begin
		if (!nRESET) begin
			cur_state <= RESET;
		end else begin
			cur_state <= nxt_state;
		end
	end
	
	// decide next state
	always @ ( * )
	begin
		case (cur_state)
		RESET: begin
			nxt_state <= (execute_cs)? EVAL_SHT:RESET;
		end
		EVAL_SHT: begin
			nxt_state <= CS_STRT;
		end
		CS_STRT: begin
			nxt_state <= CS_FBCK;
		end
		CS_FBCK: begin
			nxt_state <= (counter == `CS_OUTPUT_LOOP_COUNT+1)? (CS_FNLS):(CS_FBCK);
		end
		CS_FNLS: begin
			nxt_state <= (execute_cs)? EVAL_SHT:RESET;
		end
		default: begin
			nxt_state <= RESET;
		end
		endcase
	end
	
	// state behaviour
	always @ (posedge clk)
	begin
			case (nxt_state)
			
			RESET: begin
				counter <= 0;
				
				v_buffer_e000 <= 0;
				v_buffer_000 <= 0;
				
				feedback_buffer <= 0;
				
				received_code_buffer <= 0;
				corrected_message <= 0;
			end
			
			EVAL_SHT: begin
				counter <= 1;
				
				v_buffer_e000 <= v_input_wire_e000;
				v_buffer_000 <= v_000;
				
				feedback_buffer <= 0;
				
				received_code_buffer <= 0;
				corrected_message <= 0;
			end
			
			CS_STRT: begin
				counter <= 2;
				
				v_buffer_e000 <= 0;
				v_buffer_000 <= v_buffer_000;
				
				feedback_buffer <= shortened_v;
				
				received_code_buffer <= BRAM_read_data;
				corrected_message <= 0;
			end
			
			CS_FBCK: begin
				counter <= counter + 1'b1;
				
				v_buffer_e000 <= 0;
				v_buffer_000 <= v_buffer_000;
				
				feedback_buffer <= feedback_wire;
				
				received_code_buffer <= BRAM_read_data;
				corrected_message <= flipped_message;
			end
			
			CS_FNLS: begin
				counter <= 0;
				
				v_buffer_e000 <= 0;
				v_buffer_000 <= 0;
				
				feedback_buffer <= 0;
				
				received_code_buffer <= 0;
				corrected_message <= flipped_message;
			end
			
			default: begin
				counter <= 0;
				
				v_buffer_e000 <= 0;
				v_buffer_000 <= 0;
				
				feedback_buffer <= 0;
				
				received_code_buffer <= 0;
				corrected_message <= 0;
			end
			
			endcase
	end
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 8
	
	assign evaluated_term_S001_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S002_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S003_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S004_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S005_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S006_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S007_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
    assign evaluated_term_S008_000[`GF_ORDER -1:0] = ELP_term_000[`GF_ORDER -1:0];
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 32

	cs_shortening_matrix_alpha_to_001 SM_001 ( // shortened by alpha_to_15903, 15903
    .in(v_buffer_e000[(  1+1)*`GF_ORDER-1:(  1+0)*`GF_ORDER]), .out(shortened_v_001[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_002 SM_002 ( // shortened by alpha_to_15903, 31806
    .in(v_buffer_e000[(  2+1)*`GF_ORDER-1:(  2+0)*`GF_ORDER]), .out(shortened_v_002[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_003 SM_003 ( // shortened by alpha_to_15903, 14942
    .in(v_buffer_e000[(  3+1)*`GF_ORDER-1:(  3+0)*`GF_ORDER]), .out(shortened_v_003[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_004 SM_004 ( // shortened by alpha_to_15903, 30845
    .in(v_buffer_e000[(  4+1)*`GF_ORDER-1:(  4+0)*`GF_ORDER]), .out(shortened_v_004[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_005 SM_005 ( // shortened by alpha_to_15903, 13981
    .in(v_buffer_e000[(  5+1)*`GF_ORDER-1:(  5+0)*`GF_ORDER]), .out(shortened_v_005[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_006 SM_006 ( // shortened by alpha_to_15903, 29884
    .in(v_buffer_e000[(  6+1)*`GF_ORDER-1:(  6+0)*`GF_ORDER]), .out(shortened_v_006[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_007 SM_007 ( // shortened by alpha_to_15903, 13020
    .in(v_buffer_e000[(  7+1)*`GF_ORDER-1:(  7+0)*`GF_ORDER]), .out(shortened_v_007[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_008 SM_008 ( // shortened by alpha_to_15903, 28923
    .in(v_buffer_e000[(  8+1)*`GF_ORDER-1:(  8+0)*`GF_ORDER]), .out(shortened_v_008[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_009 SM_009 ( // shortened by alpha_to_15903, 12059
    .in(v_buffer_e000[(  9+1)*`GF_ORDER-1:(  9+0)*`GF_ORDER]), .out(shortened_v_009[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_010 SM_010 ( // shortened by alpha_to_15903, 27962
    .in(v_buffer_e000[( 10+1)*`GF_ORDER-1:( 10+0)*`GF_ORDER]), .out(shortened_v_010[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_011 SM_011 ( // shortened by alpha_to_15903, 11098
    .in(v_buffer_e000[( 11+1)*`GF_ORDER-1:( 11+0)*`GF_ORDER]), .out(shortened_v_011[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_012 SM_012 ( // shortened by alpha_to_15903, 27001
    .in(v_buffer_e000[( 12+1)*`GF_ORDER-1:( 12+0)*`GF_ORDER]), .out(shortened_v_012[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_013 SM_013 ( // shortened by alpha_to_15903, 10137
    .in(v_buffer_e000[( 13+1)*`GF_ORDER-1:( 13+0)*`GF_ORDER]), .out(shortened_v_013[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_014 SM_014 ( // shortened by alpha_to_15903, 26040
    .in(v_buffer_e000[( 14+1)*`GF_ORDER-1:( 14+0)*`GF_ORDER]), .out(shortened_v_014[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_015 SM_015 ( // shortened by alpha_to_15903, 9176
    .in(v_buffer_e000[( 15+1)*`GF_ORDER-1:( 15+0)*`GF_ORDER]), .out(shortened_v_015[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_016 SM_016 ( // shortened by alpha_to_15903, 25079
    .in(v_buffer_e000[( 16+1)*`GF_ORDER-1:( 16+0)*`GF_ORDER]), .out(shortened_v_016[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_017 SM_017 ( // shortened by alpha_to_15903, 8215
    .in(v_buffer_e000[( 17+1)*`GF_ORDER-1:( 17+0)*`GF_ORDER]), .out(shortened_v_017[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_018 SM_018 ( // shortened by alpha_to_15903, 24118
    .in(v_buffer_e000[( 18+1)*`GF_ORDER-1:( 18+0)*`GF_ORDER]), .out(shortened_v_018[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_019 SM_019 ( // shortened by alpha_to_15903, 7254
    .in(v_buffer_e000[( 19+1)*`GF_ORDER-1:( 19+0)*`GF_ORDER]), .out(shortened_v_019[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_020 SM_020 ( // shortened by alpha_to_15903, 23157
    .in(v_buffer_e000[( 20+1)*`GF_ORDER-1:( 20+0)*`GF_ORDER]), .out(shortened_v_020[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_021 SM_021 ( // shortened by alpha_to_15903, 6293
    .in(v_buffer_e000[( 21+1)*`GF_ORDER-1:( 21+0)*`GF_ORDER]), .out(shortened_v_021[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_022 SM_022 ( // shortened by alpha_to_15903, 22196
    .in(v_buffer_e000[( 22+1)*`GF_ORDER-1:( 22+0)*`GF_ORDER]), .out(shortened_v_022[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_023 SM_023 ( // shortened by alpha_to_15903, 5332
    .in(v_buffer_e000[( 23+1)*`GF_ORDER-1:( 23+0)*`GF_ORDER]), .out(shortened_v_023[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_024 SM_024 ( // shortened by alpha_to_15903, 21235
    .in(v_buffer_e000[( 24+1)*`GF_ORDER-1:( 24+0)*`GF_ORDER]), .out(shortened_v_024[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_025 SM_025 ( // shortened by alpha_to_15903, 4371
    .in(v_buffer_e000[( 25+1)*`GF_ORDER-1:( 25+0)*`GF_ORDER]), .out(shortened_v_025[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_026 SM_026 ( // shortened by alpha_to_15903, 20274
    .in(v_buffer_e000[( 26+1)*`GF_ORDER-1:( 26+0)*`GF_ORDER]), .out(shortened_v_026[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_027 SM_027 ( // shortened by alpha_to_15903, 3410
    .in(v_buffer_e000[( 27+1)*`GF_ORDER-1:( 27+0)*`GF_ORDER]), .out(shortened_v_027[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_028 SM_028 ( // shortened by alpha_to_15903, 19313
    .in(v_buffer_e000[( 28+1)*`GF_ORDER-1:( 28+0)*`GF_ORDER]), .out(shortened_v_028[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_029 SM_029 ( // shortened by alpha_to_15903, 2449
    .in(v_buffer_e000[( 29+1)*`GF_ORDER-1:( 29+0)*`GF_ORDER]), .out(shortened_v_029[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_030 SM_030 ( // shortened by alpha_to_15903, 18352
    .in(v_buffer_e000[( 30+1)*`GF_ORDER-1:( 30+0)*`GF_ORDER]), .out(shortened_v_030[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_031 SM_031 ( // shortened by alpha_to_15903, 1488
    .in(v_buffer_e000[( 31+1)*`GF_ORDER-1:( 31+0)*`GF_ORDER]), .out(shortened_v_031[`GF_ORDER-1:0]) );

    cs_shortening_matrix_alpha_to_032 SM_032 ( // shortened by alpha_to_15903, 17391
    .in(v_buffer_e000[( 32+1)*`GF_ORDER-1:( 32+0)*`GF_ORDER]), .out(shortened_v_032[`GF_ORDER-1:0]) );
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 32 * 8 = 256
	
	cs_evaluation_matrix_slot_001_alpha_to_001 EM_S001_001 ( // evaluated by alpha_to_1, 1
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S001_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_002 EM_S001_002 ( // evaluated by alpha_to_1, 2
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S001_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_003 EM_S001_003 ( // evaluated by alpha_to_1, 3
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S001_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_004 EM_S001_004 ( // evaluated by alpha_to_1, 4
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S001_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_005 EM_S001_005 ( // evaluated by alpha_to_1, 5
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S001_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_006 EM_S001_006 ( // evaluated by alpha_to_1, 6
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S001_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_007 EM_S001_007 ( // evaluated by alpha_to_1, 7
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S001_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_008 EM_S001_008 ( // evaluated by alpha_to_1, 8
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S001_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_009 EM_S001_009 ( // evaluated by alpha_to_1, 9
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S001_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_010 EM_S001_010 ( // evaluated by alpha_to_1, 10
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S001_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_011 EM_S001_011 ( // evaluated by alpha_to_1, 11
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S001_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_012 EM_S001_012 ( // evaluated by alpha_to_1, 12
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S001_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_013 EM_S001_013 ( // evaluated by alpha_to_1, 13
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S001_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_014 EM_S001_014 ( // evaluated by alpha_to_1, 14
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S001_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_015 EM_S001_015 ( // evaluated by alpha_to_1, 15
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S001_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_016 EM_S001_016 ( // evaluated by alpha_to_1, 16
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S001_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_017 EM_S001_017 ( // evaluated by alpha_to_1, 17
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S001_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_018 EM_S001_018 ( // evaluated by alpha_to_1, 18
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S001_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_019 EM_S001_019 ( // evaluated by alpha_to_1, 19
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S001_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_020 EM_S001_020 ( // evaluated by alpha_to_1, 20
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S001_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_021 EM_S001_021 ( // evaluated by alpha_to_1, 21
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S001_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_022 EM_S001_022 ( // evaluated by alpha_to_1, 22
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S001_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_023 EM_S001_023 ( // evaluated by alpha_to_1, 23
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S001_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_024 EM_S001_024 ( // evaluated by alpha_to_1, 24
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S001_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_025 EM_S001_025 ( // evaluated by alpha_to_1, 25
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S001_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_026 EM_S001_026 ( // evaluated by alpha_to_1, 26
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S001_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_027 EM_S001_027 ( // evaluated by alpha_to_1, 27
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S001_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_028 EM_S001_028 ( // evaluated by alpha_to_1, 28
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S001_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_029 EM_S001_029 ( // evaluated by alpha_to_1, 29
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S001_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_030 EM_S001_030 ( // evaluated by alpha_to_1, 30
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S001_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_031 EM_S001_031 ( // evaluated by alpha_to_1, 31
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S001_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_001_alpha_to_032 EM_S001_032 ( // evaluated by alpha_to_1, 32
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S001_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_001 EM_S002_001 ( // evaluated by alpha_to_2, 2
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S002_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_002 EM_S002_002 ( // evaluated by alpha_to_2, 4
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S002_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_003 EM_S002_003 ( // evaluated by alpha_to_2, 6
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S002_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_004 EM_S002_004 ( // evaluated by alpha_to_2, 8
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S002_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_005 EM_S002_005 ( // evaluated by alpha_to_2, 10
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S002_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_006 EM_S002_006 ( // evaluated by alpha_to_2, 12
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S002_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_007 EM_S002_007 ( // evaluated by alpha_to_2, 14
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S002_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_008 EM_S002_008 ( // evaluated by alpha_to_2, 16
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S002_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_009 EM_S002_009 ( // evaluated by alpha_to_2, 18
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S002_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_010 EM_S002_010 ( // evaluated by alpha_to_2, 20
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S002_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_011 EM_S002_011 ( // evaluated by alpha_to_2, 22
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S002_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_012 EM_S002_012 ( // evaluated by alpha_to_2, 24
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S002_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_013 EM_S002_013 ( // evaluated by alpha_to_2, 26
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S002_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_014 EM_S002_014 ( // evaluated by alpha_to_2, 28
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S002_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_015 EM_S002_015 ( // evaluated by alpha_to_2, 30
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S002_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_016 EM_S002_016 ( // evaluated by alpha_to_2, 32
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S002_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_017 EM_S002_017 ( // evaluated by alpha_to_2, 34
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S002_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_018 EM_S002_018 ( // evaluated by alpha_to_2, 36
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S002_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_019 EM_S002_019 ( // evaluated by alpha_to_2, 38
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S002_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_020 EM_S002_020 ( // evaluated by alpha_to_2, 40
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S002_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_021 EM_S002_021 ( // evaluated by alpha_to_2, 42
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S002_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_022 EM_S002_022 ( // evaluated by alpha_to_2, 44
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S002_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_023 EM_S002_023 ( // evaluated by alpha_to_2, 46
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S002_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_024 EM_S002_024 ( // evaluated by alpha_to_2, 48
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S002_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_025 EM_S002_025 ( // evaluated by alpha_to_2, 50
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S002_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_026 EM_S002_026 ( // evaluated by alpha_to_2, 52
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S002_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_027 EM_S002_027 ( // evaluated by alpha_to_2, 54
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S002_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_028 EM_S002_028 ( // evaluated by alpha_to_2, 56
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S002_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_029 EM_S002_029 ( // evaluated by alpha_to_2, 58
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S002_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_030 EM_S002_030 ( // evaluated by alpha_to_2, 60
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S002_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_031 EM_S002_031 ( // evaluated by alpha_to_2, 62
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S002_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_002_alpha_to_032 EM_S002_032 ( // evaluated by alpha_to_2, 64
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S002_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_001 EM_S003_001 ( // evaluated by alpha_to_3, 3
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S003_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_002 EM_S003_002 ( // evaluated by alpha_to_3, 6
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S003_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_003 EM_S003_003 ( // evaluated by alpha_to_3, 9
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S003_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_004 EM_S003_004 ( // evaluated by alpha_to_3, 12
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S003_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_005 EM_S003_005 ( // evaluated by alpha_to_3, 15
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S003_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_006 EM_S003_006 ( // evaluated by alpha_to_3, 18
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S003_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_007 EM_S003_007 ( // evaluated by alpha_to_3, 21
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S003_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_008 EM_S003_008 ( // evaluated by alpha_to_3, 24
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S003_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_009 EM_S003_009 ( // evaluated by alpha_to_3, 27
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S003_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_010 EM_S003_010 ( // evaluated by alpha_to_3, 30
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S003_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_011 EM_S003_011 ( // evaluated by alpha_to_3, 33
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S003_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_012 EM_S003_012 ( // evaluated by alpha_to_3, 36
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S003_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_013 EM_S003_013 ( // evaluated by alpha_to_3, 39
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S003_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_014 EM_S003_014 ( // evaluated by alpha_to_3, 42
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S003_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_015 EM_S003_015 ( // evaluated by alpha_to_3, 45
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S003_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_016 EM_S003_016 ( // evaluated by alpha_to_3, 48
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S003_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_017 EM_S003_017 ( // evaluated by alpha_to_3, 51
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S003_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_018 EM_S003_018 ( // evaluated by alpha_to_3, 54
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S003_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_019 EM_S003_019 ( // evaluated by alpha_to_3, 57
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S003_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_020 EM_S003_020 ( // evaluated by alpha_to_3, 60
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S003_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_021 EM_S003_021 ( // evaluated by alpha_to_3, 63
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S003_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_022 EM_S003_022 ( // evaluated by alpha_to_3, 66
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S003_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_023 EM_S003_023 ( // evaluated by alpha_to_3, 69
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S003_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_024 EM_S003_024 ( // evaluated by alpha_to_3, 72
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S003_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_025 EM_S003_025 ( // evaluated by alpha_to_3, 75
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S003_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_026 EM_S003_026 ( // evaluated by alpha_to_3, 78
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S003_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_027 EM_S003_027 ( // evaluated by alpha_to_3, 81
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S003_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_028 EM_S003_028 ( // evaluated by alpha_to_3, 84
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S003_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_029 EM_S003_029 ( // evaluated by alpha_to_3, 87
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S003_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_030 EM_S003_030 ( // evaluated by alpha_to_3, 90
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S003_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_031 EM_S003_031 ( // evaluated by alpha_to_3, 93
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S003_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_003_alpha_to_032 EM_S003_032 ( // evaluated by alpha_to_3, 96
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S003_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_001 EM_S004_001 ( // evaluated by alpha_to_4, 4
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S004_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_002 EM_S004_002 ( // evaluated by alpha_to_4, 8
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S004_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_003 EM_S004_003 ( // evaluated by alpha_to_4, 12
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S004_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_004 EM_S004_004 ( // evaluated by alpha_to_4, 16
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S004_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_005 EM_S004_005 ( // evaluated by alpha_to_4, 20
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S004_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_006 EM_S004_006 ( // evaluated by alpha_to_4, 24
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S004_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_007 EM_S004_007 ( // evaluated by alpha_to_4, 28
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S004_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_008 EM_S004_008 ( // evaluated by alpha_to_4, 32
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S004_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_009 EM_S004_009 ( // evaluated by alpha_to_4, 36
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S004_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_010 EM_S004_010 ( // evaluated by alpha_to_4, 40
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S004_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_011 EM_S004_011 ( // evaluated by alpha_to_4, 44
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S004_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_012 EM_S004_012 ( // evaluated by alpha_to_4, 48
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S004_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_013 EM_S004_013 ( // evaluated by alpha_to_4, 52
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S004_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_014 EM_S004_014 ( // evaluated by alpha_to_4, 56
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S004_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_015 EM_S004_015 ( // evaluated by alpha_to_4, 60
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S004_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_016 EM_S004_016 ( // evaluated by alpha_to_4, 64
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S004_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_017 EM_S004_017 ( // evaluated by alpha_to_4, 68
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S004_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_018 EM_S004_018 ( // evaluated by alpha_to_4, 72
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S004_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_019 EM_S004_019 ( // evaluated by alpha_to_4, 76
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S004_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_020 EM_S004_020 ( // evaluated by alpha_to_4, 80
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S004_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_021 EM_S004_021 ( // evaluated by alpha_to_4, 84
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S004_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_022 EM_S004_022 ( // evaluated by alpha_to_4, 88
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S004_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_023 EM_S004_023 ( // evaluated by alpha_to_4, 92
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S004_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_024 EM_S004_024 ( // evaluated by alpha_to_4, 96
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S004_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_025 EM_S004_025 ( // evaluated by alpha_to_4, 100
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S004_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_026 EM_S004_026 ( // evaluated by alpha_to_4, 104
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S004_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_027 EM_S004_027 ( // evaluated by alpha_to_4, 108
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S004_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_028 EM_S004_028 ( // evaluated by alpha_to_4, 112
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S004_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_029 EM_S004_029 ( // evaluated by alpha_to_4, 116
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S004_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_030 EM_S004_030 ( // evaluated by alpha_to_4, 120
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S004_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_031 EM_S004_031 ( // evaluated by alpha_to_4, 124
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S004_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_004_alpha_to_032 EM_S004_032 ( // evaluated by alpha_to_4, 128
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S004_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_001 EM_S005_001 ( // evaluated by alpha_to_5, 5
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S005_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_002 EM_S005_002 ( // evaluated by alpha_to_5, 10
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S005_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_003 EM_S005_003 ( // evaluated by alpha_to_5, 15
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S005_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_004 EM_S005_004 ( // evaluated by alpha_to_5, 20
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S005_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_005 EM_S005_005 ( // evaluated by alpha_to_5, 25
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S005_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_006 EM_S005_006 ( // evaluated by alpha_to_5, 30
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S005_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_007 EM_S005_007 ( // evaluated by alpha_to_5, 35
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S005_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_008 EM_S005_008 ( // evaluated by alpha_to_5, 40
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S005_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_009 EM_S005_009 ( // evaluated by alpha_to_5, 45
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S005_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_010 EM_S005_010 ( // evaluated by alpha_to_5, 50
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S005_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_011 EM_S005_011 ( // evaluated by alpha_to_5, 55
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S005_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_012 EM_S005_012 ( // evaluated by alpha_to_5, 60
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S005_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_013 EM_S005_013 ( // evaluated by alpha_to_5, 65
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S005_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_014 EM_S005_014 ( // evaluated by alpha_to_5, 70
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S005_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_015 EM_S005_015 ( // evaluated by alpha_to_5, 75
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S005_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_016 EM_S005_016 ( // evaluated by alpha_to_5, 80
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S005_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_017 EM_S005_017 ( // evaluated by alpha_to_5, 85
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S005_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_018 EM_S005_018 ( // evaluated by alpha_to_5, 90
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S005_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_019 EM_S005_019 ( // evaluated by alpha_to_5, 95
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S005_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_020 EM_S005_020 ( // evaluated by alpha_to_5, 100
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S005_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_021 EM_S005_021 ( // evaluated by alpha_to_5, 105
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S005_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_022 EM_S005_022 ( // evaluated by alpha_to_5, 110
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S005_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_023 EM_S005_023 ( // evaluated by alpha_to_5, 115
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S005_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_024 EM_S005_024 ( // evaluated by alpha_to_5, 120
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S005_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_025 EM_S005_025 ( // evaluated by alpha_to_5, 125
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S005_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_026 EM_S005_026 ( // evaluated by alpha_to_5, 130
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S005_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_027 EM_S005_027 ( // evaluated by alpha_to_5, 135
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S005_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_028 EM_S005_028 ( // evaluated by alpha_to_5, 140
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S005_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_029 EM_S005_029 ( // evaluated by alpha_to_5, 145
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S005_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_030 EM_S005_030 ( // evaluated by alpha_to_5, 150
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S005_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_031 EM_S005_031 ( // evaluated by alpha_to_5, 155
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S005_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_005_alpha_to_032 EM_S005_032 ( // evaluated by alpha_to_5, 160
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S005_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_001 EM_S006_001 ( // evaluated by alpha_to_6, 6
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S006_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_002 EM_S006_002 ( // evaluated by alpha_to_6, 12
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S006_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_003 EM_S006_003 ( // evaluated by alpha_to_6, 18
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S006_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_004 EM_S006_004 ( // evaluated by alpha_to_6, 24
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S006_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_005 EM_S006_005 ( // evaluated by alpha_to_6, 30
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S006_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_006 EM_S006_006 ( // evaluated by alpha_to_6, 36
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S006_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_007 EM_S006_007 ( // evaluated by alpha_to_6, 42
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S006_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_008 EM_S006_008 ( // evaluated by alpha_to_6, 48
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S006_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_009 EM_S006_009 ( // evaluated by alpha_to_6, 54
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S006_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_010 EM_S006_010 ( // evaluated by alpha_to_6, 60
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S006_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_011 EM_S006_011 ( // evaluated by alpha_to_6, 66
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S006_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_012 EM_S006_012 ( // evaluated by alpha_to_6, 72
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S006_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_013 EM_S006_013 ( // evaluated by alpha_to_6, 78
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S006_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_014 EM_S006_014 ( // evaluated by alpha_to_6, 84
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S006_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_015 EM_S006_015 ( // evaluated by alpha_to_6, 90
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S006_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_016 EM_S006_016 ( // evaluated by alpha_to_6, 96
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S006_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_017 EM_S006_017 ( // evaluated by alpha_to_6, 102
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S006_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_018 EM_S006_018 ( // evaluated by alpha_to_6, 108
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S006_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_019 EM_S006_019 ( // evaluated by alpha_to_6, 114
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S006_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_020 EM_S006_020 ( // evaluated by alpha_to_6, 120
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S006_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_021 EM_S006_021 ( // evaluated by alpha_to_6, 126
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S006_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_022 EM_S006_022 ( // evaluated by alpha_to_6, 132
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S006_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_023 EM_S006_023 ( // evaluated by alpha_to_6, 138
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S006_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_024 EM_S006_024 ( // evaluated by alpha_to_6, 144
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S006_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_025 EM_S006_025 ( // evaluated by alpha_to_6, 150
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S006_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_026 EM_S006_026 ( // evaluated by alpha_to_6, 156
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S006_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_027 EM_S006_027 ( // evaluated by alpha_to_6, 162
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S006_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_028 EM_S006_028 ( // evaluated by alpha_to_6, 168
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S006_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_029 EM_S006_029 ( // evaluated by alpha_to_6, 174
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S006_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_030 EM_S006_030 ( // evaluated by alpha_to_6, 180
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S006_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_031 EM_S006_031 ( // evaluated by alpha_to_6, 186
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S006_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_006_alpha_to_032 EM_S006_032 ( // evaluated by alpha_to_6, 192
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S006_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_001 EM_S007_001 ( // evaluated by alpha_to_7, 7
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S007_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_002 EM_S007_002 ( // evaluated by alpha_to_7, 14
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S007_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_003 EM_S007_003 ( // evaluated by alpha_to_7, 21
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S007_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_004 EM_S007_004 ( // evaluated by alpha_to_7, 28
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S007_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_005 EM_S007_005 ( // evaluated by alpha_to_7, 35
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S007_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_006 EM_S007_006 ( // evaluated by alpha_to_7, 42
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S007_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_007 EM_S007_007 ( // evaluated by alpha_to_7, 49
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S007_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_008 EM_S007_008 ( // evaluated by alpha_to_7, 56
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S007_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_009 EM_S007_009 ( // evaluated by alpha_to_7, 63
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S007_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_010 EM_S007_010 ( // evaluated by alpha_to_7, 70
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S007_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_011 EM_S007_011 ( // evaluated by alpha_to_7, 77
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S007_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_012 EM_S007_012 ( // evaluated by alpha_to_7, 84
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S007_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_013 EM_S007_013 ( // evaluated by alpha_to_7, 91
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S007_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_014 EM_S007_014 ( // evaluated by alpha_to_7, 98
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S007_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_015 EM_S007_015 ( // evaluated by alpha_to_7, 105
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S007_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_016 EM_S007_016 ( // evaluated by alpha_to_7, 112
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S007_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_017 EM_S007_017 ( // evaluated by alpha_to_7, 119
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S007_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_018 EM_S007_018 ( // evaluated by alpha_to_7, 126
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S007_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_019 EM_S007_019 ( // evaluated by alpha_to_7, 133
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S007_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_020 EM_S007_020 ( // evaluated by alpha_to_7, 140
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S007_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_021 EM_S007_021 ( // evaluated by alpha_to_7, 147
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S007_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_022 EM_S007_022 ( // evaluated by alpha_to_7, 154
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S007_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_023 EM_S007_023 ( // evaluated by alpha_to_7, 161
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S007_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_024 EM_S007_024 ( // evaluated by alpha_to_7, 168
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S007_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_025 EM_S007_025 ( // evaluated by alpha_to_7, 175
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S007_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_026 EM_S007_026 ( // evaluated by alpha_to_7, 182
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S007_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_027 EM_S007_027 ( // evaluated by alpha_to_7, 189
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S007_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_028 EM_S007_028 ( // evaluated by alpha_to_7, 196
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S007_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_029 EM_S007_029 ( // evaluated by alpha_to_7, 203
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S007_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_030 EM_S007_030 ( // evaluated by alpha_to_7, 210
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S007_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_031 EM_S007_031 ( // evaluated by alpha_to_7, 217
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S007_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_007_alpha_to_032 EM_S007_032 ( // evaluated by alpha_to_7, 224
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S007_032[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_001 EM_S008_001 ( // evaluated by alpha_to_8, 8
    .in(ELP_term_001[`GF_ORDER-1:0]), .out(evaluated_term_S008_001[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_002 EM_S008_002 ( // evaluated by alpha_to_8, 16
    .in(ELP_term_002[`GF_ORDER-1:0]), .out(evaluated_term_S008_002[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_003 EM_S008_003 ( // evaluated by alpha_to_8, 24
    .in(ELP_term_003[`GF_ORDER-1:0]), .out(evaluated_term_S008_003[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_004 EM_S008_004 ( // evaluated by alpha_to_8, 32
    .in(ELP_term_004[`GF_ORDER-1:0]), .out(evaluated_term_S008_004[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_005 EM_S008_005 ( // evaluated by alpha_to_8, 40
    .in(ELP_term_005[`GF_ORDER-1:0]), .out(evaluated_term_S008_005[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_006 EM_S008_006 ( // evaluated by alpha_to_8, 48
    .in(ELP_term_006[`GF_ORDER-1:0]), .out(evaluated_term_S008_006[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_007 EM_S008_007 ( // evaluated by alpha_to_8, 56
    .in(ELP_term_007[`GF_ORDER-1:0]), .out(evaluated_term_S008_007[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_008 EM_S008_008 ( // evaluated by alpha_to_8, 64
    .in(ELP_term_008[`GF_ORDER-1:0]), .out(evaluated_term_S008_008[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_009 EM_S008_009 ( // evaluated by alpha_to_8, 72
    .in(ELP_term_009[`GF_ORDER-1:0]), .out(evaluated_term_S008_009[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_010 EM_S008_010 ( // evaluated by alpha_to_8, 80
    .in(ELP_term_010[`GF_ORDER-1:0]), .out(evaluated_term_S008_010[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_011 EM_S008_011 ( // evaluated by alpha_to_8, 88
    .in(ELP_term_011[`GF_ORDER-1:0]), .out(evaluated_term_S008_011[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_012 EM_S008_012 ( // evaluated by alpha_to_8, 96
    .in(ELP_term_012[`GF_ORDER-1:0]), .out(evaluated_term_S008_012[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_013 EM_S008_013 ( // evaluated by alpha_to_8, 104
    .in(ELP_term_013[`GF_ORDER-1:0]), .out(evaluated_term_S008_013[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_014 EM_S008_014 ( // evaluated by alpha_to_8, 112
    .in(ELP_term_014[`GF_ORDER-1:0]), .out(evaluated_term_S008_014[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_015 EM_S008_015 ( // evaluated by alpha_to_8, 120
    .in(ELP_term_015[`GF_ORDER-1:0]), .out(evaluated_term_S008_015[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_016 EM_S008_016 ( // evaluated by alpha_to_8, 128
    .in(ELP_term_016[`GF_ORDER-1:0]), .out(evaluated_term_S008_016[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_017 EM_S008_017 ( // evaluated by alpha_to_8, 136
    .in(ELP_term_017[`GF_ORDER-1:0]), .out(evaluated_term_S008_017[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_018 EM_S008_018 ( // evaluated by alpha_to_8, 144
    .in(ELP_term_018[`GF_ORDER-1:0]), .out(evaluated_term_S008_018[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_019 EM_S008_019 ( // evaluated by alpha_to_8, 152
    .in(ELP_term_019[`GF_ORDER-1:0]), .out(evaluated_term_S008_019[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_020 EM_S008_020 ( // evaluated by alpha_to_8, 160
    .in(ELP_term_020[`GF_ORDER-1:0]), .out(evaluated_term_S008_020[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_021 EM_S008_021 ( // evaluated by alpha_to_8, 168
    .in(ELP_term_021[`GF_ORDER-1:0]), .out(evaluated_term_S008_021[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_022 EM_S008_022 ( // evaluated by alpha_to_8, 176
    .in(ELP_term_022[`GF_ORDER-1:0]), .out(evaluated_term_S008_022[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_023 EM_S008_023 ( // evaluated by alpha_to_8, 184
    .in(ELP_term_023[`GF_ORDER-1:0]), .out(evaluated_term_S008_023[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_024 EM_S008_024 ( // evaluated by alpha_to_8, 192
    .in(ELP_term_024[`GF_ORDER-1:0]), .out(evaluated_term_S008_024[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_025 EM_S008_025 ( // evaluated by alpha_to_8, 200
    .in(ELP_term_025[`GF_ORDER-1:0]), .out(evaluated_term_S008_025[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_026 EM_S008_026 ( // evaluated by alpha_to_8, 208
    .in(ELP_term_026[`GF_ORDER-1:0]), .out(evaluated_term_S008_026[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_027 EM_S008_027 ( // evaluated by alpha_to_8, 216
    .in(ELP_term_027[`GF_ORDER-1:0]), .out(evaluated_term_S008_027[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_028 EM_S008_028 ( // evaluated by alpha_to_8, 224
    .in(ELP_term_028[`GF_ORDER-1:0]), .out(evaluated_term_S008_028[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_029 EM_S008_029 ( // evaluated by alpha_to_8, 232
    .in(ELP_term_029[`GF_ORDER-1:0]), .out(evaluated_term_S008_029[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_030 EM_S008_030 ( // evaluated by alpha_to_8, 240
    .in(ELP_term_030[`GF_ORDER-1:0]), .out(evaluated_term_S008_030[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_031 EM_S008_031 ( // evaluated by alpha_to_8, 248
    .in(ELP_term_031[`GF_ORDER-1:0]), .out(evaluated_term_S008_031[`GF_ORDER-1:0]) );

    cs_evaluation_matrix_slot_008_alpha_to_032 EM_S008_032 ( // evaluated by alpha_to_8, 256
    .in(ELP_term_032[`GF_ORDER-1:0]), .out(evaluated_term_S008_032[`GF_ORDER-1:0]) );
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 8, 8, 1
	
	assign slot_001_flip = |( evaluated_term_S001_000[`GF_ORDER-1:0] ^ evaluated_term_S001_001[`GF_ORDER-1:0] ^ evaluated_term_S001_002[`GF_ORDER-1:0] ^ evaluated_term_S001_003[`GF_ORDER-1:0] ^ evaluated_term_S001_004[`GF_ORDER-1:0] ^ evaluated_term_S001_005[`GF_ORDER-1:0] ^ evaluated_term_S001_006[`GF_ORDER-1:0] ^ evaluated_term_S001_007[`GF_ORDER-1:0] ^ evaluated_term_S001_008[`GF_ORDER-1:0] ^ evaluated_term_S001_009[`GF_ORDER-1:0] ^ evaluated_term_S001_010[`GF_ORDER-1:0] ^ evaluated_term_S001_011[`GF_ORDER-1:0] ^ evaluated_term_S001_012[`GF_ORDER-1:0] ^ evaluated_term_S001_013[`GF_ORDER-1:0] ^ evaluated_term_S001_014[`GF_ORDER-1:0] ^ evaluated_term_S001_015[`GF_ORDER-1:0] ^ evaluated_term_S001_016[`GF_ORDER-1:0] ^ evaluated_term_S001_017[`GF_ORDER-1:0] ^ evaluated_term_S001_018[`GF_ORDER-1:0] ^ evaluated_term_S001_019[`GF_ORDER-1:0] ^ evaluated_term_S001_020[`GF_ORDER-1:0] ^ evaluated_term_S001_021[`GF_ORDER-1:0] ^ evaluated_term_S001_022[`GF_ORDER-1:0] ^ evaluated_term_S001_023[`GF_ORDER-1:0] ^ evaluated_term_S001_024[`GF_ORDER-1:0] ^ evaluated_term_S001_025[`GF_ORDER-1:0] ^ evaluated_term_S001_026[`GF_ORDER-1:0] ^ evaluated_term_S001_027[`GF_ORDER-1:0] ^ evaluated_term_S001_028[`GF_ORDER-1:0] ^ evaluated_term_S001_029[`GF_ORDER-1:0] ^ evaluated_term_S001_030[`GF_ORDER-1:0] ^ evaluated_term_S001_031[`GF_ORDER-1:0] ^ evaluated_term_S001_032[`GF_ORDER-1:0] );

    assign slot_002_flip = |( evaluated_term_S002_000[`GF_ORDER-1:0] ^ evaluated_term_S002_001[`GF_ORDER-1:0] ^ evaluated_term_S002_002[`GF_ORDER-1:0] ^ evaluated_term_S002_003[`GF_ORDER-1:0] ^ evaluated_term_S002_004[`GF_ORDER-1:0] ^ evaluated_term_S002_005[`GF_ORDER-1:0] ^ evaluated_term_S002_006[`GF_ORDER-1:0] ^ evaluated_term_S002_007[`GF_ORDER-1:0] ^ evaluated_term_S002_008[`GF_ORDER-1:0] ^ evaluated_term_S002_009[`GF_ORDER-1:0] ^ evaluated_term_S002_010[`GF_ORDER-1:0] ^ evaluated_term_S002_011[`GF_ORDER-1:0] ^ evaluated_term_S002_012[`GF_ORDER-1:0] ^ evaluated_term_S002_013[`GF_ORDER-1:0] ^ evaluated_term_S002_014[`GF_ORDER-1:0] ^ evaluated_term_S002_015[`GF_ORDER-1:0] ^ evaluated_term_S002_016[`GF_ORDER-1:0] ^ evaluated_term_S002_017[`GF_ORDER-1:0] ^ evaluated_term_S002_018[`GF_ORDER-1:0] ^ evaluated_term_S002_019[`GF_ORDER-1:0] ^ evaluated_term_S002_020[`GF_ORDER-1:0] ^ evaluated_term_S002_021[`GF_ORDER-1:0] ^ evaluated_term_S002_022[`GF_ORDER-1:0] ^ evaluated_term_S002_023[`GF_ORDER-1:0] ^ evaluated_term_S002_024[`GF_ORDER-1:0] ^ evaluated_term_S002_025[`GF_ORDER-1:0] ^ evaluated_term_S002_026[`GF_ORDER-1:0] ^ evaluated_term_S002_027[`GF_ORDER-1:0] ^ evaluated_term_S002_028[`GF_ORDER-1:0] ^ evaluated_term_S002_029[`GF_ORDER-1:0] ^ evaluated_term_S002_030[`GF_ORDER-1:0] ^ evaluated_term_S002_031[`GF_ORDER-1:0] ^ evaluated_term_S002_032[`GF_ORDER-1:0] );

    assign slot_003_flip = |( evaluated_term_S003_000[`GF_ORDER-1:0] ^ evaluated_term_S003_001[`GF_ORDER-1:0] ^ evaluated_term_S003_002[`GF_ORDER-1:0] ^ evaluated_term_S003_003[`GF_ORDER-1:0] ^ evaluated_term_S003_004[`GF_ORDER-1:0] ^ evaluated_term_S003_005[`GF_ORDER-1:0] ^ evaluated_term_S003_006[`GF_ORDER-1:0] ^ evaluated_term_S003_007[`GF_ORDER-1:0] ^ evaluated_term_S003_008[`GF_ORDER-1:0] ^ evaluated_term_S003_009[`GF_ORDER-1:0] ^ evaluated_term_S003_010[`GF_ORDER-1:0] ^ evaluated_term_S003_011[`GF_ORDER-1:0] ^ evaluated_term_S003_012[`GF_ORDER-1:0] ^ evaluated_term_S003_013[`GF_ORDER-1:0] ^ evaluated_term_S003_014[`GF_ORDER-1:0] ^ evaluated_term_S003_015[`GF_ORDER-1:0] ^ evaluated_term_S003_016[`GF_ORDER-1:0] ^ evaluated_term_S003_017[`GF_ORDER-1:0] ^ evaluated_term_S003_018[`GF_ORDER-1:0] ^ evaluated_term_S003_019[`GF_ORDER-1:0] ^ evaluated_term_S003_020[`GF_ORDER-1:0] ^ evaluated_term_S003_021[`GF_ORDER-1:0] ^ evaluated_term_S003_022[`GF_ORDER-1:0] ^ evaluated_term_S003_023[`GF_ORDER-1:0] ^ evaluated_term_S003_024[`GF_ORDER-1:0] ^ evaluated_term_S003_025[`GF_ORDER-1:0] ^ evaluated_term_S003_026[`GF_ORDER-1:0] ^ evaluated_term_S003_027[`GF_ORDER-1:0] ^ evaluated_term_S003_028[`GF_ORDER-1:0] ^ evaluated_term_S003_029[`GF_ORDER-1:0] ^ evaluated_term_S003_030[`GF_ORDER-1:0] ^ evaluated_term_S003_031[`GF_ORDER-1:0] ^ evaluated_term_S003_032[`GF_ORDER-1:0] );

    assign slot_004_flip = |( evaluated_term_S004_000[`GF_ORDER-1:0] ^ evaluated_term_S004_001[`GF_ORDER-1:0] ^ evaluated_term_S004_002[`GF_ORDER-1:0] ^ evaluated_term_S004_003[`GF_ORDER-1:0] ^ evaluated_term_S004_004[`GF_ORDER-1:0] ^ evaluated_term_S004_005[`GF_ORDER-1:0] ^ evaluated_term_S004_006[`GF_ORDER-1:0] ^ evaluated_term_S004_007[`GF_ORDER-1:0] ^ evaluated_term_S004_008[`GF_ORDER-1:0] ^ evaluated_term_S004_009[`GF_ORDER-1:0] ^ evaluated_term_S004_010[`GF_ORDER-1:0] ^ evaluated_term_S004_011[`GF_ORDER-1:0] ^ evaluated_term_S004_012[`GF_ORDER-1:0] ^ evaluated_term_S004_013[`GF_ORDER-1:0] ^ evaluated_term_S004_014[`GF_ORDER-1:0] ^ evaluated_term_S004_015[`GF_ORDER-1:0] ^ evaluated_term_S004_016[`GF_ORDER-1:0] ^ evaluated_term_S004_017[`GF_ORDER-1:0] ^ evaluated_term_S004_018[`GF_ORDER-1:0] ^ evaluated_term_S004_019[`GF_ORDER-1:0] ^ evaluated_term_S004_020[`GF_ORDER-1:0] ^ evaluated_term_S004_021[`GF_ORDER-1:0] ^ evaluated_term_S004_022[`GF_ORDER-1:0] ^ evaluated_term_S004_023[`GF_ORDER-1:0] ^ evaluated_term_S004_024[`GF_ORDER-1:0] ^ evaluated_term_S004_025[`GF_ORDER-1:0] ^ evaluated_term_S004_026[`GF_ORDER-1:0] ^ evaluated_term_S004_027[`GF_ORDER-1:0] ^ evaluated_term_S004_028[`GF_ORDER-1:0] ^ evaluated_term_S004_029[`GF_ORDER-1:0] ^ evaluated_term_S004_030[`GF_ORDER-1:0] ^ evaluated_term_S004_031[`GF_ORDER-1:0] ^ evaluated_term_S004_032[`GF_ORDER-1:0] );

    assign slot_005_flip = |( evaluated_term_S005_000[`GF_ORDER-1:0] ^ evaluated_term_S005_001[`GF_ORDER-1:0] ^ evaluated_term_S005_002[`GF_ORDER-1:0] ^ evaluated_term_S005_003[`GF_ORDER-1:0] ^ evaluated_term_S005_004[`GF_ORDER-1:0] ^ evaluated_term_S005_005[`GF_ORDER-1:0] ^ evaluated_term_S005_006[`GF_ORDER-1:0] ^ evaluated_term_S005_007[`GF_ORDER-1:0] ^ evaluated_term_S005_008[`GF_ORDER-1:0] ^ evaluated_term_S005_009[`GF_ORDER-1:0] ^ evaluated_term_S005_010[`GF_ORDER-1:0] ^ evaluated_term_S005_011[`GF_ORDER-1:0] ^ evaluated_term_S005_012[`GF_ORDER-1:0] ^ evaluated_term_S005_013[`GF_ORDER-1:0] ^ evaluated_term_S005_014[`GF_ORDER-1:0] ^ evaluated_term_S005_015[`GF_ORDER-1:0] ^ evaluated_term_S005_016[`GF_ORDER-1:0] ^ evaluated_term_S005_017[`GF_ORDER-1:0] ^ evaluated_term_S005_018[`GF_ORDER-1:0] ^ evaluated_term_S005_019[`GF_ORDER-1:0] ^ evaluated_term_S005_020[`GF_ORDER-1:0] ^ evaluated_term_S005_021[`GF_ORDER-1:0] ^ evaluated_term_S005_022[`GF_ORDER-1:0] ^ evaluated_term_S005_023[`GF_ORDER-1:0] ^ evaluated_term_S005_024[`GF_ORDER-1:0] ^ evaluated_term_S005_025[`GF_ORDER-1:0] ^ evaluated_term_S005_026[`GF_ORDER-1:0] ^ evaluated_term_S005_027[`GF_ORDER-1:0] ^ evaluated_term_S005_028[`GF_ORDER-1:0] ^ evaluated_term_S005_029[`GF_ORDER-1:0] ^ evaluated_term_S005_030[`GF_ORDER-1:0] ^ evaluated_term_S005_031[`GF_ORDER-1:0] ^ evaluated_term_S005_032[`GF_ORDER-1:0] );

    assign slot_006_flip = |( evaluated_term_S006_000[`GF_ORDER-1:0] ^ evaluated_term_S006_001[`GF_ORDER-1:0] ^ evaluated_term_S006_002[`GF_ORDER-1:0] ^ evaluated_term_S006_003[`GF_ORDER-1:0] ^ evaluated_term_S006_004[`GF_ORDER-1:0] ^ evaluated_term_S006_005[`GF_ORDER-1:0] ^ evaluated_term_S006_006[`GF_ORDER-1:0] ^ evaluated_term_S006_007[`GF_ORDER-1:0] ^ evaluated_term_S006_008[`GF_ORDER-1:0] ^ evaluated_term_S006_009[`GF_ORDER-1:0] ^ evaluated_term_S006_010[`GF_ORDER-1:0] ^ evaluated_term_S006_011[`GF_ORDER-1:0] ^ evaluated_term_S006_012[`GF_ORDER-1:0] ^ evaluated_term_S006_013[`GF_ORDER-1:0] ^ evaluated_term_S006_014[`GF_ORDER-1:0] ^ evaluated_term_S006_015[`GF_ORDER-1:0] ^ evaluated_term_S006_016[`GF_ORDER-1:0] ^ evaluated_term_S006_017[`GF_ORDER-1:0] ^ evaluated_term_S006_018[`GF_ORDER-1:0] ^ evaluated_term_S006_019[`GF_ORDER-1:0] ^ evaluated_term_S006_020[`GF_ORDER-1:0] ^ evaluated_term_S006_021[`GF_ORDER-1:0] ^ evaluated_term_S006_022[`GF_ORDER-1:0] ^ evaluated_term_S006_023[`GF_ORDER-1:0] ^ evaluated_term_S006_024[`GF_ORDER-1:0] ^ evaluated_term_S006_025[`GF_ORDER-1:0] ^ evaluated_term_S006_026[`GF_ORDER-1:0] ^ evaluated_term_S006_027[`GF_ORDER-1:0] ^ evaluated_term_S006_028[`GF_ORDER-1:0] ^ evaluated_term_S006_029[`GF_ORDER-1:0] ^ evaluated_term_S006_030[`GF_ORDER-1:0] ^ evaluated_term_S006_031[`GF_ORDER-1:0] ^ evaluated_term_S006_032[`GF_ORDER-1:0] );

    assign slot_007_flip = |( evaluated_term_S007_000[`GF_ORDER-1:0] ^ evaluated_term_S007_001[`GF_ORDER-1:0] ^ evaluated_term_S007_002[`GF_ORDER-1:0] ^ evaluated_term_S007_003[`GF_ORDER-1:0] ^ evaluated_term_S007_004[`GF_ORDER-1:0] ^ evaluated_term_S007_005[`GF_ORDER-1:0] ^ evaluated_term_S007_006[`GF_ORDER-1:0] ^ evaluated_term_S007_007[`GF_ORDER-1:0] ^ evaluated_term_S007_008[`GF_ORDER-1:0] ^ evaluated_term_S007_009[`GF_ORDER-1:0] ^ evaluated_term_S007_010[`GF_ORDER-1:0] ^ evaluated_term_S007_011[`GF_ORDER-1:0] ^ evaluated_term_S007_012[`GF_ORDER-1:0] ^ evaluated_term_S007_013[`GF_ORDER-1:0] ^ evaluated_term_S007_014[`GF_ORDER-1:0] ^ evaluated_term_S007_015[`GF_ORDER-1:0] ^ evaluated_term_S007_016[`GF_ORDER-1:0] ^ evaluated_term_S007_017[`GF_ORDER-1:0] ^ evaluated_term_S007_018[`GF_ORDER-1:0] ^ evaluated_term_S007_019[`GF_ORDER-1:0] ^ evaluated_term_S007_020[`GF_ORDER-1:0] ^ evaluated_term_S007_021[`GF_ORDER-1:0] ^ evaluated_term_S007_022[`GF_ORDER-1:0] ^ evaluated_term_S007_023[`GF_ORDER-1:0] ^ evaluated_term_S007_024[`GF_ORDER-1:0] ^ evaluated_term_S007_025[`GF_ORDER-1:0] ^ evaluated_term_S007_026[`GF_ORDER-1:0] ^ evaluated_term_S007_027[`GF_ORDER-1:0] ^ evaluated_term_S007_028[`GF_ORDER-1:0] ^ evaluated_term_S007_029[`GF_ORDER-1:0] ^ evaluated_term_S007_030[`GF_ORDER-1:0] ^ evaluated_term_S007_031[`GF_ORDER-1:0] ^ evaluated_term_S007_032[`GF_ORDER-1:0] );

    assign slot_008_flip = |( evaluated_term_S008_000[`GF_ORDER-1:0] ^ evaluated_term_S008_001[`GF_ORDER-1:0] ^ evaluated_term_S008_002[`GF_ORDER-1:0] ^ evaluated_term_S008_003[`GF_ORDER-1:0] ^ evaluated_term_S008_004[`GF_ORDER-1:0] ^ evaluated_term_S008_005[`GF_ORDER-1:0] ^ evaluated_term_S008_006[`GF_ORDER-1:0] ^ evaluated_term_S008_007[`GF_ORDER-1:0] ^ evaluated_term_S008_008[`GF_ORDER-1:0] ^ evaluated_term_S008_009[`GF_ORDER-1:0] ^ evaluated_term_S008_010[`GF_ORDER-1:0] ^ evaluated_term_S008_011[`GF_ORDER-1:0] ^ evaluated_term_S008_012[`GF_ORDER-1:0] ^ evaluated_term_S008_013[`GF_ORDER-1:0] ^ evaluated_term_S008_014[`GF_ORDER-1:0] ^ evaluated_term_S008_015[`GF_ORDER-1:0] ^ evaluated_term_S008_016[`GF_ORDER-1:0] ^ evaluated_term_S008_017[`GF_ORDER-1:0] ^ evaluated_term_S008_018[`GF_ORDER-1:0] ^ evaluated_term_S008_019[`GF_ORDER-1:0] ^ evaluated_term_S008_020[`GF_ORDER-1:0] ^ evaluated_term_S008_021[`GF_ORDER-1:0] ^ evaluated_term_S008_022[`GF_ORDER-1:0] ^ evaluated_term_S008_023[`GF_ORDER-1:0] ^ evaluated_term_S008_024[`GF_ORDER-1:0] ^ evaluated_term_S008_025[`GF_ORDER-1:0] ^ evaluated_term_S008_026[`GF_ORDER-1:0] ^ evaluated_term_S008_027[`GF_ORDER-1:0] ^ evaluated_term_S008_028[`GF_ORDER-1:0] ^ evaluated_term_S008_029[`GF_ORDER-1:0] ^ evaluated_term_S008_030[`GF_ORDER-1:0] ^ evaluated_term_S008_031[`GF_ORDER-1:0] ^ evaluated_term_S008_032[`GF_ORDER-1:0] );

    assign slot_001_flipped_message = ~( slot_001_flip ^ received_code_buffer[7] );
    assign slot_002_flipped_message = ~( slot_002_flip ^ received_code_buffer[6] );
    assign slot_003_flipped_message = ~( slot_003_flip ^ received_code_buffer[5] );
    assign slot_004_flipped_message = ~( slot_004_flip ^ received_code_buffer[4] );
    assign slot_005_flipped_message = ~( slot_005_flip ^ received_code_buffer[3] );
    assign slot_006_flipped_message = ~( slot_006_flip ^ received_code_buffer[2] );
    assign slot_007_flipped_message = ~( slot_007_flip ^ received_code_buffer[1] );
    assign slot_008_flipped_message = ~( slot_008_flip ^ received_code_buffer[0] );

    assign flipped_message[`CS_PARALLEL-1:0] = { slot_001_flipped_message, slot_002_flipped_message, slot_003_flipped_message, slot_004_flipped_message, slot_005_flipped_message, slot_006_flipped_message, slot_007_flipped_message, slot_008_flipped_message };
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
	
endmodule
