//////////////////////////////////////////////////////////////////////////////////
// cs_evaluation_matrices.v for Cosmos OpenSSD
// Copyright (c) 2015 Hanyang University ENC Lab.
// Contributed by Ilyong Jung <iyjung@enc.hanyang.ac.kr>
//                Yong Ho Song <yhsong@enc.hanyang.ac.kr>
//
// This file is part of Cosmos OpenSSD.
//
// Cosmos OpenSSD is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// Cosmos OpenSSD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Cosmos OpenSSD; see the file COPYING.
// If not, see <http://www.gnu.org/licenses/>. 
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: ENC Lab. <http://enc.hanyang.ac.kr>
// Engineer: Ilyong Jung <iyjung@enc.hanyang.ac.kr>
// 
// Project Name: Cosmos OpenSSD
// Design Name: BCH Decoder
// Module Name: cs_shortening_matrix_alpha_to***, cs_evaluation_matrix_slot_***_alpha_to_***
// File Name: cs_evaluation_matrices.v
//
// Version: v1.0.2-2KB_T32
//
// Description: 
//   - shortening matrix for BCH decoder: Chien search (CS)
//   - evaluation matrix for BCH decoder: Chien search (CS)
//   - for data area
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Revision History:
//
// * v1.0.2
//   - temporary roll-back for releasing
//   - coding style of this version is not unified
//
// * v1.0.1
//   - minor modification for releasing
//
// * v1.0.0
//   - first draft
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// This file was generated by C program.
	
	// total: 32
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////

module cs_shortening_matrix_alpha_to_001(in, out); // shortened by alpha_to_15903, 15903
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[3] ^ in[5] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[12] ^ in[13];
    assign out[14] = in[2] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_002(in, out); // shortened by alpha_to_15903, 31806
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[13];
    assign out[1] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[12] ^ in[13];
    assign out[4] = in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[14];
    assign out[6] = in[1] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[7] = in[2] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[8] = in[0] ^ in[3] ^ in[6] ^ in[8] ^ in[10] ^ in[11] ^ in[12];
    assign out[9] = in[0] ^ in[1] ^ in[4] ^ in[7] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[8] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[10] ^ in[12] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[11] ^ in[13];
    assign out[14] = in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[12] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_003(in, out); // shortened by alpha_to_15903, 14942
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[12];
    assign out[1] = in[1] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[2] = in[2] ^ in[6] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[7] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[4] ^ in[8] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[5] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[3] ^ in[6] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[4] ^ in[7] ^ in[11] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[8] ^ in[12] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[13];
    assign out[10] = in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_004(in, out); // shortened by alpha_to_15903, 30845
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[6] ^ in[9] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[12];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[10] = in[1] ^ in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[11] = in[2] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[12] = in[3] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[5] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_005(in, out); // shortened by alpha_to_15903, 13981
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[2] = in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[5] ^ in[7] ^ in[9] ^ in[10];
    assign out[6] = in[2] ^ in[3] ^ in[6] ^ in[8] ^ in[10] ^ in[11];
    assign out[7] = in[3] ^ in[4] ^ in[7] ^ in[9] ^ in[11] ^ in[12];
    assign out[8] = in[4] ^ in[5] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[9] = in[5] ^ in[6] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[6] ^ in[7] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[7] ^ in[8] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[8] ^ in[9] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[9] ^ in[10] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[10] ^ in[11] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_006(in, out); // shortened by alpha_to_15903, 29884
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[10] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[11] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[12];
    assign out[4] = in[2] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[13];
    assign out[5] = in[3] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[14];
    assign out[6] = in[0] ^ in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[11];
    assign out[7] = in[0] ^ in[1] ^ in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[12];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[6] ^ in[7] ^ in[9] ^ in[12] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[7] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[8] ^ in[9] ^ in[11] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[9] ^ in[10] ^ in[12];
    assign out[12] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[10] ^ in[11] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[11] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[12] ^ in[13];
endmodule

module cs_shortening_matrix_alpha_to_007(in, out); // shortened by alpha_to_15903, 13020
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[8] = in[2] ^ in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[9] = in[3] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[2] ^ in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[1] ^ in[3] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_008(in, out); // shortened by alpha_to_15903, 28923
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[3] ^ in[5] ^ in[9] ^ in[12] ^ in[13];
    assign out[1] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[5] = in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[8] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[6] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[7] ^ in[10] ^ in[11] ^ in[13];
    assign out[14] = in[2] ^ in[4] ^ in[8] ^ in[11] ^ in[12] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_009(in, out); // shortened by alpha_to_15903, 12059
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[9] ^ in[12];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[13];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[4] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[3] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[4] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[3] ^ in[5] ^ in[8] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[1] ^ in[3] ^ in[4] ^ in[6] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[13] ^ in[14];
    assign out[14] = in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_010(in, out); // shortened by alpha_to_15903, 27962
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[10];
    assign out[1] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[10] ^ in[11];
    assign out[2] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[11] ^ in[12];
    assign out[3] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[12] ^ in[13];
    assign out[4] = in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[5] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[6] = in[1] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[7] = in[2] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[3] ^ in[8] ^ in[12] ^ in[14];
    assign out[9] = in[1] ^ in[4] ^ in[9] ^ in[13];
    assign out[10] = in[2] ^ in[5] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[3] ^ in[6] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[4] ^ in[7] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[8] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[9] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_011(in, out); // shortened by alpha_to_15903, 11098
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[5] ^ in[7] ^ in[12];
    assign out[1] = in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[12] ^ in[13];
    assign out[2] = in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[14];
    assign out[4] = in[1] ^ in[7] ^ in[9] ^ in[10] ^ in[11];
    assign out[5] = in[2] ^ in[8] ^ in[10] ^ in[11] ^ in[12];
    assign out[6] = in[3] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[4] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[5] ^ in[11] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[6] ^ in[12] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[7] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[3] ^ in[8] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[4] ^ in[9];
    assign out[13] = in[2] ^ in[3] ^ in[5] ^ in[10];
    assign out[14] = in[3] ^ in[4] ^ in[6] ^ in[11];
endmodule

module cs_shortening_matrix_alpha_to_012(in, out); // shortened by alpha_to_15903, 27001
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[10] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[11] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[12];
    assign out[5] = in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[13];
    assign out[6] = in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[14];
    assign out[7] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[10];
    assign out[8] = in[0] ^ in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[11];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_013(in, out); // shortened by alpha_to_15903, 10137
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[6] ^ in[13];
    assign out[1] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[14];
    assign out[3] = in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[4] = in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[5] = in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[6] = in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[7] = in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[8] = in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[10] = in[1] ^ in[8] ^ in[11] ^ in[12];
    assign out[11] = in[2] ^ in[9] ^ in[12] ^ in[13];
    assign out[12] = in[3] ^ in[10] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[4] ^ in[11] ^ in[14];
    assign out[14] = in[1] ^ in[5] ^ in[12];
endmodule

module cs_shortening_matrix_alpha_to_014(in, out); // shortened by alpha_to_15903, 26040
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[13];
    assign out[1] = in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[6] ^ in[8] ^ in[11] ^ in[12];
    assign out[9] = in[2] ^ in[4] ^ in[7] ^ in[9] ^ in[12] ^ in[13];
    assign out[10] = in[3] ^ in[5] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[4] ^ in[6] ^ in[9] ^ in[11] ^ in[14];
    assign out[12] = in[1] ^ in[5] ^ in[7] ^ in[10] ^ in[12];
    assign out[13] = in[2] ^ in[6] ^ in[8] ^ in[11] ^ in[13];
    assign out[14] = in[3] ^ in[7] ^ in[9] ^ in[12] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_015(in, out); // shortened by alpha_to_15903, 9176
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[10] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[14];
    assign out[6] = in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[10];
    assign out[7] = in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[8] = in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[9] = in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[10] = in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[11] = in[0] ^ in[6] ^ in[8] ^ in[10] ^ in[11] ^ in[12];
    assign out[12] = in[0] ^ in[1] ^ in[7] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[8] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[3] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_016(in, out); // shortened by alpha_to_15903, 25079
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[3] ^ in[5] ^ in[6] ^ in[10] ^ in[11];
    assign out[1] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[12];
    assign out[2] = in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[13];
    assign out[3] = in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[12] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[7] = in[2] ^ in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[8] = in[3] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[4] ^ in[5] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[5] ^ in[6] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[6] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[3] ^ in[7] ^ in[8] ^ in[12] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[4] ^ in[8] ^ in[9] ^ in[13];
    assign out[14] = in[2] ^ in[4] ^ in[5] ^ in[9] ^ in[10] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_017(in, out); // shortened by alpha_to_15903, 8215
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[8] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[9] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[10];
    assign out[5] = in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[11];
    assign out[6] = in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[12];
    assign out[7] = in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[11] ^ in[13];
    assign out[8] = in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[7] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[3] ^ in[9] ^ in[11] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[10] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[11] ^ in[13];
endmodule

module cs_shortening_matrix_alpha_to_018(in, out); // shortened by alpha_to_15903, 24118
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[11];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[12];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[9] ^ in[12] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[11] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[12];
    assign out[7] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[10] = in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[12] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_019(in, out); // shortened by alpha_to_15903, 7254
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[2] ^ in[3] ^ in[7] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[13];
    assign out[2] = in[2] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[11] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[12];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[12] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[9] ^ in[12] ^ in[13];
    assign out[7] = in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[11] ^ in[14];
    assign out[9] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[12];
    assign out[10] = in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[13];
    assign out[11] = in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[14];
    assign out[12] = in[0] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_020(in, out); // shortened by alpha_to_15903, 23157
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[7] ^ in[8] ^ in[11];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[8] ^ in[9] ^ in[12];
    assign out[5] = in[3] ^ in[4] ^ in[5] ^ in[9] ^ in[10] ^ in[13];
    assign out[6] = in[4] ^ in[5] ^ in[6] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[11] ^ in[12];
    assign out[8] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[12] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_021(in, out); // shortened by alpha_to_15903, 6293
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[8] ^ in[12] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[9] ^ in[13];
    assign out[3] = in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[10] ^ in[14];
    assign out[4] = in[0] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[11];
    assign out[5] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[12];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[11] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[12] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[9] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_022(in, out); // shortened by alpha_to_15903, 22196
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[2] ^ in[3] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[4] ^ in[11] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[4] ^ in[5] ^ in[12] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[4] ^ in[7] ^ in[8];
    assign out[10] = in[2] ^ in[3] ^ in[5] ^ in[8] ^ in[9];
    assign out[11] = in[3] ^ in[4] ^ in[6] ^ in[9] ^ in[10];
    assign out[12] = in[4] ^ in[5] ^ in[7] ^ in[10] ^ in[11];
    assign out[13] = in[5] ^ in[6] ^ in[8] ^ in[11] ^ in[12];
    assign out[14] = in[6] ^ in[7] ^ in[9] ^ in[12] ^ in[13];
endmodule

module cs_shortening_matrix_alpha_to_023(in, out); // shortened by alpha_to_15903, 5332
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[5] ^ in[9] ^ in[10] ^ in[11];
    assign out[1] = in[1] ^ in[5] ^ in[6] ^ in[9] ^ in[12];
    assign out[2] = in[2] ^ in[6] ^ in[7] ^ in[10] ^ in[13];
    assign out[3] = in[3] ^ in[7] ^ in[8] ^ in[11] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[8] ^ in[9] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[5] ^ in[9] ^ in[10] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[6] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[7] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[8] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[9] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[10] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[11];
    assign out[12] = in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[12];
    assign out[13] = in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[13];
    assign out[14] = in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_024(in, out); // shortened by alpha_to_15903, 21235
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[3] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[4] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[4] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[12] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[11];
    assign out[10] = in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[12];
    assign out[11] = in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[12] = in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
endmodule

module cs_shortening_matrix_alpha_to_025(in, out); // shortened by alpha_to_15903, 4371
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[11] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[8] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[11] ^ in[13] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_026(in, out); // shortened by alpha_to_15903, 20274
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[12];
    assign out[1] = in[3] ^ in[5] ^ in[12] ^ in[13];
    assign out[2] = in[4] ^ in[6] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[5] ^ in[7] ^ in[14];
    assign out[4] = in[1] ^ in[6] ^ in[8];
    assign out[5] = in[2] ^ in[7] ^ in[9];
    assign out[6] = in[3] ^ in[8] ^ in[10];
    assign out[7] = in[4] ^ in[9] ^ in[11];
    assign out[8] = in[5] ^ in[10] ^ in[12];
    assign out[9] = in[6] ^ in[11] ^ in[13];
    assign out[10] = in[7] ^ in[12] ^ in[14];
    assign out[11] = in[0] ^ in[8] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[9] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[10];
    assign out[14] = in[2] ^ in[3] ^ in[11];
endmodule

module cs_shortening_matrix_alpha_to_027(in, out); // shortened by alpha_to_15903, 3410
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[12];
    assign out[1] = in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[2] = in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[4] = in[1] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[12];
    assign out[5] = in[2] ^ in[6] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[6] = in[3] ^ in[7] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[8] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[14];
    assign out[9] = in[0] ^ in[2] ^ in[6] ^ in[10] ^ in[12];
    assign out[10] = in[0] ^ in[1] ^ in[3] ^ in[7] ^ in[11] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[8] ^ in[12] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[9] ^ in[13];
    assign out[13] = in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[10] ^ in[14];
    assign out[14] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[11];
endmodule

module cs_shortening_matrix_alpha_to_028(in, out); // shortened by alpha_to_15903, 19313
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11];
    assign out[1] = in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[12];
    assign out[2] = in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[3] = in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[1] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[6] = in[2] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[7] = in[0] ^ in[3] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[4] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[5] ^ in[10] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[11] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[12];
    assign out[12] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[13];
    assign out[13] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[14];
    assign out[14] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[10];
endmodule

module cs_shortening_matrix_alpha_to_029(in, out); // shortened by alpha_to_15903, 2449
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[8] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[3] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[6] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[2] ^ in[4] ^ in[7] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_shortening_matrix_alpha_to_030(in, out); // shortened by alpha_to_15903, 18352
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[13];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[6] ^ in[10] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[7] ^ in[11] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[8] ^ in[12];
    assign out[4] = in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[9] ^ in[13];
    assign out[5] = in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[10] ^ in[14];
    assign out[6] = in[0] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[11];
    assign out[7] = in[0] ^ in[1] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[12];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[7] ^ in[9] ^ in[11] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[9] ^ in[11] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[10] ^ in[12] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[11] ^ in[13];
    assign out[14] = in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[12] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_031(in, out); // shortened by alpha_to_15903, 1488
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[12] ^ in[13];
    assign out[1] = in[1] ^ in[9] ^ in[12] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[10] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[3] ^ in[11] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[4] ^ in[12];
    assign out[5] = in[2] ^ in[3] ^ in[5] ^ in[13];
    assign out[6] = in[3] ^ in[4] ^ in[6] ^ in[14];
    assign out[7] = in[0] ^ in[4] ^ in[5] ^ in[7];
    assign out[8] = in[0] ^ in[1] ^ in[5] ^ in[6] ^ in[8];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[6] ^ in[7] ^ in[9];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[7] ^ in[8] ^ in[10];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[8] ^ in[9] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[9] ^ in[10] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[10] ^ in[11] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[11] ^ in[12] ^ in[14];
endmodule

module cs_shortening_matrix_alpha_to_032(in, out); // shortened by alpha_to_15903, 17391
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[6] ^ in[7] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[6] ^ in[8] ^ in[9] ^ in[13];
    assign out[2] = in[2] ^ in[7] ^ in[9] ^ in[10] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[8] ^ in[10] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[9] ^ in[11] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[10] ^ in[12] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[11] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[12] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10];
    assign out[11] = in[2] ^ in[3] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[12] = in[3] ^ in[4] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[13] = in[4] ^ in[5] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[14] = in[5] ^ in[6] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
endmodule

	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// This file was generated by C program.
	
	// total: 256
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////

module cs_evaluation_matrix_slot_001_alpha_to_001(in, out); // evaluated by alpha_to_1, 1
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[14];
    assign out[1] = in[0] ^ in[14];
    assign out[2] = in[1];
    assign out[3] = in[2];
    assign out[4] = in[3];
    assign out[5] = in[4];
    assign out[6] = in[5];
    assign out[7] = in[6];
    assign out[8] = in[7];
    assign out[9] = in[8];
    assign out[10] = in[9];
    assign out[11] = in[10];
    assign out[12] = in[11];
    assign out[13] = in[12];
    assign out[14] = in[13];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_002(in, out); // evaluated by alpha_to_1, 2
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[13];
    assign out[1] = in[13] ^ in[14];
    assign out[2] = in[0] ^ in[14];
    assign out[3] = in[1];
    assign out[4] = in[2];
    assign out[5] = in[3];
    assign out[6] = in[4];
    assign out[7] = in[5];
    assign out[8] = in[6];
    assign out[9] = in[7];
    assign out[10] = in[8];
    assign out[11] = in[9];
    assign out[12] = in[10];
    assign out[13] = in[11];
    assign out[14] = in[12];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_003(in, out); // evaluated by alpha_to_1, 3
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[12];
    assign out[1] = in[12] ^ in[13];
    assign out[2] = in[13] ^ in[14];
    assign out[3] = in[0] ^ in[14];
    assign out[4] = in[1];
    assign out[5] = in[2];
    assign out[6] = in[3];
    assign out[7] = in[4];
    assign out[8] = in[5];
    assign out[9] = in[6];
    assign out[10] = in[7];
    assign out[11] = in[8];
    assign out[12] = in[9];
    assign out[13] = in[10];
    assign out[14] = in[11];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_004(in, out); // evaluated by alpha_to_1, 4
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11];
    assign out[1] = in[11] ^ in[12];
    assign out[2] = in[12] ^ in[13];
    assign out[3] = in[13] ^ in[14];
    assign out[4] = in[0] ^ in[14];
    assign out[5] = in[1];
    assign out[6] = in[2];
    assign out[7] = in[3];
    assign out[8] = in[4];
    assign out[9] = in[5];
    assign out[10] = in[6];
    assign out[11] = in[7];
    assign out[12] = in[8];
    assign out[13] = in[9];
    assign out[14] = in[10];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_005(in, out); // evaluated by alpha_to_1, 5
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[10];
    assign out[1] = in[10] ^ in[11];
    assign out[2] = in[11] ^ in[12];
    assign out[3] = in[12] ^ in[13];
    assign out[4] = in[13] ^ in[14];
    assign out[5] = in[0] ^ in[14];
    assign out[6] = in[1];
    assign out[7] = in[2];
    assign out[8] = in[3];
    assign out[9] = in[4];
    assign out[10] = in[5];
    assign out[11] = in[6];
    assign out[12] = in[7];
    assign out[13] = in[8];
    assign out[14] = in[9];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_006(in, out); // evaluated by alpha_to_1, 6
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9];
    assign out[1] = in[9] ^ in[10];
    assign out[2] = in[10] ^ in[11];
    assign out[3] = in[11] ^ in[12];
    assign out[4] = in[12] ^ in[13];
    assign out[5] = in[13] ^ in[14];
    assign out[6] = in[0] ^ in[14];
    assign out[7] = in[1];
    assign out[8] = in[2];
    assign out[9] = in[3];
    assign out[10] = in[4];
    assign out[11] = in[5];
    assign out[12] = in[6];
    assign out[13] = in[7];
    assign out[14] = in[8];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_007(in, out); // evaluated by alpha_to_1, 7
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8];
    assign out[1] = in[8] ^ in[9];
    assign out[2] = in[9] ^ in[10];
    assign out[3] = in[10] ^ in[11];
    assign out[4] = in[11] ^ in[12];
    assign out[5] = in[12] ^ in[13];
    assign out[6] = in[13] ^ in[14];
    assign out[7] = in[0] ^ in[14];
    assign out[8] = in[1];
    assign out[9] = in[2];
    assign out[10] = in[3];
    assign out[11] = in[4];
    assign out[12] = in[5];
    assign out[13] = in[6];
    assign out[14] = in[7];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_008(in, out); // evaluated by alpha_to_1, 8
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7];
    assign out[1] = in[7] ^ in[8];
    assign out[2] = in[8] ^ in[9];
    assign out[3] = in[9] ^ in[10];
    assign out[4] = in[10] ^ in[11];
    assign out[5] = in[11] ^ in[12];
    assign out[6] = in[12] ^ in[13];
    assign out[7] = in[13] ^ in[14];
    assign out[8] = in[0] ^ in[14];
    assign out[9] = in[1];
    assign out[10] = in[2];
    assign out[11] = in[3];
    assign out[12] = in[4];
    assign out[13] = in[5];
    assign out[14] = in[6];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_009(in, out); // evaluated by alpha_to_1, 9
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[6];
    assign out[1] = in[6] ^ in[7];
    assign out[2] = in[7] ^ in[8];
    assign out[3] = in[8] ^ in[9];
    assign out[4] = in[9] ^ in[10];
    assign out[5] = in[10] ^ in[11];
    assign out[6] = in[11] ^ in[12];
    assign out[7] = in[12] ^ in[13];
    assign out[8] = in[13] ^ in[14];
    assign out[9] = in[0] ^ in[14];
    assign out[10] = in[1];
    assign out[11] = in[2];
    assign out[12] = in[3];
    assign out[13] = in[4];
    assign out[14] = in[5];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_010(in, out); // evaluated by alpha_to_1, 10
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5];
    assign out[1] = in[5] ^ in[6];
    assign out[2] = in[6] ^ in[7];
    assign out[3] = in[7] ^ in[8];
    assign out[4] = in[8] ^ in[9];
    assign out[5] = in[9] ^ in[10];
    assign out[6] = in[10] ^ in[11];
    assign out[7] = in[11] ^ in[12];
    assign out[8] = in[12] ^ in[13];
    assign out[9] = in[13] ^ in[14];
    assign out[10] = in[0] ^ in[14];
    assign out[11] = in[1];
    assign out[12] = in[2];
    assign out[13] = in[3];
    assign out[14] = in[4];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_011(in, out); // evaluated by alpha_to_1, 11
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4];
    assign out[1] = in[4] ^ in[5];
    assign out[2] = in[5] ^ in[6];
    assign out[3] = in[6] ^ in[7];
    assign out[4] = in[7] ^ in[8];
    assign out[5] = in[8] ^ in[9];
    assign out[6] = in[9] ^ in[10];
    assign out[7] = in[10] ^ in[11];
    assign out[8] = in[11] ^ in[12];
    assign out[9] = in[12] ^ in[13];
    assign out[10] = in[13] ^ in[14];
    assign out[11] = in[0] ^ in[14];
    assign out[12] = in[1];
    assign out[13] = in[2];
    assign out[14] = in[3];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_012(in, out); // evaluated by alpha_to_1, 12
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3];
    assign out[1] = in[3] ^ in[4];
    assign out[2] = in[4] ^ in[5];
    assign out[3] = in[5] ^ in[6];
    assign out[4] = in[6] ^ in[7];
    assign out[5] = in[7] ^ in[8];
    assign out[6] = in[8] ^ in[9];
    assign out[7] = in[9] ^ in[10];
    assign out[8] = in[10] ^ in[11];
    assign out[9] = in[11] ^ in[12];
    assign out[10] = in[12] ^ in[13];
    assign out[11] = in[13] ^ in[14];
    assign out[12] = in[0] ^ in[14];
    assign out[13] = in[1];
    assign out[14] = in[2];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_013(in, out); // evaluated by alpha_to_1, 13
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2];
    assign out[1] = in[2] ^ in[3];
    assign out[2] = in[3] ^ in[4];
    assign out[3] = in[4] ^ in[5];
    assign out[4] = in[5] ^ in[6];
    assign out[5] = in[6] ^ in[7];
    assign out[6] = in[7] ^ in[8];
    assign out[7] = in[8] ^ in[9];
    assign out[8] = in[9] ^ in[10];
    assign out[9] = in[10] ^ in[11];
    assign out[10] = in[11] ^ in[12];
    assign out[11] = in[12] ^ in[13];
    assign out[12] = in[13] ^ in[14];
    assign out[13] = in[0] ^ in[14];
    assign out[14] = in[1];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_014(in, out); // evaluated by alpha_to_1, 14
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1];
    assign out[1] = in[1] ^ in[2];
    assign out[2] = in[2] ^ in[3];
    assign out[3] = in[3] ^ in[4];
    assign out[4] = in[4] ^ in[5];
    assign out[5] = in[5] ^ in[6];
    assign out[6] = in[6] ^ in[7];
    assign out[7] = in[7] ^ in[8];
    assign out[8] = in[8] ^ in[9];
    assign out[9] = in[9] ^ in[10];
    assign out[10] = in[10] ^ in[11];
    assign out[11] = in[11] ^ in[12];
    assign out[12] = in[12] ^ in[13];
    assign out[13] = in[13] ^ in[14];
    assign out[14] = in[0] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_015(in, out); // evaluated by alpha_to_1, 15
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[14];
    assign out[2] = in[1] ^ in[2];
    assign out[3] = in[2] ^ in[3];
    assign out[4] = in[3] ^ in[4];
    assign out[5] = in[4] ^ in[5];
    assign out[6] = in[5] ^ in[6];
    assign out[7] = in[6] ^ in[7];
    assign out[8] = in[7] ^ in[8];
    assign out[9] = in[8] ^ in[9];
    assign out[10] = in[9] ^ in[10];
    assign out[11] = in[10] ^ in[11];
    assign out[12] = in[11] ^ in[12];
    assign out[13] = in[12] ^ in[13];
    assign out[14] = in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_016(in, out); // evaluated by alpha_to_1, 16
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[13] ^ in[14];
    assign out[1] = in[0] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[14];
    assign out[3] = in[1] ^ in[2];
    assign out[4] = in[2] ^ in[3];
    assign out[5] = in[3] ^ in[4];
    assign out[6] = in[4] ^ in[5];
    assign out[7] = in[5] ^ in[6];
    assign out[8] = in[6] ^ in[7];
    assign out[9] = in[7] ^ in[8];
    assign out[10] = in[8] ^ in[9];
    assign out[11] = in[9] ^ in[10];
    assign out[12] = in[10] ^ in[11];
    assign out[13] = in[11] ^ in[12];
    assign out[14] = in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_017(in, out); // evaluated by alpha_to_1, 17
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[12] ^ in[13];
    assign out[1] = in[12] ^ in[14];
    assign out[2] = in[0] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[14];
    assign out[4] = in[1] ^ in[2];
    assign out[5] = in[2] ^ in[3];
    assign out[6] = in[3] ^ in[4];
    assign out[7] = in[4] ^ in[5];
    assign out[8] = in[5] ^ in[6];
    assign out[9] = in[6] ^ in[7];
    assign out[10] = in[7] ^ in[8];
    assign out[11] = in[8] ^ in[9];
    assign out[12] = in[9] ^ in[10];
    assign out[13] = in[10] ^ in[11];
    assign out[14] = in[11] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_018(in, out); // evaluated by alpha_to_1, 18
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[12];
    assign out[1] = in[11] ^ in[13];
    assign out[2] = in[12] ^ in[14];
    assign out[3] = in[0] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[14];
    assign out[5] = in[1] ^ in[2];
    assign out[6] = in[2] ^ in[3];
    assign out[7] = in[3] ^ in[4];
    assign out[8] = in[4] ^ in[5];
    assign out[9] = in[5] ^ in[6];
    assign out[10] = in[6] ^ in[7];
    assign out[11] = in[7] ^ in[8];
    assign out[12] = in[8] ^ in[9];
    assign out[13] = in[9] ^ in[10];
    assign out[14] = in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_019(in, out); // evaluated by alpha_to_1, 19
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[10] ^ in[11];
    assign out[1] = in[10] ^ in[12];
    assign out[2] = in[11] ^ in[13];
    assign out[3] = in[12] ^ in[14];
    assign out[4] = in[0] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[14];
    assign out[6] = in[1] ^ in[2];
    assign out[7] = in[2] ^ in[3];
    assign out[8] = in[3] ^ in[4];
    assign out[9] = in[4] ^ in[5];
    assign out[10] = in[5] ^ in[6];
    assign out[11] = in[6] ^ in[7];
    assign out[12] = in[7] ^ in[8];
    assign out[13] = in[8] ^ in[9];
    assign out[14] = in[9] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_020(in, out); // evaluated by alpha_to_1, 20
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10];
    assign out[1] = in[9] ^ in[11];
    assign out[2] = in[10] ^ in[12];
    assign out[3] = in[11] ^ in[13];
    assign out[4] = in[12] ^ in[14];
    assign out[5] = in[0] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[14];
    assign out[7] = in[1] ^ in[2];
    assign out[8] = in[2] ^ in[3];
    assign out[9] = in[3] ^ in[4];
    assign out[10] = in[4] ^ in[5];
    assign out[11] = in[5] ^ in[6];
    assign out[12] = in[6] ^ in[7];
    assign out[13] = in[7] ^ in[8];
    assign out[14] = in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_021(in, out); // evaluated by alpha_to_1, 21
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[9];
    assign out[1] = in[8] ^ in[10];
    assign out[2] = in[9] ^ in[11];
    assign out[3] = in[10] ^ in[12];
    assign out[4] = in[11] ^ in[13];
    assign out[5] = in[12] ^ in[14];
    assign out[6] = in[0] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[14];
    assign out[8] = in[1] ^ in[2];
    assign out[9] = in[2] ^ in[3];
    assign out[10] = in[3] ^ in[4];
    assign out[11] = in[4] ^ in[5];
    assign out[12] = in[5] ^ in[6];
    assign out[13] = in[6] ^ in[7];
    assign out[14] = in[7] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_022(in, out); // evaluated by alpha_to_1, 22
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8];
    assign out[1] = in[7] ^ in[9];
    assign out[2] = in[8] ^ in[10];
    assign out[3] = in[9] ^ in[11];
    assign out[4] = in[10] ^ in[12];
    assign out[5] = in[11] ^ in[13];
    assign out[6] = in[12] ^ in[14];
    assign out[7] = in[0] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[14];
    assign out[9] = in[1] ^ in[2];
    assign out[10] = in[2] ^ in[3];
    assign out[11] = in[3] ^ in[4];
    assign out[12] = in[4] ^ in[5];
    assign out[13] = in[5] ^ in[6];
    assign out[14] = in[6] ^ in[7];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_023(in, out); // evaluated by alpha_to_1, 23
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[6] ^ in[7];
    assign out[1] = in[6] ^ in[8];
    assign out[2] = in[7] ^ in[9];
    assign out[3] = in[8] ^ in[10];
    assign out[4] = in[9] ^ in[11];
    assign out[5] = in[10] ^ in[12];
    assign out[6] = in[11] ^ in[13];
    assign out[7] = in[12] ^ in[14];
    assign out[8] = in[0] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[14];
    assign out[10] = in[1] ^ in[2];
    assign out[11] = in[2] ^ in[3];
    assign out[12] = in[3] ^ in[4];
    assign out[13] = in[4] ^ in[5];
    assign out[14] = in[5] ^ in[6];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_024(in, out); // evaluated by alpha_to_1, 24
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6];
    assign out[1] = in[5] ^ in[7];
    assign out[2] = in[6] ^ in[8];
    assign out[3] = in[7] ^ in[9];
    assign out[4] = in[8] ^ in[10];
    assign out[5] = in[9] ^ in[11];
    assign out[6] = in[10] ^ in[12];
    assign out[7] = in[11] ^ in[13];
    assign out[8] = in[12] ^ in[14];
    assign out[9] = in[0] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[14];
    assign out[11] = in[1] ^ in[2];
    assign out[12] = in[2] ^ in[3];
    assign out[13] = in[3] ^ in[4];
    assign out[14] = in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_025(in, out); // evaluated by alpha_to_1, 25
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[5];
    assign out[1] = in[4] ^ in[6];
    assign out[2] = in[5] ^ in[7];
    assign out[3] = in[6] ^ in[8];
    assign out[4] = in[7] ^ in[9];
    assign out[5] = in[8] ^ in[10];
    assign out[6] = in[9] ^ in[11];
    assign out[7] = in[10] ^ in[12];
    assign out[8] = in[11] ^ in[13];
    assign out[9] = in[12] ^ in[14];
    assign out[10] = in[0] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[14];
    assign out[12] = in[1] ^ in[2];
    assign out[13] = in[2] ^ in[3];
    assign out[14] = in[3] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_026(in, out); // evaluated by alpha_to_1, 26
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4];
    assign out[1] = in[3] ^ in[5];
    assign out[2] = in[4] ^ in[6];
    assign out[3] = in[5] ^ in[7];
    assign out[4] = in[6] ^ in[8];
    assign out[5] = in[7] ^ in[9];
    assign out[6] = in[8] ^ in[10];
    assign out[7] = in[9] ^ in[11];
    assign out[8] = in[10] ^ in[12];
    assign out[9] = in[11] ^ in[13];
    assign out[10] = in[12] ^ in[14];
    assign out[11] = in[0] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[14];
    assign out[13] = in[1] ^ in[2];
    assign out[14] = in[2] ^ in[3];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_027(in, out); // evaluated by alpha_to_1, 27
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3];
    assign out[1] = in[2] ^ in[4];
    assign out[2] = in[3] ^ in[5];
    assign out[3] = in[4] ^ in[6];
    assign out[4] = in[5] ^ in[7];
    assign out[5] = in[6] ^ in[8];
    assign out[6] = in[7] ^ in[9];
    assign out[7] = in[8] ^ in[10];
    assign out[8] = in[9] ^ in[11];
    assign out[9] = in[10] ^ in[12];
    assign out[10] = in[11] ^ in[13];
    assign out[11] = in[12] ^ in[14];
    assign out[12] = in[0] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[14];
    assign out[14] = in[1] ^ in[2];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_028(in, out); // evaluated by alpha_to_1, 28
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2];
    assign out[1] = in[1] ^ in[3];
    assign out[2] = in[2] ^ in[4];
    assign out[3] = in[3] ^ in[5];
    assign out[4] = in[4] ^ in[6];
    assign out[5] = in[5] ^ in[7];
    assign out[6] = in[6] ^ in[8];
    assign out[7] = in[7] ^ in[9];
    assign out[8] = in[8] ^ in[10];
    assign out[9] = in[9] ^ in[11];
    assign out[10] = in[10] ^ in[12];
    assign out[11] = in[11] ^ in[13];
    assign out[12] = in[12] ^ in[14];
    assign out[13] = in[0] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_029(in, out); // evaluated by alpha_to_1, 29
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[14];
    assign out[2] = in[1] ^ in[3];
    assign out[3] = in[2] ^ in[4];
    assign out[4] = in[3] ^ in[5];
    assign out[5] = in[4] ^ in[6];
    assign out[6] = in[5] ^ in[7];
    assign out[7] = in[6] ^ in[8];
    assign out[8] = in[7] ^ in[9];
    assign out[9] = in[8] ^ in[10];
    assign out[10] = in[9] ^ in[11];
    assign out[11] = in[10] ^ in[12];
    assign out[12] = in[11] ^ in[13];
    assign out[13] = in[12] ^ in[14];
    assign out[14] = in[0] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_030(in, out); // evaluated by alpha_to_1, 30
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[13];
    assign out[1] = in[1] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[14];
    assign out[3] = in[1] ^ in[3];
    assign out[4] = in[2] ^ in[4];
    assign out[5] = in[3] ^ in[5];
    assign out[6] = in[4] ^ in[6];
    assign out[7] = in[5] ^ in[7];
    assign out[8] = in[6] ^ in[8];
    assign out[9] = in[7] ^ in[9];
    assign out[10] = in[8] ^ in[10];
    assign out[11] = in[9] ^ in[11];
    assign out[12] = in[10] ^ in[12];
    assign out[13] = in[11] ^ in[13];
    assign out[14] = in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_031(in, out); // evaluated by alpha_to_1, 31
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[12] ^ in[14];
    assign out[1] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[14];
    assign out[4] = in[1] ^ in[3];
    assign out[5] = in[2] ^ in[4];
    assign out[6] = in[3] ^ in[5];
    assign out[7] = in[4] ^ in[6];
    assign out[8] = in[5] ^ in[7];
    assign out[9] = in[6] ^ in[8];
    assign out[10] = in[7] ^ in[9];
    assign out[11] = in[8] ^ in[10];
    assign out[12] = in[9] ^ in[11];
    assign out[13] = in[10] ^ in[12];
    assign out[14] = in[11] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_001_alpha_to_032(in, out); // evaluated by alpha_to_1, 32
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[13];
    assign out[1] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[14];
    assign out[5] = in[1] ^ in[3];
    assign out[6] = in[2] ^ in[4];
    assign out[7] = in[3] ^ in[5];
    assign out[8] = in[4] ^ in[6];
    assign out[9] = in[5] ^ in[7];
    assign out[10] = in[6] ^ in[8];
    assign out[11] = in[7] ^ in[9];
    assign out[12] = in[8] ^ in[10];
    assign out[13] = in[9] ^ in[11];
    assign out[14] = in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_001(in, out); // evaluated by alpha_to_2, 2
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[13];
    assign out[1] = in[13] ^ in[14];
    assign out[2] = in[0] ^ in[14];
    assign out[3] = in[1];
    assign out[4] = in[2];
    assign out[5] = in[3];
    assign out[6] = in[4];
    assign out[7] = in[5];
    assign out[8] = in[6];
    assign out[9] = in[7];
    assign out[10] = in[8];
    assign out[11] = in[9];
    assign out[12] = in[10];
    assign out[13] = in[11];
    assign out[14] = in[12];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_002(in, out); // evaluated by alpha_to_2, 4
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11];
    assign out[1] = in[11] ^ in[12];
    assign out[2] = in[12] ^ in[13];
    assign out[3] = in[13] ^ in[14];
    assign out[4] = in[0] ^ in[14];
    assign out[5] = in[1];
    assign out[6] = in[2];
    assign out[7] = in[3];
    assign out[8] = in[4];
    assign out[9] = in[5];
    assign out[10] = in[6];
    assign out[11] = in[7];
    assign out[12] = in[8];
    assign out[13] = in[9];
    assign out[14] = in[10];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_003(in, out); // evaluated by alpha_to_2, 6
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9];
    assign out[1] = in[9] ^ in[10];
    assign out[2] = in[10] ^ in[11];
    assign out[3] = in[11] ^ in[12];
    assign out[4] = in[12] ^ in[13];
    assign out[5] = in[13] ^ in[14];
    assign out[6] = in[0] ^ in[14];
    assign out[7] = in[1];
    assign out[8] = in[2];
    assign out[9] = in[3];
    assign out[10] = in[4];
    assign out[11] = in[5];
    assign out[12] = in[6];
    assign out[13] = in[7];
    assign out[14] = in[8];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_004(in, out); // evaluated by alpha_to_2, 8
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7];
    assign out[1] = in[7] ^ in[8];
    assign out[2] = in[8] ^ in[9];
    assign out[3] = in[9] ^ in[10];
    assign out[4] = in[10] ^ in[11];
    assign out[5] = in[11] ^ in[12];
    assign out[6] = in[12] ^ in[13];
    assign out[7] = in[13] ^ in[14];
    assign out[8] = in[0] ^ in[14];
    assign out[9] = in[1];
    assign out[10] = in[2];
    assign out[11] = in[3];
    assign out[12] = in[4];
    assign out[13] = in[5];
    assign out[14] = in[6];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_005(in, out); // evaluated by alpha_to_2, 10
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5];
    assign out[1] = in[5] ^ in[6];
    assign out[2] = in[6] ^ in[7];
    assign out[3] = in[7] ^ in[8];
    assign out[4] = in[8] ^ in[9];
    assign out[5] = in[9] ^ in[10];
    assign out[6] = in[10] ^ in[11];
    assign out[7] = in[11] ^ in[12];
    assign out[8] = in[12] ^ in[13];
    assign out[9] = in[13] ^ in[14];
    assign out[10] = in[0] ^ in[14];
    assign out[11] = in[1];
    assign out[12] = in[2];
    assign out[13] = in[3];
    assign out[14] = in[4];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_006(in, out); // evaluated by alpha_to_2, 12
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3];
    assign out[1] = in[3] ^ in[4];
    assign out[2] = in[4] ^ in[5];
    assign out[3] = in[5] ^ in[6];
    assign out[4] = in[6] ^ in[7];
    assign out[5] = in[7] ^ in[8];
    assign out[6] = in[8] ^ in[9];
    assign out[7] = in[9] ^ in[10];
    assign out[8] = in[10] ^ in[11];
    assign out[9] = in[11] ^ in[12];
    assign out[10] = in[12] ^ in[13];
    assign out[11] = in[13] ^ in[14];
    assign out[12] = in[0] ^ in[14];
    assign out[13] = in[1];
    assign out[14] = in[2];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_007(in, out); // evaluated by alpha_to_2, 14
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1];
    assign out[1] = in[1] ^ in[2];
    assign out[2] = in[2] ^ in[3];
    assign out[3] = in[3] ^ in[4];
    assign out[4] = in[4] ^ in[5];
    assign out[5] = in[5] ^ in[6];
    assign out[6] = in[6] ^ in[7];
    assign out[7] = in[7] ^ in[8];
    assign out[8] = in[8] ^ in[9];
    assign out[9] = in[9] ^ in[10];
    assign out[10] = in[10] ^ in[11];
    assign out[11] = in[11] ^ in[12];
    assign out[12] = in[12] ^ in[13];
    assign out[13] = in[13] ^ in[14];
    assign out[14] = in[0] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_008(in, out); // evaluated by alpha_to_2, 16
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[13] ^ in[14];
    assign out[1] = in[0] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[14];
    assign out[3] = in[1] ^ in[2];
    assign out[4] = in[2] ^ in[3];
    assign out[5] = in[3] ^ in[4];
    assign out[6] = in[4] ^ in[5];
    assign out[7] = in[5] ^ in[6];
    assign out[8] = in[6] ^ in[7];
    assign out[9] = in[7] ^ in[8];
    assign out[10] = in[8] ^ in[9];
    assign out[11] = in[9] ^ in[10];
    assign out[12] = in[10] ^ in[11];
    assign out[13] = in[11] ^ in[12];
    assign out[14] = in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_009(in, out); // evaluated by alpha_to_2, 18
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[12];
    assign out[1] = in[11] ^ in[13];
    assign out[2] = in[12] ^ in[14];
    assign out[3] = in[0] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[14];
    assign out[5] = in[1] ^ in[2];
    assign out[6] = in[2] ^ in[3];
    assign out[7] = in[3] ^ in[4];
    assign out[8] = in[4] ^ in[5];
    assign out[9] = in[5] ^ in[6];
    assign out[10] = in[6] ^ in[7];
    assign out[11] = in[7] ^ in[8];
    assign out[12] = in[8] ^ in[9];
    assign out[13] = in[9] ^ in[10];
    assign out[14] = in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_010(in, out); // evaluated by alpha_to_2, 20
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10];
    assign out[1] = in[9] ^ in[11];
    assign out[2] = in[10] ^ in[12];
    assign out[3] = in[11] ^ in[13];
    assign out[4] = in[12] ^ in[14];
    assign out[5] = in[0] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[14];
    assign out[7] = in[1] ^ in[2];
    assign out[8] = in[2] ^ in[3];
    assign out[9] = in[3] ^ in[4];
    assign out[10] = in[4] ^ in[5];
    assign out[11] = in[5] ^ in[6];
    assign out[12] = in[6] ^ in[7];
    assign out[13] = in[7] ^ in[8];
    assign out[14] = in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_011(in, out); // evaluated by alpha_to_2, 22
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8];
    assign out[1] = in[7] ^ in[9];
    assign out[2] = in[8] ^ in[10];
    assign out[3] = in[9] ^ in[11];
    assign out[4] = in[10] ^ in[12];
    assign out[5] = in[11] ^ in[13];
    assign out[6] = in[12] ^ in[14];
    assign out[7] = in[0] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[14];
    assign out[9] = in[1] ^ in[2];
    assign out[10] = in[2] ^ in[3];
    assign out[11] = in[3] ^ in[4];
    assign out[12] = in[4] ^ in[5];
    assign out[13] = in[5] ^ in[6];
    assign out[14] = in[6] ^ in[7];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_012(in, out); // evaluated by alpha_to_2, 24
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6];
    assign out[1] = in[5] ^ in[7];
    assign out[2] = in[6] ^ in[8];
    assign out[3] = in[7] ^ in[9];
    assign out[4] = in[8] ^ in[10];
    assign out[5] = in[9] ^ in[11];
    assign out[6] = in[10] ^ in[12];
    assign out[7] = in[11] ^ in[13];
    assign out[8] = in[12] ^ in[14];
    assign out[9] = in[0] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[14];
    assign out[11] = in[1] ^ in[2];
    assign out[12] = in[2] ^ in[3];
    assign out[13] = in[3] ^ in[4];
    assign out[14] = in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_013(in, out); // evaluated by alpha_to_2, 26
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4];
    assign out[1] = in[3] ^ in[5];
    assign out[2] = in[4] ^ in[6];
    assign out[3] = in[5] ^ in[7];
    assign out[4] = in[6] ^ in[8];
    assign out[5] = in[7] ^ in[9];
    assign out[6] = in[8] ^ in[10];
    assign out[7] = in[9] ^ in[11];
    assign out[8] = in[10] ^ in[12];
    assign out[9] = in[11] ^ in[13];
    assign out[10] = in[12] ^ in[14];
    assign out[11] = in[0] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[14];
    assign out[13] = in[1] ^ in[2];
    assign out[14] = in[2] ^ in[3];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_014(in, out); // evaluated by alpha_to_2, 28
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2];
    assign out[1] = in[1] ^ in[3];
    assign out[2] = in[2] ^ in[4];
    assign out[3] = in[3] ^ in[5];
    assign out[4] = in[4] ^ in[6];
    assign out[5] = in[5] ^ in[7];
    assign out[6] = in[6] ^ in[8];
    assign out[7] = in[7] ^ in[9];
    assign out[8] = in[8] ^ in[10];
    assign out[9] = in[9] ^ in[11];
    assign out[10] = in[10] ^ in[12];
    assign out[11] = in[11] ^ in[13];
    assign out[12] = in[12] ^ in[14];
    assign out[13] = in[0] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_015(in, out); // evaluated by alpha_to_2, 30
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[13];
    assign out[1] = in[1] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[14];
    assign out[3] = in[1] ^ in[3];
    assign out[4] = in[2] ^ in[4];
    assign out[5] = in[3] ^ in[5];
    assign out[6] = in[4] ^ in[6];
    assign out[7] = in[5] ^ in[7];
    assign out[8] = in[6] ^ in[8];
    assign out[9] = in[7] ^ in[9];
    assign out[10] = in[8] ^ in[10];
    assign out[11] = in[9] ^ in[11];
    assign out[12] = in[10] ^ in[12];
    assign out[13] = in[11] ^ in[13];
    assign out[14] = in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_016(in, out); // evaluated by alpha_to_2, 32
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[13];
    assign out[1] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[14];
    assign out[5] = in[1] ^ in[3];
    assign out[6] = in[2] ^ in[4];
    assign out[7] = in[3] ^ in[5];
    assign out[8] = in[4] ^ in[6];
    assign out[9] = in[5] ^ in[7];
    assign out[10] = in[6] ^ in[8];
    assign out[11] = in[7] ^ in[9];
    assign out[12] = in[8] ^ in[10];
    assign out[13] = in[9] ^ in[11];
    assign out[14] = in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_017(in, out); // evaluated by alpha_to_2, 34
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[11];
    assign out[1] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[2] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[3] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[14];
    assign out[7] = in[1] ^ in[3];
    assign out[8] = in[2] ^ in[4];
    assign out[9] = in[3] ^ in[5];
    assign out[10] = in[4] ^ in[6];
    assign out[11] = in[5] ^ in[7];
    assign out[12] = in[6] ^ in[8];
    assign out[13] = in[7] ^ in[9];
    assign out[14] = in[8] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_018(in, out); // evaluated by alpha_to_2, 36
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[9];
    assign out[1] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[14];
    assign out[9] = in[1] ^ in[3];
    assign out[10] = in[2] ^ in[4];
    assign out[11] = in[3] ^ in[5];
    assign out[12] = in[4] ^ in[6];
    assign out[13] = in[5] ^ in[7];
    assign out[14] = in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_019(in, out); // evaluated by alpha_to_2, 38
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[7];
    assign out[1] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[2] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[3] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[4] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[5] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[6] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[14];
    assign out[11] = in[1] ^ in[3];
    assign out[12] = in[2] ^ in[4];
    assign out[13] = in[3] ^ in[5];
    assign out[14] = in[4] ^ in[6];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_020(in, out); // evaluated by alpha_to_2, 40
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[14];
    assign out[13] = in[1] ^ in[3];
    assign out[14] = in[2] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_021(in, out); // evaluated by alpha_to_2, 42
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[4] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[5] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[6] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[7] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[8] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[9] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_022(in, out); // evaluated by alpha_to_2, 44
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[5] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[6] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[7] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[8] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[9] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[10] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[11] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[12] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_023(in, out); // evaluated by alpha_to_2, 46
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[11];
    assign out[2] = in[0] ^ in[1] ^ in[12];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[6] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[7] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[8] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[9] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[10] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[11] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[12] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[13] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[14] = in[10] ^ in[11] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_024(in, out); // evaluated by alpha_to_2, 48
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[9] ^ in[13];
    assign out[2] = in[10] ^ in[14];
    assign out[3] = in[0] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_025(in, out); // evaluated by alpha_to_2, 50
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[1] = in[7] ^ in[11];
    assign out[2] = in[8] ^ in[12];
    assign out[3] = in[9] ^ in[13];
    assign out[4] = in[10] ^ in[14];
    assign out[5] = in[0] ^ in[11];
    assign out[6] = in[0] ^ in[1] ^ in[12];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[10] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[11] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[12] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[13] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[14] = in[6] ^ in[7] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_026(in, out); // evaluated by alpha_to_2, 52
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[1] = in[5] ^ in[9];
    assign out[2] = in[6] ^ in[10];
    assign out[3] = in[7] ^ in[11];
    assign out[4] = in[8] ^ in[12];
    assign out[5] = in[9] ^ in[13];
    assign out[6] = in[10] ^ in[14];
    assign out[7] = in[0] ^ in[11];
    assign out[8] = in[0] ^ in[1] ^ in[12];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[12] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[13] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[14] = in[4] ^ in[5] ^ in[6] ^ in[7];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_027(in, out); // evaluated by alpha_to_2, 54
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[1] = in[3] ^ in[7];
    assign out[2] = in[4] ^ in[8];
    assign out[3] = in[5] ^ in[9];
    assign out[4] = in[6] ^ in[10];
    assign out[5] = in[7] ^ in[11];
    assign out[6] = in[8] ^ in[12];
    assign out[7] = in[9] ^ in[13];
    assign out[8] = in[10] ^ in[14];
    assign out[9] = in[0] ^ in[11];
    assign out[10] = in[0] ^ in[1] ^ in[12];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[14] = in[2] ^ in[3] ^ in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_028(in, out); // evaluated by alpha_to_2, 56
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[1] = in[1] ^ in[5];
    assign out[2] = in[2] ^ in[6];
    assign out[3] = in[3] ^ in[7];
    assign out[4] = in[4] ^ in[8];
    assign out[5] = in[5] ^ in[9];
    assign out[6] = in[6] ^ in[10];
    assign out[7] = in[7] ^ in[11];
    assign out[8] = in[8] ^ in[12];
    assign out[9] = in[9] ^ in[13];
    assign out[10] = in[10] ^ in[14];
    assign out[11] = in[0] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_029(in, out); // evaluated by alpha_to_2, 58
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[1] = in[3] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[4] ^ in[14];
    assign out[3] = in[1] ^ in[5];
    assign out[4] = in[2] ^ in[6];
    assign out[5] = in[3] ^ in[7];
    assign out[6] = in[4] ^ in[8];
    assign out[7] = in[5] ^ in[9];
    assign out[8] = in[6] ^ in[10];
    assign out[9] = in[7] ^ in[11];
    assign out[10] = in[8] ^ in[12];
    assign out[11] = in[9] ^ in[13];
    assign out[12] = in[10] ^ in[14];
    assign out[13] = in[0] ^ in[11];
    assign out[14] = in[0] ^ in[1] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_030(in, out); // evaluated by alpha_to_2, 60
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[11];
    assign out[1] = in[1] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[14];
    assign out[5] = in[1] ^ in[5];
    assign out[6] = in[2] ^ in[6];
    assign out[7] = in[3] ^ in[7];
    assign out[8] = in[4] ^ in[8];
    assign out[9] = in[5] ^ in[9];
    assign out[10] = in[6] ^ in[10];
    assign out[11] = in[7] ^ in[11];
    assign out[12] = in[8] ^ in[12];
    assign out[13] = in[9] ^ in[13];
    assign out[14] = in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_031(in, out); // evaluated by alpha_to_2, 62
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[13];
    assign out[1] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[3] = in[1] ^ in[11] ^ in[12];
    assign out[4] = in[2] ^ in[12] ^ in[13];
    assign out[5] = in[3] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[4] ^ in[14];
    assign out[7] = in[1] ^ in[5];
    assign out[8] = in[2] ^ in[6];
    assign out[9] = in[3] ^ in[7];
    assign out[10] = in[4] ^ in[8];
    assign out[11] = in[5] ^ in[9];
    assign out[12] = in[6] ^ in[10];
    assign out[13] = in[7] ^ in[11];
    assign out[14] = in[8] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_002_alpha_to_032(in, out); // evaluated by alpha_to_2, 64
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[11];
    assign out[1] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[2] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[3] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[5] = in[1] ^ in[11] ^ in[12];
    assign out[6] = in[2] ^ in[12] ^ in[13];
    assign out[7] = in[3] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[4] ^ in[14];
    assign out[9] = in[1] ^ in[5];
    assign out[10] = in[2] ^ in[6];
    assign out[11] = in[3] ^ in[7];
    assign out[12] = in[4] ^ in[8];
    assign out[13] = in[5] ^ in[9];
    assign out[14] = in[6] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_001(in, out); // evaluated by alpha_to_3, 3
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[12];
    assign out[1] = in[12] ^ in[13];
    assign out[2] = in[13] ^ in[14];
    assign out[3] = in[0] ^ in[14];
    assign out[4] = in[1];
    assign out[5] = in[2];
    assign out[6] = in[3];
    assign out[7] = in[4];
    assign out[8] = in[5];
    assign out[9] = in[6];
    assign out[10] = in[7];
    assign out[11] = in[8];
    assign out[12] = in[9];
    assign out[13] = in[10];
    assign out[14] = in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_002(in, out); // evaluated by alpha_to_3, 6
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9];
    assign out[1] = in[9] ^ in[10];
    assign out[2] = in[10] ^ in[11];
    assign out[3] = in[11] ^ in[12];
    assign out[4] = in[12] ^ in[13];
    assign out[5] = in[13] ^ in[14];
    assign out[6] = in[0] ^ in[14];
    assign out[7] = in[1];
    assign out[8] = in[2];
    assign out[9] = in[3];
    assign out[10] = in[4];
    assign out[11] = in[5];
    assign out[12] = in[6];
    assign out[13] = in[7];
    assign out[14] = in[8];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_003(in, out); // evaluated by alpha_to_3, 9
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[6];
    assign out[1] = in[6] ^ in[7];
    assign out[2] = in[7] ^ in[8];
    assign out[3] = in[8] ^ in[9];
    assign out[4] = in[9] ^ in[10];
    assign out[5] = in[10] ^ in[11];
    assign out[6] = in[11] ^ in[12];
    assign out[7] = in[12] ^ in[13];
    assign out[8] = in[13] ^ in[14];
    assign out[9] = in[0] ^ in[14];
    assign out[10] = in[1];
    assign out[11] = in[2];
    assign out[12] = in[3];
    assign out[13] = in[4];
    assign out[14] = in[5];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_004(in, out); // evaluated by alpha_to_3, 12
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3];
    assign out[1] = in[3] ^ in[4];
    assign out[2] = in[4] ^ in[5];
    assign out[3] = in[5] ^ in[6];
    assign out[4] = in[6] ^ in[7];
    assign out[5] = in[7] ^ in[8];
    assign out[6] = in[8] ^ in[9];
    assign out[7] = in[9] ^ in[10];
    assign out[8] = in[10] ^ in[11];
    assign out[9] = in[11] ^ in[12];
    assign out[10] = in[12] ^ in[13];
    assign out[11] = in[13] ^ in[14];
    assign out[12] = in[0] ^ in[14];
    assign out[13] = in[1];
    assign out[14] = in[2];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_005(in, out); // evaluated by alpha_to_3, 15
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[14];
    assign out[2] = in[1] ^ in[2];
    assign out[3] = in[2] ^ in[3];
    assign out[4] = in[3] ^ in[4];
    assign out[5] = in[4] ^ in[5];
    assign out[6] = in[5] ^ in[6];
    assign out[7] = in[6] ^ in[7];
    assign out[8] = in[7] ^ in[8];
    assign out[9] = in[8] ^ in[9];
    assign out[10] = in[9] ^ in[10];
    assign out[11] = in[10] ^ in[11];
    assign out[12] = in[11] ^ in[12];
    assign out[13] = in[12] ^ in[13];
    assign out[14] = in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_006(in, out); // evaluated by alpha_to_3, 18
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[12];
    assign out[1] = in[11] ^ in[13];
    assign out[2] = in[12] ^ in[14];
    assign out[3] = in[0] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[14];
    assign out[5] = in[1] ^ in[2];
    assign out[6] = in[2] ^ in[3];
    assign out[7] = in[3] ^ in[4];
    assign out[8] = in[4] ^ in[5];
    assign out[9] = in[5] ^ in[6];
    assign out[10] = in[6] ^ in[7];
    assign out[11] = in[7] ^ in[8];
    assign out[12] = in[8] ^ in[9];
    assign out[13] = in[9] ^ in[10];
    assign out[14] = in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_007(in, out); // evaluated by alpha_to_3, 21
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[9];
    assign out[1] = in[8] ^ in[10];
    assign out[2] = in[9] ^ in[11];
    assign out[3] = in[10] ^ in[12];
    assign out[4] = in[11] ^ in[13];
    assign out[5] = in[12] ^ in[14];
    assign out[6] = in[0] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[14];
    assign out[8] = in[1] ^ in[2];
    assign out[9] = in[2] ^ in[3];
    assign out[10] = in[3] ^ in[4];
    assign out[11] = in[4] ^ in[5];
    assign out[12] = in[5] ^ in[6];
    assign out[13] = in[6] ^ in[7];
    assign out[14] = in[7] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_008(in, out); // evaluated by alpha_to_3, 24
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6];
    assign out[1] = in[5] ^ in[7];
    assign out[2] = in[6] ^ in[8];
    assign out[3] = in[7] ^ in[9];
    assign out[4] = in[8] ^ in[10];
    assign out[5] = in[9] ^ in[11];
    assign out[6] = in[10] ^ in[12];
    assign out[7] = in[11] ^ in[13];
    assign out[8] = in[12] ^ in[14];
    assign out[9] = in[0] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[14];
    assign out[11] = in[1] ^ in[2];
    assign out[12] = in[2] ^ in[3];
    assign out[13] = in[3] ^ in[4];
    assign out[14] = in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_009(in, out); // evaluated by alpha_to_3, 27
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3];
    assign out[1] = in[2] ^ in[4];
    assign out[2] = in[3] ^ in[5];
    assign out[3] = in[4] ^ in[6];
    assign out[4] = in[5] ^ in[7];
    assign out[5] = in[6] ^ in[8];
    assign out[6] = in[7] ^ in[9];
    assign out[7] = in[8] ^ in[10];
    assign out[8] = in[9] ^ in[11];
    assign out[9] = in[10] ^ in[12];
    assign out[10] = in[11] ^ in[13];
    assign out[11] = in[12] ^ in[14];
    assign out[12] = in[0] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[14];
    assign out[14] = in[1] ^ in[2];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_010(in, out); // evaluated by alpha_to_3, 30
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[13];
    assign out[1] = in[1] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[14];
    assign out[3] = in[1] ^ in[3];
    assign out[4] = in[2] ^ in[4];
    assign out[5] = in[3] ^ in[5];
    assign out[6] = in[4] ^ in[6];
    assign out[7] = in[5] ^ in[7];
    assign out[8] = in[6] ^ in[8];
    assign out[9] = in[7] ^ in[9];
    assign out[10] = in[8] ^ in[10];
    assign out[11] = in[9] ^ in[11];
    assign out[12] = in[10] ^ in[12];
    assign out[13] = in[11] ^ in[13];
    assign out[14] = in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_011(in, out); // evaluated by alpha_to_3, 33
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[10] ^ in[12];
    assign out[1] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[2] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[14];
    assign out[6] = in[1] ^ in[3];
    assign out[7] = in[2] ^ in[4];
    assign out[8] = in[3] ^ in[5];
    assign out[9] = in[4] ^ in[6];
    assign out[10] = in[5] ^ in[7];
    assign out[11] = in[6] ^ in[8];
    assign out[12] = in[7] ^ in[9];
    assign out[13] = in[8] ^ in[10];
    assign out[14] = in[9] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_012(in, out); // evaluated by alpha_to_3, 36
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[9];
    assign out[1] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[14];
    assign out[9] = in[1] ^ in[3];
    assign out[10] = in[2] ^ in[4];
    assign out[11] = in[3] ^ in[5];
    assign out[12] = in[4] ^ in[6];
    assign out[13] = in[5] ^ in[7];
    assign out[14] = in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_013(in, out); // evaluated by alpha_to_3, 39
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[6];
    assign out[1] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[2] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[3] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[4] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[5] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[6] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[7] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[8] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[14];
    assign out[12] = in[1] ^ in[3];
    assign out[13] = in[2] ^ in[4];
    assign out[14] = in[3] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_014(in, out); // evaluated by alpha_to_3, 42
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[4] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[5] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[6] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[7] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[8] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[9] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_015(in, out); // evaluated by alpha_to_3, 45
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[12];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[5] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[6] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[7] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[8] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[9] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[10] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[11] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[12] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_016(in, out); // evaluated by alpha_to_3, 48
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[9] ^ in[13];
    assign out[2] = in[10] ^ in[14];
    assign out[3] = in[0] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_017(in, out); // evaluated by alpha_to_3, 51
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[1] = in[6] ^ in[10];
    assign out[2] = in[7] ^ in[11];
    assign out[3] = in[8] ^ in[12];
    assign out[4] = in[9] ^ in[13];
    assign out[5] = in[10] ^ in[14];
    assign out[6] = in[0] ^ in[11];
    assign out[7] = in[0] ^ in[1] ^ in[12];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[11] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[12] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[13] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[14] = in[5] ^ in[6] ^ in[7] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_018(in, out); // evaluated by alpha_to_3, 54
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[1] = in[3] ^ in[7];
    assign out[2] = in[4] ^ in[8];
    assign out[3] = in[5] ^ in[9];
    assign out[4] = in[6] ^ in[10];
    assign out[5] = in[7] ^ in[11];
    assign out[6] = in[8] ^ in[12];
    assign out[7] = in[9] ^ in[13];
    assign out[8] = in[10] ^ in[14];
    assign out[9] = in[0] ^ in[11];
    assign out[10] = in[0] ^ in[1] ^ in[12];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[14] = in[2] ^ in[3] ^ in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_019(in, out); // evaluated by alpha_to_3, 57
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[1] = in[0] ^ in[4] ^ in[14];
    assign out[2] = in[1] ^ in[5];
    assign out[3] = in[2] ^ in[6];
    assign out[4] = in[3] ^ in[7];
    assign out[5] = in[4] ^ in[8];
    assign out[6] = in[5] ^ in[9];
    assign out[7] = in[6] ^ in[10];
    assign out[8] = in[7] ^ in[11];
    assign out[9] = in[8] ^ in[12];
    assign out[10] = in[9] ^ in[13];
    assign out[11] = in[10] ^ in[14];
    assign out[12] = in[0] ^ in[11];
    assign out[13] = in[0] ^ in[1] ^ in[12];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_020(in, out); // evaluated by alpha_to_3, 60
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[11];
    assign out[1] = in[1] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[14];
    assign out[5] = in[1] ^ in[5];
    assign out[6] = in[2] ^ in[6];
    assign out[7] = in[3] ^ in[7];
    assign out[8] = in[4] ^ in[8];
    assign out[9] = in[5] ^ in[9];
    assign out[10] = in[6] ^ in[10];
    assign out[11] = in[7] ^ in[11];
    assign out[12] = in[8] ^ in[12];
    assign out[13] = in[9] ^ in[13];
    assign out[14] = in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_021(in, out); // evaluated by alpha_to_3, 63
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[12];
    assign out[1] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[2] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[4] = in[1] ^ in[11] ^ in[12];
    assign out[5] = in[2] ^ in[12] ^ in[13];
    assign out[6] = in[3] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[4] ^ in[14];
    assign out[8] = in[1] ^ in[5];
    assign out[9] = in[2] ^ in[6];
    assign out[10] = in[3] ^ in[7];
    assign out[11] = in[4] ^ in[8];
    assign out[12] = in[5] ^ in[9];
    assign out[13] = in[6] ^ in[10];
    assign out[14] = in[7] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_022(in, out); // evaluated by alpha_to_3, 66
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[9];
    assign out[1] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[2] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[3] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[4] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[5] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[14];
    assign out[11] = in[1] ^ in[5];
    assign out[12] = in[2] ^ in[6];
    assign out[13] = in[3] ^ in[7];
    assign out[14] = in[4] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_023(in, out); // evaluated by alpha_to_3, 69
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[6];
    assign out[1] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[2] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[3] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[4] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[5] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[6] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[7] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[8] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[10] = in[1] ^ in[11] ^ in[12];
    assign out[11] = in[2] ^ in[12] ^ in[13];
    assign out[12] = in[3] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[4] ^ in[14];
    assign out[14] = in[1] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_024(in, out); // evaluated by alpha_to_3, 72
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[4] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[5] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[6] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[7] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[8] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[9] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[10] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[11] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_025(in, out); // evaluated by alpha_to_3, 75
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[3] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[4] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[7] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[8] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[9] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[10] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[11] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[12] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[13] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[14] = in[9] ^ in[10] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_026(in, out); // evaluated by alpha_to_3, 78
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[1] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[2] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[6] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[7] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[10] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[11] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[12] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[13] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[14] = in[6] ^ in[7] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_027(in, out); // evaluated by alpha_to_3, 81
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[1] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[2] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[3] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[4] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[5] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[6] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[9] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[10] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[13] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[14] = in[3] ^ in[4] ^ in[7] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_028(in, out); // evaluated by alpha_to_3, 84
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[2] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[3] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[4] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[5] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[6] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[7] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[8] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_029(in, out); // evaluated by alpha_to_3, 87
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[5] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[6] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[7] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[8] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[9] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[10] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[11] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[12] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[11] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_030(in, out); // evaluated by alpha_to_3, 90
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[8] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[9] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[10] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[11] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[12] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[13] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[8] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_031(in, out); // evaluated by alpha_to_3, 93
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[1] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[2] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[10] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[11] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[12] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[13] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[14] = in[5] ^ in[7] ^ in[9] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_003_alpha_to_032(in, out); // evaluated by alpha_to_3, 96
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[14] = in[2] ^ in[4] ^ in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_001(in, out); // evaluated by alpha_to_4, 4
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11];
    assign out[1] = in[11] ^ in[12];
    assign out[2] = in[12] ^ in[13];
    assign out[3] = in[13] ^ in[14];
    assign out[4] = in[0] ^ in[14];
    assign out[5] = in[1];
    assign out[6] = in[2];
    assign out[7] = in[3];
    assign out[8] = in[4];
    assign out[9] = in[5];
    assign out[10] = in[6];
    assign out[11] = in[7];
    assign out[12] = in[8];
    assign out[13] = in[9];
    assign out[14] = in[10];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_002(in, out); // evaluated by alpha_to_4, 8
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7];
    assign out[1] = in[7] ^ in[8];
    assign out[2] = in[8] ^ in[9];
    assign out[3] = in[9] ^ in[10];
    assign out[4] = in[10] ^ in[11];
    assign out[5] = in[11] ^ in[12];
    assign out[6] = in[12] ^ in[13];
    assign out[7] = in[13] ^ in[14];
    assign out[8] = in[0] ^ in[14];
    assign out[9] = in[1];
    assign out[10] = in[2];
    assign out[11] = in[3];
    assign out[12] = in[4];
    assign out[13] = in[5];
    assign out[14] = in[6];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_003(in, out); // evaluated by alpha_to_4, 12
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3];
    assign out[1] = in[3] ^ in[4];
    assign out[2] = in[4] ^ in[5];
    assign out[3] = in[5] ^ in[6];
    assign out[4] = in[6] ^ in[7];
    assign out[5] = in[7] ^ in[8];
    assign out[6] = in[8] ^ in[9];
    assign out[7] = in[9] ^ in[10];
    assign out[8] = in[10] ^ in[11];
    assign out[9] = in[11] ^ in[12];
    assign out[10] = in[12] ^ in[13];
    assign out[11] = in[13] ^ in[14];
    assign out[12] = in[0] ^ in[14];
    assign out[13] = in[1];
    assign out[14] = in[2];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_004(in, out); // evaluated by alpha_to_4, 16
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[13] ^ in[14];
    assign out[1] = in[0] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[14];
    assign out[3] = in[1] ^ in[2];
    assign out[4] = in[2] ^ in[3];
    assign out[5] = in[3] ^ in[4];
    assign out[6] = in[4] ^ in[5];
    assign out[7] = in[5] ^ in[6];
    assign out[8] = in[6] ^ in[7];
    assign out[9] = in[7] ^ in[8];
    assign out[10] = in[8] ^ in[9];
    assign out[11] = in[9] ^ in[10];
    assign out[12] = in[10] ^ in[11];
    assign out[13] = in[11] ^ in[12];
    assign out[14] = in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_005(in, out); // evaluated by alpha_to_4, 20
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10];
    assign out[1] = in[9] ^ in[11];
    assign out[2] = in[10] ^ in[12];
    assign out[3] = in[11] ^ in[13];
    assign out[4] = in[12] ^ in[14];
    assign out[5] = in[0] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[14];
    assign out[7] = in[1] ^ in[2];
    assign out[8] = in[2] ^ in[3];
    assign out[9] = in[3] ^ in[4];
    assign out[10] = in[4] ^ in[5];
    assign out[11] = in[5] ^ in[6];
    assign out[12] = in[6] ^ in[7];
    assign out[13] = in[7] ^ in[8];
    assign out[14] = in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_006(in, out); // evaluated by alpha_to_4, 24
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6];
    assign out[1] = in[5] ^ in[7];
    assign out[2] = in[6] ^ in[8];
    assign out[3] = in[7] ^ in[9];
    assign out[4] = in[8] ^ in[10];
    assign out[5] = in[9] ^ in[11];
    assign out[6] = in[10] ^ in[12];
    assign out[7] = in[11] ^ in[13];
    assign out[8] = in[12] ^ in[14];
    assign out[9] = in[0] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[14];
    assign out[11] = in[1] ^ in[2];
    assign out[12] = in[2] ^ in[3];
    assign out[13] = in[3] ^ in[4];
    assign out[14] = in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_007(in, out); // evaluated by alpha_to_4, 28
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2];
    assign out[1] = in[1] ^ in[3];
    assign out[2] = in[2] ^ in[4];
    assign out[3] = in[3] ^ in[5];
    assign out[4] = in[4] ^ in[6];
    assign out[5] = in[5] ^ in[7];
    assign out[6] = in[6] ^ in[8];
    assign out[7] = in[7] ^ in[9];
    assign out[8] = in[8] ^ in[10];
    assign out[9] = in[9] ^ in[11];
    assign out[10] = in[10] ^ in[12];
    assign out[11] = in[11] ^ in[13];
    assign out[12] = in[12] ^ in[14];
    assign out[13] = in[0] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_008(in, out); // evaluated by alpha_to_4, 32
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[13];
    assign out[1] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[14];
    assign out[5] = in[1] ^ in[3];
    assign out[6] = in[2] ^ in[4];
    assign out[7] = in[3] ^ in[5];
    assign out[8] = in[4] ^ in[6];
    assign out[9] = in[5] ^ in[7];
    assign out[10] = in[6] ^ in[8];
    assign out[11] = in[7] ^ in[9];
    assign out[12] = in[8] ^ in[10];
    assign out[13] = in[9] ^ in[11];
    assign out[14] = in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_009(in, out); // evaluated by alpha_to_4, 36
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[9];
    assign out[1] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[14];
    assign out[9] = in[1] ^ in[3];
    assign out[10] = in[2] ^ in[4];
    assign out[11] = in[3] ^ in[5];
    assign out[12] = in[4] ^ in[6];
    assign out[13] = in[5] ^ in[7];
    assign out[14] = in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_010(in, out); // evaluated by alpha_to_4, 40
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[14];
    assign out[13] = in[1] ^ in[3];
    assign out[14] = in[2] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_011(in, out); // evaluated by alpha_to_4, 44
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[5] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[6] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[7] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[8] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[9] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[10] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[11] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[12] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_012(in, out); // evaluated by alpha_to_4, 48
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[9] ^ in[13];
    assign out[2] = in[10] ^ in[14];
    assign out[3] = in[0] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_013(in, out); // evaluated by alpha_to_4, 52
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[1] = in[5] ^ in[9];
    assign out[2] = in[6] ^ in[10];
    assign out[3] = in[7] ^ in[11];
    assign out[4] = in[8] ^ in[12];
    assign out[5] = in[9] ^ in[13];
    assign out[6] = in[10] ^ in[14];
    assign out[7] = in[0] ^ in[11];
    assign out[8] = in[0] ^ in[1] ^ in[12];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[12] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[13] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[14] = in[4] ^ in[5] ^ in[6] ^ in[7];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_014(in, out); // evaluated by alpha_to_4, 56
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[1] = in[1] ^ in[5];
    assign out[2] = in[2] ^ in[6];
    assign out[3] = in[3] ^ in[7];
    assign out[4] = in[4] ^ in[8];
    assign out[5] = in[5] ^ in[9];
    assign out[6] = in[6] ^ in[10];
    assign out[7] = in[7] ^ in[11];
    assign out[8] = in[8] ^ in[12];
    assign out[9] = in[9] ^ in[13];
    assign out[10] = in[10] ^ in[14];
    assign out[11] = in[0] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_015(in, out); // evaluated by alpha_to_4, 60
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[11];
    assign out[1] = in[1] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[14];
    assign out[5] = in[1] ^ in[5];
    assign out[6] = in[2] ^ in[6];
    assign out[7] = in[3] ^ in[7];
    assign out[8] = in[4] ^ in[8];
    assign out[9] = in[5] ^ in[9];
    assign out[10] = in[6] ^ in[10];
    assign out[11] = in[7] ^ in[11];
    assign out[12] = in[8] ^ in[12];
    assign out[13] = in[9] ^ in[13];
    assign out[14] = in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_016(in, out); // evaluated by alpha_to_4, 64
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[11];
    assign out[1] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[2] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[3] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[5] = in[1] ^ in[11] ^ in[12];
    assign out[6] = in[2] ^ in[12] ^ in[13];
    assign out[7] = in[3] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[4] ^ in[14];
    assign out[9] = in[1] ^ in[5];
    assign out[10] = in[2] ^ in[6];
    assign out[11] = in[3] ^ in[7];
    assign out[12] = in[4] ^ in[8];
    assign out[13] = in[5] ^ in[9];
    assign out[14] = in[6] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_017(in, out); // evaluated by alpha_to_4, 68
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[7];
    assign out[1] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[2] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[3] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[4] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[5] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[6] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[7] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[9] = in[1] ^ in[11] ^ in[12];
    assign out[10] = in[2] ^ in[12] ^ in[13];
    assign out[11] = in[3] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[4] ^ in[14];
    assign out[13] = in[1] ^ in[5];
    assign out[14] = in[2] ^ in[6];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_018(in, out); // evaluated by alpha_to_4, 72
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[4] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[5] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[6] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[7] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[8] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[9] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[10] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[11] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_019(in, out); // evaluated by alpha_to_4, 76
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[4] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[8] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[9] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[10] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[11] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[12] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[13] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[14] = in[8] ^ in[9] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_020(in, out); // evaluated by alpha_to_4, 80
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[1] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[2] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[3] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[12] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[13] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[14] = in[4] ^ in[5] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_021(in, out); // evaluated by alpha_to_4, 84
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[2] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[3] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[4] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[5] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[6] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[7] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[8] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_022(in, out); // evaluated by alpha_to_4, 88
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[6] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[7] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[8] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[9] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[10] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[11] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[12] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_023(in, out); // evaluated by alpha_to_4, 92
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[1] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[10] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[11] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[12] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[13] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[14] = in[6] ^ in[8] ^ in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_024(in, out); // evaluated by alpha_to_4, 96
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[14] = in[2] ^ in[4] ^ in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_025(in, out); // evaluated by alpha_to_4, 100
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[5] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_026(in, out); // evaluated by alpha_to_4, 104
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_027(in, out); // evaluated by alpha_to_4, 108
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[5] ^ in[13];
    assign out[2] = in[6] ^ in[14];
    assign out[3] = in[0] ^ in[7];
    assign out[4] = in[0] ^ in[1] ^ in[8];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_028(in, out); // evaluated by alpha_to_4, 112
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[1] = in[1] ^ in[9];
    assign out[2] = in[2] ^ in[10];
    assign out[3] = in[3] ^ in[11];
    assign out[4] = in[4] ^ in[12];
    assign out[5] = in[5] ^ in[13];
    assign out[6] = in[6] ^ in[14];
    assign out[7] = in[0] ^ in[7];
    assign out[8] = in[0] ^ in[1] ^ in[8];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_029(in, out); // evaluated by alpha_to_4, 116
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[1] = in[5] ^ in[11] ^ in[12];
    assign out[2] = in[6] ^ in[12] ^ in[13];
    assign out[3] = in[7] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[8] ^ in[14];
    assign out[5] = in[1] ^ in[9];
    assign out[6] = in[2] ^ in[10];
    assign out[7] = in[3] ^ in[11];
    assign out[8] = in[4] ^ in[12];
    assign out[9] = in[5] ^ in[13];
    assign out[10] = in[6] ^ in[14];
    assign out[11] = in[0] ^ in[7];
    assign out[12] = in[0] ^ in[1] ^ in[8];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_030(in, out); // evaluated by alpha_to_4, 120
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[7];
    assign out[1] = in[1] ^ in[7] ^ in[8];
    assign out[2] = in[2] ^ in[8] ^ in[9];
    assign out[3] = in[3] ^ in[9] ^ in[10];
    assign out[4] = in[4] ^ in[10] ^ in[11];
    assign out[5] = in[5] ^ in[11] ^ in[12];
    assign out[6] = in[6] ^ in[12] ^ in[13];
    assign out[7] = in[7] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[8] ^ in[14];
    assign out[9] = in[1] ^ in[9];
    assign out[10] = in[2] ^ in[10];
    assign out[11] = in[3] ^ in[11];
    assign out[12] = in[4] ^ in[12];
    assign out[13] = in[5] ^ in[13];
    assign out[14] = in[6] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_031(in, out); // evaluated by alpha_to_4, 124
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[11];
    assign out[1] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[2] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[3] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[5] = in[1] ^ in[7] ^ in[8];
    assign out[6] = in[2] ^ in[8] ^ in[9];
    assign out[7] = in[3] ^ in[9] ^ in[10];
    assign out[8] = in[4] ^ in[10] ^ in[11];
    assign out[9] = in[5] ^ in[11] ^ in[12];
    assign out[10] = in[6] ^ in[12] ^ in[13];
    assign out[11] = in[7] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[8] ^ in[14];
    assign out[13] = in[1] ^ in[9];
    assign out[14] = in[2] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_004_alpha_to_032(in, out); // evaluated by alpha_to_4, 128
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[4] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[5] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[6] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[7] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[9] = in[1] ^ in[7] ^ in[8];
    assign out[10] = in[2] ^ in[8] ^ in[9];
    assign out[11] = in[3] ^ in[9] ^ in[10];
    assign out[12] = in[4] ^ in[10] ^ in[11];
    assign out[13] = in[5] ^ in[11] ^ in[12];
    assign out[14] = in[6] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_001(in, out); // evaluated by alpha_to_5, 5
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[10];
    assign out[1] = in[10] ^ in[11];
    assign out[2] = in[11] ^ in[12];
    assign out[3] = in[12] ^ in[13];
    assign out[4] = in[13] ^ in[14];
    assign out[5] = in[0] ^ in[14];
    assign out[6] = in[1];
    assign out[7] = in[2];
    assign out[8] = in[3];
    assign out[9] = in[4];
    assign out[10] = in[5];
    assign out[11] = in[6];
    assign out[12] = in[7];
    assign out[13] = in[8];
    assign out[14] = in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_002(in, out); // evaluated by alpha_to_5, 10
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5];
    assign out[1] = in[5] ^ in[6];
    assign out[2] = in[6] ^ in[7];
    assign out[3] = in[7] ^ in[8];
    assign out[4] = in[8] ^ in[9];
    assign out[5] = in[9] ^ in[10];
    assign out[6] = in[10] ^ in[11];
    assign out[7] = in[11] ^ in[12];
    assign out[8] = in[12] ^ in[13];
    assign out[9] = in[13] ^ in[14];
    assign out[10] = in[0] ^ in[14];
    assign out[11] = in[1];
    assign out[12] = in[2];
    assign out[13] = in[3];
    assign out[14] = in[4];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_003(in, out); // evaluated by alpha_to_5, 15
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[14];
    assign out[2] = in[1] ^ in[2];
    assign out[3] = in[2] ^ in[3];
    assign out[4] = in[3] ^ in[4];
    assign out[5] = in[4] ^ in[5];
    assign out[6] = in[5] ^ in[6];
    assign out[7] = in[6] ^ in[7];
    assign out[8] = in[7] ^ in[8];
    assign out[9] = in[8] ^ in[9];
    assign out[10] = in[9] ^ in[10];
    assign out[11] = in[10] ^ in[11];
    assign out[12] = in[11] ^ in[12];
    assign out[13] = in[12] ^ in[13];
    assign out[14] = in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_004(in, out); // evaluated by alpha_to_5, 20
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10];
    assign out[1] = in[9] ^ in[11];
    assign out[2] = in[10] ^ in[12];
    assign out[3] = in[11] ^ in[13];
    assign out[4] = in[12] ^ in[14];
    assign out[5] = in[0] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[14];
    assign out[7] = in[1] ^ in[2];
    assign out[8] = in[2] ^ in[3];
    assign out[9] = in[3] ^ in[4];
    assign out[10] = in[4] ^ in[5];
    assign out[11] = in[5] ^ in[6];
    assign out[12] = in[6] ^ in[7];
    assign out[13] = in[7] ^ in[8];
    assign out[14] = in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_005(in, out); // evaluated by alpha_to_5, 25
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[5];
    assign out[1] = in[4] ^ in[6];
    assign out[2] = in[5] ^ in[7];
    assign out[3] = in[6] ^ in[8];
    assign out[4] = in[7] ^ in[9];
    assign out[5] = in[8] ^ in[10];
    assign out[6] = in[9] ^ in[11];
    assign out[7] = in[10] ^ in[12];
    assign out[8] = in[11] ^ in[13];
    assign out[9] = in[12] ^ in[14];
    assign out[10] = in[0] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[14];
    assign out[12] = in[1] ^ in[2];
    assign out[13] = in[2] ^ in[3];
    assign out[14] = in[3] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_006(in, out); // evaluated by alpha_to_5, 30
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[13];
    assign out[1] = in[1] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[14];
    assign out[3] = in[1] ^ in[3];
    assign out[4] = in[2] ^ in[4];
    assign out[5] = in[3] ^ in[5];
    assign out[6] = in[4] ^ in[6];
    assign out[7] = in[5] ^ in[7];
    assign out[8] = in[6] ^ in[8];
    assign out[9] = in[7] ^ in[9];
    assign out[10] = in[8] ^ in[10];
    assign out[11] = in[9] ^ in[11];
    assign out[12] = in[10] ^ in[12];
    assign out[13] = in[11] ^ in[13];
    assign out[14] = in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_007(in, out); // evaluated by alpha_to_5, 35
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[10];
    assign out[1] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[2] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[3] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[14];
    assign out[8] = in[1] ^ in[3];
    assign out[9] = in[2] ^ in[4];
    assign out[10] = in[3] ^ in[5];
    assign out[11] = in[4] ^ in[6];
    assign out[12] = in[5] ^ in[7];
    assign out[13] = in[6] ^ in[8];
    assign out[14] = in[7] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_008(in, out); // evaluated by alpha_to_5, 40
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[14];
    assign out[13] = in[1] ^ in[3];
    assign out[14] = in[2] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_009(in, out); // evaluated by alpha_to_5, 45
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[12];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[5] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[6] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[7] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[8] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[9] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[10] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[11] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[12] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_010(in, out); // evaluated by alpha_to_5, 50
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[1] = in[7] ^ in[11];
    assign out[2] = in[8] ^ in[12];
    assign out[3] = in[9] ^ in[13];
    assign out[4] = in[10] ^ in[14];
    assign out[5] = in[0] ^ in[11];
    assign out[6] = in[0] ^ in[1] ^ in[12];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[10] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[11] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[12] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[13] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[14] = in[6] ^ in[7] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_011(in, out); // evaluated by alpha_to_5, 55
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[1] = in[2] ^ in[6];
    assign out[2] = in[3] ^ in[7];
    assign out[3] = in[4] ^ in[8];
    assign out[4] = in[5] ^ in[9];
    assign out[5] = in[6] ^ in[10];
    assign out[6] = in[7] ^ in[11];
    assign out[7] = in[8] ^ in[12];
    assign out[8] = in[9] ^ in[13];
    assign out[9] = in[10] ^ in[14];
    assign out[10] = in[0] ^ in[11];
    assign out[11] = in[0] ^ in[1] ^ in[12];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[3] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_012(in, out); // evaluated by alpha_to_5, 60
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[11];
    assign out[1] = in[1] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[14];
    assign out[5] = in[1] ^ in[5];
    assign out[6] = in[2] ^ in[6];
    assign out[7] = in[3] ^ in[7];
    assign out[8] = in[4] ^ in[8];
    assign out[9] = in[5] ^ in[9];
    assign out[10] = in[6] ^ in[10];
    assign out[11] = in[7] ^ in[11];
    assign out[12] = in[8] ^ in[12];
    assign out[13] = in[9] ^ in[13];
    assign out[14] = in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_013(in, out); // evaluated by alpha_to_5, 65
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[6] ^ in[10];
    assign out[1] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[2] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[3] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[4] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[6] = in[1] ^ in[11] ^ in[12];
    assign out[7] = in[2] ^ in[12] ^ in[13];
    assign out[8] = in[3] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[4] ^ in[14];
    assign out[10] = in[1] ^ in[5];
    assign out[11] = in[2] ^ in[6];
    assign out[12] = in[3] ^ in[7];
    assign out[13] = in[4] ^ in[8];
    assign out[14] = in[5] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_014(in, out); // evaluated by alpha_to_5, 70
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[5];
    assign out[1] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[2] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[3] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[4] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[5] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[6] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[7] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[8] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[9] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[11] = in[1] ^ in[11] ^ in[12];
    assign out[12] = in[2] ^ in[12] ^ in[13];
    assign out[13] = in[3] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[4] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_015(in, out); // evaluated by alpha_to_5, 75
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[3] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[4] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[7] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[8] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[9] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[10] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[11] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[12] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[13] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[14] = in[9] ^ in[10] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_016(in, out); // evaluated by alpha_to_5, 80
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[1] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[2] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[3] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[12] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[13] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[14] = in[4] ^ in[5] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_017(in, out); // evaluated by alpha_to_5, 85
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[2] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[3] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[4] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[5] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[6] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[7] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[8] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[9] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[10] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[13] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[14] = in[0] ^ in[3] ^ in[4] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_018(in, out); // evaluated by alpha_to_5, 90
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[8] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[9] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[10] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[11] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[12] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[13] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[8] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_019(in, out); // evaluated by alpha_to_5, 95
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[1] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[2] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[3] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[12] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[13] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[14] = in[3] ^ in[5] ^ in[7] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_020(in, out); // evaluated by alpha_to_5, 100
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[5] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_021(in, out); // evaluated by alpha_to_5, 105
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[8];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[9] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[10] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[11] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[12] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_022(in, out); // evaluated by alpha_to_5, 110
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[1] = in[3] ^ in[11];
    assign out[2] = in[4] ^ in[12];
    assign out[3] = in[5] ^ in[13];
    assign out[4] = in[6] ^ in[14];
    assign out[5] = in[0] ^ in[7];
    assign out[6] = in[0] ^ in[1] ^ in[8];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[14] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_023(in, out); // evaluated by alpha_to_5, 115
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[1] = in[6] ^ in[12] ^ in[13];
    assign out[2] = in[7] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[8] ^ in[14];
    assign out[4] = in[1] ^ in[9];
    assign out[5] = in[2] ^ in[10];
    assign out[6] = in[3] ^ in[11];
    assign out[7] = in[4] ^ in[12];
    assign out[8] = in[5] ^ in[13];
    assign out[9] = in[6] ^ in[14];
    assign out[10] = in[0] ^ in[7];
    assign out[11] = in[0] ^ in[1] ^ in[8];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_024(in, out); // evaluated by alpha_to_5, 120
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[7];
    assign out[1] = in[1] ^ in[7] ^ in[8];
    assign out[2] = in[2] ^ in[8] ^ in[9];
    assign out[3] = in[3] ^ in[9] ^ in[10];
    assign out[4] = in[4] ^ in[10] ^ in[11];
    assign out[5] = in[5] ^ in[11] ^ in[12];
    assign out[6] = in[6] ^ in[12] ^ in[13];
    assign out[7] = in[7] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[8] ^ in[14];
    assign out[9] = in[1] ^ in[9];
    assign out[10] = in[2] ^ in[10];
    assign out[11] = in[3] ^ in[11];
    assign out[12] = in[4] ^ in[12];
    assign out[13] = in[5] ^ in[13];
    assign out[14] = in[6] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_025(in, out); // evaluated by alpha_to_5, 125
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[10];
    assign out[1] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[2] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[3] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[4] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[6] = in[1] ^ in[7] ^ in[8];
    assign out[7] = in[2] ^ in[8] ^ in[9];
    assign out[8] = in[3] ^ in[9] ^ in[10];
    assign out[9] = in[4] ^ in[10] ^ in[11];
    assign out[10] = in[5] ^ in[11] ^ in[12];
    assign out[11] = in[6] ^ in[12] ^ in[13];
    assign out[12] = in[7] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[8] ^ in[14];
    assign out[14] = in[1] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_026(in, out); // evaluated by alpha_to_5, 130
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[11] ^ in[12];
    assign out[1] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[2] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[6] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[7] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[8] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[9] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[11] = in[1] ^ in[7] ^ in[8];
    assign out[12] = in[2] ^ in[8] ^ in[9];
    assign out[13] = in[3] ^ in[9] ^ in[10];
    assign out[14] = in[4] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_027(in, out); // evaluated by alpha_to_5, 135
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[3] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[4] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[5] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[6] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[7] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[8] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[11] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[12] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[13] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[14] = in[5] ^ in[6] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_028(in, out); // evaluated by alpha_to_5, 140
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[1] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[2] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[3] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[4] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[8] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[9] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[10] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[11] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[12] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_029(in, out); // evaluated by alpha_to_5, 145
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[1] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[2] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[6] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[7] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[8] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[9] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[10] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[11] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[12] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[13] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[14] = in[3] ^ in[4] ^ in[9] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_030(in, out); // evaluated by alpha_to_5, 150
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[1] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[4] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[5] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[6] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[12] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[13] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[14] = in[4] ^ in[6] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_031(in, out); // evaluated by alpha_to_5, 155
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[2] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[3] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[9] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[10] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[11] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[12] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_005_alpha_to_032(in, out); // evaluated by alpha_to_5, 160
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[3] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_001(in, out); // evaluated by alpha_to_6, 6
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9];
    assign out[1] = in[9] ^ in[10];
    assign out[2] = in[10] ^ in[11];
    assign out[3] = in[11] ^ in[12];
    assign out[4] = in[12] ^ in[13];
    assign out[5] = in[13] ^ in[14];
    assign out[6] = in[0] ^ in[14];
    assign out[7] = in[1];
    assign out[8] = in[2];
    assign out[9] = in[3];
    assign out[10] = in[4];
    assign out[11] = in[5];
    assign out[12] = in[6];
    assign out[13] = in[7];
    assign out[14] = in[8];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_002(in, out); // evaluated by alpha_to_6, 12
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3];
    assign out[1] = in[3] ^ in[4];
    assign out[2] = in[4] ^ in[5];
    assign out[3] = in[5] ^ in[6];
    assign out[4] = in[6] ^ in[7];
    assign out[5] = in[7] ^ in[8];
    assign out[6] = in[8] ^ in[9];
    assign out[7] = in[9] ^ in[10];
    assign out[8] = in[10] ^ in[11];
    assign out[9] = in[11] ^ in[12];
    assign out[10] = in[12] ^ in[13];
    assign out[11] = in[13] ^ in[14];
    assign out[12] = in[0] ^ in[14];
    assign out[13] = in[1];
    assign out[14] = in[2];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_003(in, out); // evaluated by alpha_to_6, 18
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[12];
    assign out[1] = in[11] ^ in[13];
    assign out[2] = in[12] ^ in[14];
    assign out[3] = in[0] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[14];
    assign out[5] = in[1] ^ in[2];
    assign out[6] = in[2] ^ in[3];
    assign out[7] = in[3] ^ in[4];
    assign out[8] = in[4] ^ in[5];
    assign out[9] = in[5] ^ in[6];
    assign out[10] = in[6] ^ in[7];
    assign out[11] = in[7] ^ in[8];
    assign out[12] = in[8] ^ in[9];
    assign out[13] = in[9] ^ in[10];
    assign out[14] = in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_004(in, out); // evaluated by alpha_to_6, 24
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6];
    assign out[1] = in[5] ^ in[7];
    assign out[2] = in[6] ^ in[8];
    assign out[3] = in[7] ^ in[9];
    assign out[4] = in[8] ^ in[10];
    assign out[5] = in[9] ^ in[11];
    assign out[6] = in[10] ^ in[12];
    assign out[7] = in[11] ^ in[13];
    assign out[8] = in[12] ^ in[14];
    assign out[9] = in[0] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[14];
    assign out[11] = in[1] ^ in[2];
    assign out[12] = in[2] ^ in[3];
    assign out[13] = in[3] ^ in[4];
    assign out[14] = in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_005(in, out); // evaluated by alpha_to_6, 30
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[13];
    assign out[1] = in[1] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[14];
    assign out[3] = in[1] ^ in[3];
    assign out[4] = in[2] ^ in[4];
    assign out[5] = in[3] ^ in[5];
    assign out[6] = in[4] ^ in[6];
    assign out[7] = in[5] ^ in[7];
    assign out[8] = in[6] ^ in[8];
    assign out[9] = in[7] ^ in[9];
    assign out[10] = in[8] ^ in[10];
    assign out[11] = in[9] ^ in[11];
    assign out[12] = in[10] ^ in[12];
    assign out[13] = in[11] ^ in[13];
    assign out[14] = in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_006(in, out); // evaluated by alpha_to_6, 36
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[9];
    assign out[1] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[14];
    assign out[9] = in[1] ^ in[3];
    assign out[10] = in[2] ^ in[4];
    assign out[11] = in[3] ^ in[5];
    assign out[12] = in[4] ^ in[6];
    assign out[13] = in[5] ^ in[7];
    assign out[14] = in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_007(in, out); // evaluated by alpha_to_6, 42
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[4] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[5] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[6] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[7] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[8] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[9] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_008(in, out); // evaluated by alpha_to_6, 48
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[9] ^ in[13];
    assign out[2] = in[10] ^ in[14];
    assign out[3] = in[0] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_009(in, out); // evaluated by alpha_to_6, 54
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[1] = in[3] ^ in[7];
    assign out[2] = in[4] ^ in[8];
    assign out[3] = in[5] ^ in[9];
    assign out[4] = in[6] ^ in[10];
    assign out[5] = in[7] ^ in[11];
    assign out[6] = in[8] ^ in[12];
    assign out[7] = in[9] ^ in[13];
    assign out[8] = in[10] ^ in[14];
    assign out[9] = in[0] ^ in[11];
    assign out[10] = in[0] ^ in[1] ^ in[12];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[14] = in[2] ^ in[3] ^ in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_010(in, out); // evaluated by alpha_to_6, 60
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[11];
    assign out[1] = in[1] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[14];
    assign out[5] = in[1] ^ in[5];
    assign out[6] = in[2] ^ in[6];
    assign out[7] = in[3] ^ in[7];
    assign out[8] = in[4] ^ in[8];
    assign out[9] = in[5] ^ in[9];
    assign out[10] = in[6] ^ in[10];
    assign out[11] = in[7] ^ in[11];
    assign out[12] = in[8] ^ in[12];
    assign out[13] = in[9] ^ in[13];
    assign out[14] = in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_011(in, out); // evaluated by alpha_to_6, 66
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[9];
    assign out[1] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[2] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[3] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[4] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[5] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[14];
    assign out[11] = in[1] ^ in[5];
    assign out[12] = in[2] ^ in[6];
    assign out[13] = in[3] ^ in[7];
    assign out[14] = in[4] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_012(in, out); // evaluated by alpha_to_6, 72
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[4] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[5] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[6] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[7] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[8] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[9] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[10] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[11] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_013(in, out); // evaluated by alpha_to_6, 78
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[1] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[2] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[6] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[7] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[10] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[11] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[12] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[13] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[14] = in[6] ^ in[7] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_014(in, out); // evaluated by alpha_to_6, 84
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[2] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[3] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[4] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[5] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[6] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[7] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[8] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_015(in, out); // evaluated by alpha_to_6, 90
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[8] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[9] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[10] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[11] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[12] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[13] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[8] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_016(in, out); // evaluated by alpha_to_6, 96
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[14] = in[2] ^ in[4] ^ in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_017(in, out); // evaluated by alpha_to_6, 102
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[6] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[7] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[8] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[9] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_018(in, out); // evaluated by alpha_to_6, 108
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[5] ^ in[13];
    assign out[2] = in[6] ^ in[14];
    assign out[3] = in[0] ^ in[7];
    assign out[4] = in[0] ^ in[1] ^ in[8];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_019(in, out); // evaluated by alpha_to_6, 114
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[1] = in[7] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[8] ^ in[14];
    assign out[3] = in[1] ^ in[9];
    assign out[4] = in[2] ^ in[10];
    assign out[5] = in[3] ^ in[11];
    assign out[6] = in[4] ^ in[12];
    assign out[7] = in[5] ^ in[13];
    assign out[8] = in[6] ^ in[14];
    assign out[9] = in[0] ^ in[7];
    assign out[10] = in[0] ^ in[1] ^ in[8];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_020(in, out); // evaluated by alpha_to_6, 120
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[7];
    assign out[1] = in[1] ^ in[7] ^ in[8];
    assign out[2] = in[2] ^ in[8] ^ in[9];
    assign out[3] = in[3] ^ in[9] ^ in[10];
    assign out[4] = in[4] ^ in[10] ^ in[11];
    assign out[5] = in[5] ^ in[11] ^ in[12];
    assign out[6] = in[6] ^ in[12] ^ in[13];
    assign out[7] = in[7] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[8] ^ in[14];
    assign out[9] = in[1] ^ in[9];
    assign out[10] = in[2] ^ in[10];
    assign out[11] = in[3] ^ in[11];
    assign out[12] = in[4] ^ in[12];
    assign out[13] = in[5] ^ in[13];
    assign out[14] = in[6] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_021(in, out); // evaluated by alpha_to_6, 126
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[9];
    assign out[1] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[2] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[3] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[4] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[5] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[7] = in[1] ^ in[7] ^ in[8];
    assign out[8] = in[2] ^ in[8] ^ in[9];
    assign out[9] = in[3] ^ in[9] ^ in[10];
    assign out[10] = in[4] ^ in[10] ^ in[11];
    assign out[11] = in[5] ^ in[11] ^ in[12];
    assign out[12] = in[6] ^ in[12] ^ in[13];
    assign out[13] = in[7] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[8] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_022(in, out); // evaluated by alpha_to_6, 132
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[9] ^ in[10];
    assign out[1] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[2] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[3] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[4] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[8] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[9] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[10] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[11] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[13] = in[1] ^ in[7] ^ in[8];
    assign out[14] = in[2] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_023(in, out); // evaluated by alpha_to_6, 138
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[1] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[2] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[6] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[7] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[8] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[9] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[10] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[11] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[14] = in[2] ^ in[3] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_024(in, out); // evaluated by alpha_to_6, 144
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[1] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[6] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[7] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[8] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[12] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[13] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[14] = in[4] ^ in[5] ^ in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_025(in, out); // evaluated by alpha_to_6, 150
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[1] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[4] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[5] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[6] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[12] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[13] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[14] = in[4] ^ in[6] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_026(in, out); // evaluated by alpha_to_6, 156
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[10] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[11] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[12] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_027(in, out); // evaluated by alpha_to_6, 162
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[4] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[5] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[6] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[9] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_028(in, out); // evaluated by alpha_to_6, 168
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[2] = in[2] ^ in[6] ^ in[10] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[8] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[9] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[10] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_029(in, out); // evaluated by alpha_to_6, 174
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[1] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[3] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[4] = in[2] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[5] = in[3] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[4] ^ in[8] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[8] = in[2] ^ in[6] ^ in[10] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[8] ^ in[12];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[9] ^ in[13];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[10] ^ in[14];
    assign out[13] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
    assign out[14] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_030(in, out); // evaluated by alpha_to_6, 180
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[1] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[5] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[6] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[7] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[9] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[10] = in[2] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[11] = in[3] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[4] ^ in[8] ^ in[12] ^ in[14];
    assign out[13] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[14] = in[2] ^ in[6] ^ in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_031(in, out); // evaluated by alpha_to_6, 186
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[2] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[12] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[13] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_006_alpha_to_032(in, out); // evaluated by alpha_to_6, 192
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_001(in, out); // evaluated by alpha_to_7, 7
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8];
    assign out[1] = in[8] ^ in[9];
    assign out[2] = in[9] ^ in[10];
    assign out[3] = in[10] ^ in[11];
    assign out[4] = in[11] ^ in[12];
    assign out[5] = in[12] ^ in[13];
    assign out[6] = in[13] ^ in[14];
    assign out[7] = in[0] ^ in[14];
    assign out[8] = in[1];
    assign out[9] = in[2];
    assign out[10] = in[3];
    assign out[11] = in[4];
    assign out[12] = in[5];
    assign out[13] = in[6];
    assign out[14] = in[7];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_002(in, out); // evaluated by alpha_to_7, 14
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1];
    assign out[1] = in[1] ^ in[2];
    assign out[2] = in[2] ^ in[3];
    assign out[3] = in[3] ^ in[4];
    assign out[4] = in[4] ^ in[5];
    assign out[5] = in[5] ^ in[6];
    assign out[6] = in[6] ^ in[7];
    assign out[7] = in[7] ^ in[8];
    assign out[8] = in[8] ^ in[9];
    assign out[9] = in[9] ^ in[10];
    assign out[10] = in[10] ^ in[11];
    assign out[11] = in[11] ^ in[12];
    assign out[12] = in[12] ^ in[13];
    assign out[13] = in[13] ^ in[14];
    assign out[14] = in[0] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_003(in, out); // evaluated by alpha_to_7, 21
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[9];
    assign out[1] = in[8] ^ in[10];
    assign out[2] = in[9] ^ in[11];
    assign out[3] = in[10] ^ in[12];
    assign out[4] = in[11] ^ in[13];
    assign out[5] = in[12] ^ in[14];
    assign out[6] = in[0] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[14];
    assign out[8] = in[1] ^ in[2];
    assign out[9] = in[2] ^ in[3];
    assign out[10] = in[3] ^ in[4];
    assign out[11] = in[4] ^ in[5];
    assign out[12] = in[5] ^ in[6];
    assign out[13] = in[6] ^ in[7];
    assign out[14] = in[7] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_004(in, out); // evaluated by alpha_to_7, 28
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2];
    assign out[1] = in[1] ^ in[3];
    assign out[2] = in[2] ^ in[4];
    assign out[3] = in[3] ^ in[5];
    assign out[4] = in[4] ^ in[6];
    assign out[5] = in[5] ^ in[7];
    assign out[6] = in[6] ^ in[8];
    assign out[7] = in[7] ^ in[9];
    assign out[8] = in[8] ^ in[10];
    assign out[9] = in[9] ^ in[11];
    assign out[10] = in[10] ^ in[12];
    assign out[11] = in[11] ^ in[13];
    assign out[12] = in[12] ^ in[14];
    assign out[13] = in[0] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_005(in, out); // evaluated by alpha_to_7, 35
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[10];
    assign out[1] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[2] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[3] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[14];
    assign out[8] = in[1] ^ in[3];
    assign out[9] = in[2] ^ in[4];
    assign out[10] = in[3] ^ in[5];
    assign out[11] = in[4] ^ in[6];
    assign out[12] = in[5] ^ in[7];
    assign out[13] = in[6] ^ in[8];
    assign out[14] = in[7] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_006(in, out); // evaluated by alpha_to_7, 42
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[4] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[5] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[6] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[7] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[8] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[9] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_007(in, out); // evaluated by alpha_to_7, 49
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[1] = in[8] ^ in[12];
    assign out[2] = in[9] ^ in[13];
    assign out[3] = in[10] ^ in[14];
    assign out[4] = in[0] ^ in[11];
    assign out[5] = in[0] ^ in[1] ^ in[12];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[9] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[10] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[11] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[12] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[13] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[14] = in[7] ^ in[8] ^ in[9] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_008(in, out); // evaluated by alpha_to_7, 56
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[1] = in[1] ^ in[5];
    assign out[2] = in[2] ^ in[6];
    assign out[3] = in[3] ^ in[7];
    assign out[4] = in[4] ^ in[8];
    assign out[5] = in[5] ^ in[9];
    assign out[6] = in[6] ^ in[10];
    assign out[7] = in[7] ^ in[11];
    assign out[8] = in[8] ^ in[12];
    assign out[9] = in[9] ^ in[13];
    assign out[10] = in[10] ^ in[14];
    assign out[11] = in[0] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_009(in, out); // evaluated by alpha_to_7, 63
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[12];
    assign out[1] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[2] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[4] = in[1] ^ in[11] ^ in[12];
    assign out[5] = in[2] ^ in[12] ^ in[13];
    assign out[6] = in[3] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[4] ^ in[14];
    assign out[8] = in[1] ^ in[5];
    assign out[9] = in[2] ^ in[6];
    assign out[10] = in[3] ^ in[7];
    assign out[11] = in[4] ^ in[8];
    assign out[12] = in[5] ^ in[9];
    assign out[13] = in[6] ^ in[10];
    assign out[14] = in[7] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_010(in, out); // evaluated by alpha_to_7, 70
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[5];
    assign out[1] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[2] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[3] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[4] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[5] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[6] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[7] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[8] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[9] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[11] = in[1] ^ in[11] ^ in[12];
    assign out[12] = in[2] ^ in[12] ^ in[13];
    assign out[13] = in[3] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[4] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_011(in, out); // evaluated by alpha_to_7, 77
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[1] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[2] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[5] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[6] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[9] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[10] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[11] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[12] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[13] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[14] = in[7] ^ in[8] ^ in[11] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_012(in, out); // evaluated by alpha_to_7, 84
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[2] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[3] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[4] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[5] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[6] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[7] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[8] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_013(in, out); // evaluated by alpha_to_7, 91
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[9] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[10] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[11] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[12] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[13] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[14] = in[7] ^ in[9] ^ in[11] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_014(in, out); // evaluated by alpha_to_7, 98
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[4] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[5] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[6] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_015(in, out); // evaluated by alpha_to_7, 105
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[8];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[9] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[10] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[11] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[12] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[13] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_016(in, out); // evaluated by alpha_to_7, 112
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[1] = in[1] ^ in[9];
    assign out[2] = in[2] ^ in[10];
    assign out[3] = in[3] ^ in[11];
    assign out[4] = in[4] ^ in[12];
    assign out[5] = in[5] ^ in[13];
    assign out[6] = in[6] ^ in[14];
    assign out[7] = in[0] ^ in[7];
    assign out[8] = in[0] ^ in[1] ^ in[8];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_017(in, out); // evaluated by alpha_to_7, 119
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[8];
    assign out[1] = in[2] ^ in[8] ^ in[9];
    assign out[2] = in[3] ^ in[9] ^ in[10];
    assign out[3] = in[4] ^ in[10] ^ in[11];
    assign out[4] = in[5] ^ in[11] ^ in[12];
    assign out[5] = in[6] ^ in[12] ^ in[13];
    assign out[6] = in[7] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[8] ^ in[14];
    assign out[8] = in[1] ^ in[9];
    assign out[9] = in[2] ^ in[10];
    assign out[10] = in[3] ^ in[11];
    assign out[11] = in[4] ^ in[12];
    assign out[12] = in[5] ^ in[13];
    assign out[13] = in[6] ^ in[14];
    assign out[14] = in[0] ^ in[7];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_018(in, out); // evaluated by alpha_to_7, 126
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[9];
    assign out[1] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[2] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[3] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[4] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[5] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[7] = in[1] ^ in[7] ^ in[8];
    assign out[8] = in[2] ^ in[8] ^ in[9];
    assign out[9] = in[3] ^ in[9] ^ in[10];
    assign out[10] = in[4] ^ in[10] ^ in[11];
    assign out[11] = in[5] ^ in[11] ^ in[12];
    assign out[12] = in[6] ^ in[12] ^ in[13];
    assign out[13] = in[7] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[8] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_019(in, out); // evaluated by alpha_to_7, 133
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[8] ^ in[9];
    assign out[1] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[2] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[3] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[4] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[5] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[6] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[9] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[10] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[11] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[12] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[14] = in[1] ^ in[7] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_020(in, out); // evaluated by alpha_to_7, 140
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[1] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[2] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[3] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[4] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[8] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[9] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[10] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[11] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[12] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_021(in, out); // evaluated by alpha_to_7, 147
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[1] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[2] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[3] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[4] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[8] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[9] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[10] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[11] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[12] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[7] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_022(in, out); // evaluated by alpha_to_7, 154
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[1] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[8] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[9] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[10] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[11] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_023(in, out); // evaluated by alpha_to_7, 161
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[1] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
    assign out[2] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[3] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[4] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[5] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[9] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[10] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[14] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_024(in, out); // evaluated by alpha_to_7, 168
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[2] = in[2] ^ in[6] ^ in[10] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[8] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[9] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[10] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_025(in, out); // evaluated by alpha_to_7, 175
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
    assign out[1] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[2] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[4] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[5] = in[2] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[6] = in[3] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[4] ^ in[8] ^ in[12] ^ in[14];
    assign out[8] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[9] = in[2] ^ in[6] ^ in[10] ^ in[14];
    assign out[10] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[11] = in[0] ^ in[1] ^ in[4] ^ in[8] ^ in[12];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[9] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[10] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_026(in, out); // evaluated by alpha_to_7, 182
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[1] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[4] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[5] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[12] = in[2] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[13] = in[3] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[4] ^ in[8] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_027(in, out); // evaluated by alpha_to_7, 189
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[1] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[2] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13];
    assign out[3] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[4] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[5] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[6] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[10] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[11] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[12] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[14] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_028(in, out); // evaluated by alpha_to_7, 196
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_029(in, out); // evaluated by alpha_to_7, 203
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[1] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[6] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[14];
    assign out[7] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[8] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[10] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[11] = in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[12] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_030(in, out); // evaluated by alpha_to_7, 210
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[1] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_031(in, out); // evaluated by alpha_to_7, 217
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[9];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[0] ^ in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[1] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_007_alpha_to_032(in, out); // evaluated by alpha_to_7, 224
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[2];
    assign out[2] = in[0] ^ in[1] ^ in[3];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[4];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[5];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[6];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[7];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[8];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[9];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_001(in, out); // evaluated by alpha_to_8, 8
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7];
    assign out[1] = in[7] ^ in[8];
    assign out[2] = in[8] ^ in[9];
    assign out[3] = in[9] ^ in[10];
    assign out[4] = in[10] ^ in[11];
    assign out[5] = in[11] ^ in[12];
    assign out[6] = in[12] ^ in[13];
    assign out[7] = in[13] ^ in[14];
    assign out[8] = in[0] ^ in[14];
    assign out[9] = in[1];
    assign out[10] = in[2];
    assign out[11] = in[3];
    assign out[12] = in[4];
    assign out[13] = in[5];
    assign out[14] = in[6];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_002(in, out); // evaluated by alpha_to_8, 16
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[13] ^ in[14];
    assign out[1] = in[0] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[14];
    assign out[3] = in[1] ^ in[2];
    assign out[4] = in[2] ^ in[3];
    assign out[5] = in[3] ^ in[4];
    assign out[6] = in[4] ^ in[5];
    assign out[7] = in[5] ^ in[6];
    assign out[8] = in[6] ^ in[7];
    assign out[9] = in[7] ^ in[8];
    assign out[10] = in[8] ^ in[9];
    assign out[11] = in[9] ^ in[10];
    assign out[12] = in[10] ^ in[11];
    assign out[13] = in[11] ^ in[12];
    assign out[14] = in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_003(in, out); // evaluated by alpha_to_8, 24
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6];
    assign out[1] = in[5] ^ in[7];
    assign out[2] = in[6] ^ in[8];
    assign out[3] = in[7] ^ in[9];
    assign out[4] = in[8] ^ in[10];
    assign out[5] = in[9] ^ in[11];
    assign out[6] = in[10] ^ in[12];
    assign out[7] = in[11] ^ in[13];
    assign out[8] = in[12] ^ in[14];
    assign out[9] = in[0] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[14];
    assign out[11] = in[1] ^ in[2];
    assign out[12] = in[2] ^ in[3];
    assign out[13] = in[3] ^ in[4];
    assign out[14] = in[4] ^ in[5];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_004(in, out); // evaluated by alpha_to_8, 32
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[13];
    assign out[1] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[14];
    assign out[5] = in[1] ^ in[3];
    assign out[6] = in[2] ^ in[4];
    assign out[7] = in[3] ^ in[5];
    assign out[8] = in[4] ^ in[6];
    assign out[9] = in[5] ^ in[7];
    assign out[10] = in[6] ^ in[8];
    assign out[11] = in[7] ^ in[9];
    assign out[12] = in[8] ^ in[10];
    assign out[13] = in[9] ^ in[11];
    assign out[14] = in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_005(in, out); // evaluated by alpha_to_8, 40
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[14];
    assign out[13] = in[1] ^ in[3];
    assign out[14] = in[2] ^ in[4];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_006(in, out); // evaluated by alpha_to_8, 48
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[9] ^ in[13];
    assign out[2] = in[10] ^ in[14];
    assign out[3] = in[0] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_007(in, out); // evaluated by alpha_to_8, 56
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4];
    assign out[1] = in[1] ^ in[5];
    assign out[2] = in[2] ^ in[6];
    assign out[3] = in[3] ^ in[7];
    assign out[4] = in[4] ^ in[8];
    assign out[5] = in[5] ^ in[9];
    assign out[6] = in[6] ^ in[10];
    assign out[7] = in[7] ^ in[11];
    assign out[8] = in[8] ^ in[12];
    assign out[9] = in[9] ^ in[13];
    assign out[10] = in[10] ^ in[14];
    assign out[11] = in[0] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_008(in, out); // evaluated by alpha_to_8, 64
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[11];
    assign out[1] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[2] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[3] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[5] = in[1] ^ in[11] ^ in[12];
    assign out[6] = in[2] ^ in[12] ^ in[13];
    assign out[7] = in[3] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[4] ^ in[14];
    assign out[9] = in[1] ^ in[5];
    assign out[10] = in[2] ^ in[6];
    assign out[11] = in[3] ^ in[7];
    assign out[12] = in[4] ^ in[8];
    assign out[13] = in[5] ^ in[9];
    assign out[14] = in[6] ^ in[10];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_009(in, out); // evaluated by alpha_to_8, 72
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[4] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[5] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[6] = in[4] ^ in[5] ^ in[8] ^ in[9];
    assign out[7] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[8] = in[6] ^ in[7] ^ in[10] ^ in[11];
    assign out[9] = in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[10] = in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[11] = in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_010(in, out); // evaluated by alpha_to_8, 80
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[9] ^ in[10];
    assign out[1] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[2] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[3] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6];
    assign out[12] = in[2] ^ in[3] ^ in[6] ^ in[7];
    assign out[13] = in[3] ^ in[4] ^ in[7] ^ in[8];
    assign out[14] = in[4] ^ in[5] ^ in[8] ^ in[9];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_011(in, out); // evaluated by alpha_to_8, 88
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[6] = in[2] ^ in[4] ^ in[6] ^ in[8];
    assign out[7] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[8] = in[4] ^ in[6] ^ in[8] ^ in[10];
    assign out[9] = in[5] ^ in[7] ^ in[9] ^ in[11];
    assign out[10] = in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[11] = in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[12] = in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_012(in, out); // evaluated by alpha_to_8, 96
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[7] ^ in[9];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[3] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[4] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[5] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[5] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[7];
    assign out[14] = in[2] ^ in[4] ^ in[6] ^ in[8];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_013(in, out); // evaluated by alpha_to_8, 104
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[11] = in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[12] = in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[13] = in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_014(in, out); // evaluated by alpha_to_8, 112
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8];
    assign out[1] = in[1] ^ in[9];
    assign out[2] = in[2] ^ in[10];
    assign out[3] = in[3] ^ in[11];
    assign out[4] = in[4] ^ in[12];
    assign out[5] = in[5] ^ in[13];
    assign out[6] = in[6] ^ in[14];
    assign out[7] = in[0] ^ in[7];
    assign out[8] = in[0] ^ in[1] ^ in[8];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[9];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[10];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_015(in, out); // evaluated by alpha_to_8, 120
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[7];
    assign out[1] = in[1] ^ in[7] ^ in[8];
    assign out[2] = in[2] ^ in[8] ^ in[9];
    assign out[3] = in[3] ^ in[9] ^ in[10];
    assign out[4] = in[4] ^ in[10] ^ in[11];
    assign out[5] = in[5] ^ in[11] ^ in[12];
    assign out[6] = in[6] ^ in[12] ^ in[13];
    assign out[7] = in[7] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[8] ^ in[14];
    assign out[9] = in[1] ^ in[9];
    assign out[10] = in[2] ^ in[10];
    assign out[11] = in[3] ^ in[11];
    assign out[12] = in[4] ^ in[12];
    assign out[13] = in[5] ^ in[13];
    assign out[14] = in[6] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_016(in, out); // evaluated by alpha_to_8, 128
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[7] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[4] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[5] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[6] = in[4] ^ in[5] ^ in[12] ^ in[13];
    assign out[7] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[6] ^ in[7] ^ in[14];
    assign out[9] = in[1] ^ in[7] ^ in[8];
    assign out[10] = in[2] ^ in[8] ^ in[9];
    assign out[11] = in[3] ^ in[9] ^ in[10];
    assign out[12] = in[4] ^ in[10] ^ in[11];
    assign out[13] = in[5] ^ in[11] ^ in[12];
    assign out[14] = in[6] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_017(in, out); // evaluated by alpha_to_8, 136
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[4] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[5] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[6] = in[4] ^ in[5] ^ in[10] ^ in[12];
    assign out[7] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[8] = in[6] ^ in[7] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[7] ^ in[8] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[8] ^ in[9] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[9] ^ in[10];
    assign out[12] = in[2] ^ in[3] ^ in[10] ^ in[11];
    assign out[13] = in[3] ^ in[4] ^ in[11] ^ in[12];
    assign out[14] = in[4] ^ in[5] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_018(in, out); // evaluated by alpha_to_8, 144
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[11] ^ in[13];
    assign out[1] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[6] = in[2] ^ in[4] ^ in[10] ^ in[12];
    assign out[7] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[8] = in[4] ^ in[6] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[5] ^ in[7] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[6] ^ in[8] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[7] ^ in[9];
    assign out[12] = in[2] ^ in[3] ^ in[8] ^ in[10];
    assign out[13] = in[3] ^ in[4] ^ in[9] ^ in[11];
    assign out[14] = in[4] ^ in[5] ^ in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_019(in, out); // evaluated by alpha_to_8, 152
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[11] ^ in[13];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[6] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
    assign out[7] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[4] ^ in[6] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[5] ^ in[7] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[6] ^ in[8] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[7] ^ in[9] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[8] ^ in[10] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[9] ^ in[11];
    assign out[14] = in[2] ^ in[4] ^ in[10] ^ in[12];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_020(in, out); // evaluated by alpha_to_8, 160
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[2] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[3] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[7] ^ in[8] ^ in[9] ^ in[10];
    assign out[14] = in[2] ^ in[4] ^ in[8] ^ in[9] ^ in[10] ^ in[11];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_021(in, out); // evaluated by alpha_to_8, 168
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[9] ^ in[10] ^ in[11] ^ in[12];
    assign out[1] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[2] = in[2] ^ in[6] ^ in[10] ^ in[14];
    assign out[3] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[4] = in[0] ^ in[1] ^ in[4] ^ in[8] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[9] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[10] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[8] ^ in[12];
    assign out[9] = in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[9] ^ in[13];
    assign out[10] = in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_022(in, out); // evaluated by alpha_to_8, 176
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[7] ^ in[11];
    assign out[1] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[2] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[3] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[5] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[6] = in[2] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
    assign out[7] = in[3] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[4] ^ in[8] ^ in[12] ^ in[14];
    assign out[9] = in[1] ^ in[5] ^ in[9] ^ in[13];
    assign out[10] = in[2] ^ in[6] ^ in[10] ^ in[14];
    assign out[11] = in[0] ^ in[3] ^ in[7] ^ in[11];
    assign out[12] = in[0] ^ in[1] ^ in[4] ^ in[8] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[5] ^ in[9] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[6] ^ in[10] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_023(in, out); // evaluated by alpha_to_8, 184
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[7] ^ in[11] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[6] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[7] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[4] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[9] = in[1] ^ in[5] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[10] = in[2] ^ in[6] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
    assign out[11] = in[3] ^ in[7] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[4] ^ in[8] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[5] ^ in[9] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[6] ^ in[10] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_024(in, out); // evaluated by alpha_to_8, 192
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[3] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[4] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[5] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[10] ^ in[11] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[11] ^ in[12];
    assign out[14] = in[2] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_025(in, out); // evaluated by alpha_to_8, 200
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[5] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[7] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[8] = in[2] ^ in[3] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[9] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[12] = in[2] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
    assign out[13] = in[0] ^ in[3] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[4] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_026(in, out); // evaluated by alpha_to_8, 208
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[2] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[1] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[2] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[3] = in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[5] = in[1] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[6] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[7] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12];
    assign out[13] = in[0] ^ in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[9] ^ in[11] ^ in[13];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[4] ^ in[6] ^ in[8] ^ in[10] ^ in[12] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_027(in, out); // evaluated by alpha_to_8, 216
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[1] ^ in[3] ^ in[5] ^ in[7] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[6] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
    assign out[7] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[8] = in[0] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[9] = in[1] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[10] = in[0] ^ in[2] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[11] = in[1] ^ in[3] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[12] = in[0] ^ in[2] ^ in[4] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[13] = in[1] ^ in[3] ^ in[5] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[14] = in[0] ^ in[2] ^ in[4] ^ in[6] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_028(in, out); // evaluated by alpha_to_8, 224
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[2];
    assign out[2] = in[0] ^ in[1] ^ in[3];
    assign out[3] = in[0] ^ in[1] ^ in[2] ^ in[4];
    assign out[4] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[5];
    assign out[5] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[6];
    assign out[6] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[7];
    assign out[7] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[8];
    assign out[8] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[9];
    assign out[9] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[10];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[11];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[12];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[13];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[14];
    assign out[14] = in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[7] ^ in[8] ^ in[9] ^ in[10] ^ in[11] ^ in[12] ^ in[13];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_029(in, out); // evaluated by alpha_to_8, 232
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[6] ^ in[8];
    assign out[1] = in[7] ^ in[8] ^ in[9];
    assign out[2] = in[8] ^ in[9] ^ in[10];
    assign out[3] = in[9] ^ in[10] ^ in[11];
    assign out[4] = in[10] ^ in[11] ^ in[12];
    assign out[5] = in[11] ^ in[12] ^ in[13];
    assign out[6] = in[12] ^ in[13] ^ in[14];
    assign out[7] = in[0] ^ in[13] ^ in[14];
    assign out[8] = in[1] ^ in[14];
    assign out[9] = in[0] ^ in[2];
    assign out[10] = in[0] ^ in[1] ^ in[3];
    assign out[11] = in[0] ^ in[1] ^ in[2] ^ in[4];
    assign out[12] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[5];
    assign out[13] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[6];
    assign out[14] = in[0] ^ in[1] ^ in[2] ^ in[3] ^ in[4] ^ in[5] ^ in[7];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_030(in, out); // evaluated by alpha_to_8, 240
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[0] ^ in[13] ^ in[14];
    assign out[1] = in[0] ^ in[1] ^ in[13];
    assign out[2] = in[0] ^ in[1] ^ in[2] ^ in[14];
    assign out[3] = in[1] ^ in[2] ^ in[3];
    assign out[4] = in[2] ^ in[3] ^ in[4];
    assign out[5] = in[3] ^ in[4] ^ in[5];
    assign out[6] = in[4] ^ in[5] ^ in[6];
    assign out[7] = in[5] ^ in[6] ^ in[7];
    assign out[8] = in[6] ^ in[7] ^ in[8];
    assign out[9] = in[7] ^ in[8] ^ in[9];
    assign out[10] = in[8] ^ in[9] ^ in[10];
    assign out[11] = in[9] ^ in[10] ^ in[11];
    assign out[12] = in[10] ^ in[11] ^ in[12];
    assign out[13] = in[11] ^ in[12] ^ in[13];
    assign out[14] = in[12] ^ in[13] ^ in[14];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_031(in, out); // evaluated by alpha_to_8, 248
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[5] ^ in[6] ^ in[7];
    assign out[1] = in[5] ^ in[8];
    assign out[2] = in[6] ^ in[9];
    assign out[3] = in[7] ^ in[10];
    assign out[4] = in[8] ^ in[11];
    assign out[5] = in[9] ^ in[12];
    assign out[6] = in[10] ^ in[13];
    assign out[7] = in[11] ^ in[14];
    assign out[8] = in[0] ^ in[12];
    assign out[9] = in[0] ^ in[1] ^ in[13];
    assign out[10] = in[0] ^ in[1] ^ in[2] ^ in[14];
    assign out[11] = in[1] ^ in[2] ^ in[3];
    assign out[12] = in[2] ^ in[3] ^ in[4];
    assign out[13] = in[3] ^ in[4] ^ in[5];
    assign out[14] = in[4] ^ in[5] ^ in[6];
endmodule

module cs_evaluation_matrix_slot_008_alpha_to_032(in, out); // evaluated by alpha_to_8, 256
`include "CS_parameters.vh"
    input wire [`GF_ORDER-1:0] in;
    output wire [`GF_ORDER-1:0] out;
    assign out[0] = in[11] ^ in[14];
    assign out[1] = in[0] ^ in[11] ^ in[12] ^ in[14];
    assign out[2] = in[1] ^ in[12] ^ in[13];
    assign out[3] = in[2] ^ in[13] ^ in[14];
    assign out[4] = in[0] ^ in[3] ^ in[14];
    assign out[5] = in[1] ^ in[4];
    assign out[6] = in[2] ^ in[5];
    assign out[7] = in[3] ^ in[6];
    assign out[8] = in[4] ^ in[7];
    assign out[9] = in[5] ^ in[8];
    assign out[10] = in[6] ^ in[9];
    assign out[11] = in[7] ^ in[10];
    assign out[12] = in[8] ^ in[11];
    assign out[13] = in[9] ^ in[12];
    assign out[14] = in[10] ^ in[13];
endmodule
