//////////////////////////////////////////////////////////////////////////////////
// syndrome_calculator.v for Cosmos OpenSSD
// Copyright (c) 2015 Hanyang University ENC Lab.
// Contributed by Ilyong Jung <iyjung@enc.hanyang.ac.kr>
//                Yong Ho Song <yhsong@enc.hanyang.ac.kr>
//
// This file is part of Cosmos OpenSSD.
//
// Cosmos OpenSSD is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// Cosmos OpenSSD is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Cosmos OpenSSD; see the file COPYING.
// If not, see <http://www.gnu.org/licenses/>. 
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: ENC Lab. <http://enc.hanyang.ac.kr>
// Engineer: Ilyong Jung <iyjung@enc.hanyang.ac.kr>
// 
// Project Name: Cosmos OpenSSD
// Design Name: BCH Decoder
// Module Name: syndrome_calculator
// File Name: syndrome_calculator.v
//
// Version: v1.1.2-2KB_T32
//
// Description: 
//   - BCH decoder: syndrome calculator (SC) TOP module
//   - for data area
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Revision History:
//
// * v1.1.2
//   - temporary roll-back for releasing
//   - coding style of this version is not unified
//
// * v1.1.1
//   - minor modification for releasing
//
// * v1.1.0
//   - change state machine: buffered output
//
// * v1.0.0
//   - first draft
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module syndrome_calculator(
    clk,
    nRESET,
    
	sc_available,
	execute_sc,
    code_BUS_valid,
    code,
	
    sc_start,
    last_code_block_received,
	
	BRAM_write_enable,
	BRAM_write_address,
	BRAM_write_data,
    
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 63
	
	sdr_001,
    sdr_002,
    sdr_003,
    sdr_004,
    sdr_005,
    sdr_006,
    sdr_007,
    sdr_008,
    sdr_009,
    sdr_010,
    sdr_011,
    sdr_012,
    sdr_013,
    sdr_014,
    sdr_015,
    sdr_016,
    sdr_017,
    sdr_018,
    sdr_019,
    sdr_020,
    sdr_021,
    sdr_022,
    sdr_023,
    sdr_024,
    sdr_025,
    sdr_026,
    sdr_027,
    sdr_028,
    sdr_029,
    sdr_030,
    sdr_031,
    sdr_032,
    sdr_033,
    sdr_034,
    sdr_035,
    sdr_036,
    sdr_037,
    sdr_038,
    sdr_039,
    sdr_040,
    sdr_041,
    sdr_042,
    sdr_043,
    sdr_044,
    sdr_045,
    sdr_046,
    sdr_047,
    sdr_048,
    sdr_049,
    sdr_050,
    sdr_051,
    sdr_052,
    sdr_053,
    sdr_054,
    sdr_055,
    sdr_056,
    sdr_057,
    sdr_058,
    sdr_059,
    sdr_060,
    sdr_061,
    sdr_062,
    sdr_063,
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	sc_complete,
    error_detected
    );
	
`include "SC_parameters.vh"
	
	parameter SC_FSM_BIT = 8;
	parameter RESET_SC   = 8'b0000_0001; // RESET: syndrome calculator sequence reset
	parameter SDR_STwB   = 8'b0000_0010; // syndrome computation: start mode, BRAM write
	parameter SDR_FBwB   = 8'b0000_0100; // syndrome computation: feedback mode, BRAM write
	parameter SDR_FBwoB  = 8'b0000_1000; // syndrome computation: feedback mode
	parameter COD_T_PwB  = 8'b0001_0000; // code transmit paused, BRAM write pause
	parameter COD_T_PwoB = 8'b0010_0000; // code transmit paused
	parameter EVALUATION = 8'b0100_0000; // evaluation stage
	parameter SDR_OUT    = 8'b1000_0000; // syndrome out: finish
	
	
	
	input wire clk;
    input wire nRESET;
    
	output wire sc_available;
	input wire execute_sc; // syndrome calculation start command signal
    input wire code_BUS_valid; // code BUS strobe signal
    input wire [`SC_PARALLEL-1:0] code; // code block data BUS
    
	output wire sc_start; // [indicate] syndrome calculation start
    output wire last_code_block_received; // [indicate] last code block received
	
	output reg BRAM_write_enable; // BRAM write enable
	output wire [`MESSAGE_LENGTH_BIT-1:0] BRAM_write_address; // BRAM write address
	output wire [`SC_PARALLEL-1:0] BRAM_write_data; // BRAM write data
    
	output wire sc_complete; // [indicate] syndrome calculation complete
    output reg error_detected; // [indicate] some ERROR in code
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 63
	
	output reg [`S_OUT_BIT-1:0] sdr_001;
    output reg [`S_OUT_BIT-1:0] sdr_002;
    output reg [`S_OUT_BIT-1:0] sdr_003;
    output reg [`S_OUT_BIT-1:0] sdr_004;
    output reg [`S_OUT_BIT-1:0] sdr_005;
    output reg [`S_OUT_BIT-1:0] sdr_006;
    output reg [`S_OUT_BIT-1:0] sdr_007;
    output reg [`S_OUT_BIT-1:0] sdr_008;
    output reg [`S_OUT_BIT-1:0] sdr_009;
    output reg [`S_OUT_BIT-1:0] sdr_010;
    output reg [`S_OUT_BIT-1:0] sdr_011;
    output reg [`S_OUT_BIT-1:0] sdr_012;
    output reg [`S_OUT_BIT-1:0] sdr_013;
    output reg [`S_OUT_BIT-1:0] sdr_014;
    output reg [`S_OUT_BIT-1:0] sdr_015;
    output reg [`S_OUT_BIT-1:0] sdr_016;
    output reg [`S_OUT_BIT-1:0] sdr_017;
    output reg [`S_OUT_BIT-1:0] sdr_018;
    output reg [`S_OUT_BIT-1:0] sdr_019;
    output reg [`S_OUT_BIT-1:0] sdr_020;
    output reg [`S_OUT_BIT-1:0] sdr_021;
    output reg [`S_OUT_BIT-1:0] sdr_022;
    output reg [`S_OUT_BIT-1:0] sdr_023;
    output reg [`S_OUT_BIT-1:0] sdr_024;
    output reg [`S_OUT_BIT-1:0] sdr_025;
    output reg [`S_OUT_BIT-1:0] sdr_026;
    output reg [`S_OUT_BIT-1:0] sdr_027;
    output reg [`S_OUT_BIT-1:0] sdr_028;
    output reg [`S_OUT_BIT-1:0] sdr_029;
    output reg [`S_OUT_BIT-1:0] sdr_030;
    output reg [`S_OUT_BIT-1:0] sdr_031;
    output reg [`S_OUT_BIT-1:0] sdr_032;
    output reg [`S_OUT_BIT-1:0] sdr_033;
    output reg [`S_OUT_BIT-1:0] sdr_034;
    output reg [`S_OUT_BIT-1:0] sdr_035;
    output reg [`S_OUT_BIT-1:0] sdr_036;
    output reg [`S_OUT_BIT-1:0] sdr_037;
    output reg [`S_OUT_BIT-1:0] sdr_038;
    output reg [`S_OUT_BIT-1:0] sdr_039;
    output reg [`S_OUT_BIT-1:0] sdr_040;
    output reg [`S_OUT_BIT-1:0] sdr_041;
    output reg [`S_OUT_BIT-1:0] sdr_042;
    output reg [`S_OUT_BIT-1:0] sdr_043;
    output reg [`S_OUT_BIT-1:0] sdr_044;
    output reg [`S_OUT_BIT-1:0] sdr_045;
    output reg [`S_OUT_BIT-1:0] sdr_046;
    output reg [`S_OUT_BIT-1:0] sdr_047;
    output reg [`S_OUT_BIT-1:0] sdr_048;
    output reg [`S_OUT_BIT-1:0] sdr_049;
    output reg [`S_OUT_BIT-1:0] sdr_050;
    output reg [`S_OUT_BIT-1:0] sdr_051;
    output reg [`S_OUT_BIT-1:0] sdr_052;
    output reg [`S_OUT_BIT-1:0] sdr_053;
    output reg [`S_OUT_BIT-1:0] sdr_054;
    output reg [`S_OUT_BIT-1:0] sdr_055;
    output reg [`S_OUT_BIT-1:0] sdr_056;
    output reg [`S_OUT_BIT-1:0] sdr_057;
    output reg [`S_OUT_BIT-1:0] sdr_058;
    output reg [`S_OUT_BIT-1:0] sdr_059;
    output reg [`S_OUT_BIT-1:0] sdr_060;
    output reg [`S_OUT_BIT-1:0] sdr_061;
    output reg [`S_OUT_BIT-1:0] sdr_062;
    output reg [`S_OUT_BIT-1:0] sdr_063;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// total: 63
	
	wire [`S_OUT_BIT-1:0] evaluated_remainder_001;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_002;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_003;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_004;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_005;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_006;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_007;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_008;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_009;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_010;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_011;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_012;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_013;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_014;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_015;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_016;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_017;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_018;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_019;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_020;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_021;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_022;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_023;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_024;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_025;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_026;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_027;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_028;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_029;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_030;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_031;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_032;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_033;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_034;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_035;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_036;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_037;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_038;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_039;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_040;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_041;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_042;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_043;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_044;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_045;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_046;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_047;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_048;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_049;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_050;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_051;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_052;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_053;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_054;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_055;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_056;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_057;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_058;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_059;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_060;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_061;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_062;
    wire [`S_OUT_BIT-1:0] evaluated_remainder_063;
	
	                                          ///
	                                        /////
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////	
	
	// registered input
	reg [`SC_PARALLEL-1:0] code_b;
	
	// syndrome calculator FSM state
	reg [SC_FSM_BIT-1:0] cur_state;
	reg [SC_FSM_BIT-1:0] nxt_state;
	
	// internal counter
	reg [`SC_INPUT_LOOP_COUNT_BIT-1:0] counter;
	reg [2:0] output_counter;
	
	// registers for remainders
	reg [(`ECC_PARAM_T * `REMAINDERS_SIZE)-1:0] remainders;
	wire [(`ECC_PARAM_T * `REMAINDERS_SIZE)-1:0] nxt_remainders;
	
	// internal variable
	wire valid_execution;
	wire BRAM_write_complete;
	wire division_complete;
	wire output_complete;
	
	
	
	assign sc_available = (cur_state == RESET_SC);
	assign valid_execution = execute_sc & code_BUS_valid;
	assign sc_start = (cur_state == SDR_STwB);
	assign BRAM_write_complete = (counter == `MESSAGE_LENGTH - 1);
	assign last_code_block_received = (code_BUS_valid == 1) & (counter == `SC_INPUT_LOOP_COUNT - 2);
	assign division_complete = (counter == `SC_INPUT_LOOP_COUNT - 1);
	assign sc_complete = (cur_state == SDR_OUT);
	assign output_complete = (output_counter == 3'b111);
	
	assign BRAM_write_address[`MESSAGE_LENGTH_BIT-1:0] = counter[`MESSAGE_LENGTH_BIT-1:0]; // use partial bit
	assign BRAM_write_data[`SC_PARALLEL-1:0] = code_b[`SC_PARALLEL-1:0];
	
	
	
	// update current state to next state
	always @ (posedge clk, negedge nRESET)
	begin
		if (!nRESET) begin
			cur_state <= RESET_SC;
		end else begin
			cur_state <= nxt_state;
		end
	end
	
	// decide next state
	always @ ( * )
	begin
		case (cur_state)
		RESET_SC: begin
			nxt_state <= (valid_execution)? (SDR_STwB):(RESET_SC);
		end
		SDR_STwB: begin
			nxt_state <= (code_BUS_valid)? (SDR_FBwB):(COD_T_PwB);
		end
		SDR_FBwB: begin
			nxt_state <= (code_BUS_valid)? ((BRAM_write_complete)? (SDR_FBwoB):(SDR_FBwB)):
										   ((BRAM_write_complete)? (COD_T_PwoB):(COD_T_PwB));
		end
		SDR_FBwoB: begin
			nxt_state <= (division_complete)? (EVALUATION):
											  ((code_BUS_valid)? (SDR_FBwoB):(COD_T_PwoB));
		end
		COD_T_PwB: begin
			nxt_state <= (code_BUS_valid)? (SDR_FBwB):(COD_T_PwB);
		end
		COD_T_PwoB: begin
			nxt_state <= (code_BUS_valid)? (SDR_FBwoB):(COD_T_PwoB);
		end
		EVALUATION: begin
			nxt_state <= SDR_OUT;
		end
		SDR_OUT: begin
			nxt_state <= (output_complete)? (RESET_SC):(SDR_OUT);
		end
		default: begin
			nxt_state <= RESET_SC;
		end
		endcase
	end

	// state behaviour
	always @ (posedge clk, negedge nRESET)
	begin
		if (!nRESET) begin
			code_b <= 0;
			remainders <= 0;
			counter <= 0;
			BRAM_write_enable <= 0;
			output_counter <= 0;
		end
		
		else begin		
			case (nxt_state)
			RESET_SC: begin
				code_b <= 0;
				remainders <= 0;
				counter <= 0;
				BRAM_write_enable <= 0;
				output_counter <= 0;
			end
			SDR_STwB: begin
				code_b <= code;
				remainders <= 0;
				counter <= 0;
				BRAM_write_enable <= 1;
				output_counter <= 0;
			end
			SDR_FBwB: begin
				code_b <= code;
				remainders <= nxt_remainders;
				counter <= counter + 1'b1;
				BRAM_write_enable <= 1;
				output_counter <= 0;
			end
			SDR_FBwoB: begin
				code_b <= code;
				remainders <= nxt_remainders;
				counter <= counter + 1'b1;
				BRAM_write_enable <= 0;
				output_counter <= 0;
			end
			COD_T_PwB: begin
				code_b <= code_b;
				remainders <= remainders;
				counter <= counter;
				BRAM_write_enable <= 0;
				output_counter <= 0;
			end
			COD_T_PwoB: begin
				code_b <= code_b;
				remainders <= remainders;
				counter <= counter;
				BRAM_write_enable <= 0;
				output_counter <= 0;
			end
			EVALUATION: begin
				code_b <= 0;
				remainders <= nxt_remainders;
				counter <= 0;
				BRAM_write_enable <= 0;
				output_counter <= 0;
			end
			SDR_OUT: begin
				code_b <= 0;
				remainders <= remainders;
				counter <= 0;
				BRAM_write_enable <= 0;
				output_counter <= output_counter + 1'b1;
			end
			default: begin
				code_b <= 0;
				remainders <= 0;
				counter <= 0;
				BRAM_write_enable <= 0;
				output_counter <= 0;
			end
			endcase
		end
	end
	
	// state behaviour
	// syndrome register, error_detected register
	// These two elements are so many many many many ......
	always @ (posedge clk, negedge nRESET)
	begin
		if (!nRESET) begin
			error_detected <= 0;
			
			/////////////////////////////////////////////
			////////// GENERATED BY C PROGRAMA //////////
			/////
			///
			
			// total: 63
	
			sdr_001 <= 0;
			sdr_002 <= 0;
			sdr_003 <= 0;
			sdr_004 <= 0;
			sdr_005 <= 0;
			sdr_006 <= 0;
			sdr_007 <= 0;
			sdr_008 <= 0;
			sdr_009 <= 0;
			sdr_010 <= 0;
			sdr_011 <= 0;
			sdr_012 <= 0;
			sdr_013 <= 0;
			sdr_014 <= 0;
			sdr_015 <= 0;
			sdr_016 <= 0;
			sdr_017 <= 0;
			sdr_018 <= 0;
			sdr_019 <= 0;
			sdr_020 <= 0;
			sdr_021 <= 0;
			sdr_022 <= 0;
			sdr_023 <= 0;
			sdr_024 <= 0;
			sdr_025 <= 0;
			sdr_026 <= 0;
			sdr_027 <= 0;
			sdr_028 <= 0;
			sdr_029 <= 0;
			sdr_030 <= 0;
			sdr_031 <= 0;
			sdr_032 <= 0;
			sdr_033 <= 0;
			sdr_034 <= 0;
			sdr_035 <= 0;
			sdr_036 <= 0;
			sdr_037 <= 0;
			sdr_038 <= 0;
			sdr_039 <= 0;
			sdr_040 <= 0;
			sdr_041 <= 0;
			sdr_042 <= 0;
			sdr_043 <= 0;
			sdr_044 <= 0;
			sdr_045 <= 0;
			sdr_046 <= 0;
			sdr_047 <= 0;
			sdr_048 <= 0;
			sdr_049 <= 0;
			sdr_050 <= 0;
			sdr_051 <= 0;
			sdr_052 <= 0;
			sdr_053 <= 0;
			sdr_054 <= 0;
			sdr_055 <= 0;
			sdr_056 <= 0;
			sdr_057 <= 0;
			sdr_058 <= 0;
			sdr_059 <= 0;
			sdr_060 <= 0;
			sdr_061 <= 0;
			sdr_062 <= 0;
			sdr_063 <= 0;
			
													  ///
													/////
			////////// GENERATED BY C PROGRAMA //////////
			/////////////////////////////////////////////
		end
		
		else begin		
			case (nxt_state)
			
			SDR_OUT: begin
				error_detected <= (|evaluated_remainder_001) | (|evaluated_remainder_003) | (|evaluated_remainder_005) | (|evaluated_remainder_007) | (|evaluated_remainder_009) | (|evaluated_remainder_011) | (|evaluated_remainder_013) | (|evaluated_remainder_015) | (|evaluated_remainder_017) | (|evaluated_remainder_019) | (|evaluated_remainder_021) | (|evaluated_remainder_023) | (|evaluated_remainder_025) | (|evaluated_remainder_027) | (|evaluated_remainder_029) | (|evaluated_remainder_031) | (|evaluated_remainder_033) | (|evaluated_remainder_035) | (|evaluated_remainder_037) | (|evaluated_remainder_039) | (|evaluated_remainder_041) | (|evaluated_remainder_043) | (|evaluated_remainder_045) | (|evaluated_remainder_047) | (|evaluated_remainder_049) | (|evaluated_remainder_051) | (|evaluated_remainder_053) | (|evaluated_remainder_055) | (|evaluated_remainder_057) | (|evaluated_remainder_059) | (|evaluated_remainder_061) | (|evaluated_remainder_063);

				
				/////////////////////////////////////////////
				////////// GENERATED BY C PROGRAMA //////////
				/////
				///
				
				// total: 63
		
				sdr_001 <= evaluated_remainder_001;
				sdr_002 <= evaluated_remainder_002;
				sdr_003 <= evaluated_remainder_003;
				sdr_004 <= evaluated_remainder_004;
				sdr_005 <= evaluated_remainder_005;
				sdr_006 <= evaluated_remainder_006;
				sdr_007 <= evaluated_remainder_007;
				sdr_008 <= evaluated_remainder_008;
				sdr_009 <= evaluated_remainder_009;
				sdr_010 <= evaluated_remainder_010;
				sdr_011 <= evaluated_remainder_011;
				sdr_012 <= evaluated_remainder_012;
				sdr_013 <= evaluated_remainder_013;
				sdr_014 <= evaluated_remainder_014;
				sdr_015 <= evaluated_remainder_015;
				sdr_016 <= evaluated_remainder_016;
				sdr_017 <= evaluated_remainder_017;
				sdr_018 <= evaluated_remainder_018;
				sdr_019 <= evaluated_remainder_019;
				sdr_020 <= evaluated_remainder_020;
				sdr_021 <= evaluated_remainder_021;
				sdr_022 <= evaluated_remainder_022;
				sdr_023 <= evaluated_remainder_023;
				sdr_024 <= evaluated_remainder_024;
				sdr_025 <= evaluated_remainder_025;
				sdr_026 <= evaluated_remainder_026;
				sdr_027 <= evaluated_remainder_027;
				sdr_028 <= evaluated_remainder_028;
				sdr_029 <= evaluated_remainder_029;
				sdr_030 <= evaluated_remainder_030;
				sdr_031 <= evaluated_remainder_031;
				sdr_032 <= evaluated_remainder_032;
				sdr_033 <= evaluated_remainder_033;
				sdr_034 <= evaluated_remainder_034;
				sdr_035 <= evaluated_remainder_035;
				sdr_036 <= evaluated_remainder_036;
				sdr_037 <= evaluated_remainder_037;
				sdr_038 <= evaluated_remainder_038;
				sdr_039 <= evaluated_remainder_039;
				sdr_040 <= evaluated_remainder_040;
				sdr_041 <= evaluated_remainder_041;
				sdr_042 <= evaluated_remainder_042;
				sdr_043 <= evaluated_remainder_043;
				sdr_044 <= evaluated_remainder_044;
				sdr_045 <= evaluated_remainder_045;
				sdr_046 <= evaluated_remainder_046;
				sdr_047 <= evaluated_remainder_047;
				sdr_048 <= evaluated_remainder_048;
				sdr_049 <= evaluated_remainder_049;
				sdr_050 <= evaluated_remainder_050;
				sdr_051 <= evaluated_remainder_051;
				sdr_052 <= evaluated_remainder_052;
				sdr_053 <= evaluated_remainder_053;
				sdr_054 <= evaluated_remainder_054;
				sdr_055 <= evaluated_remainder_055;
				sdr_056 <= evaluated_remainder_056;
				sdr_057 <= evaluated_remainder_057;
				sdr_058 <= evaluated_remainder_058;
				sdr_059 <= evaluated_remainder_059;
				sdr_060 <= evaluated_remainder_060;
				sdr_061 <= evaluated_remainder_061;
				sdr_062 <= evaluated_remainder_062;
				sdr_063 <= evaluated_remainder_063;
				
														  ///
														/////
				////////// GENERATED BY C PROGRAMA //////////
				/////////////////////////////////////////////
			end
			
			default: begin
				error_detected <= 0;
				
				/////////////////////////////////////////////
				////////// GENERATED BY C PROGRAMA //////////
				/////
				///
				
				// total: 63
		
				sdr_001 <= 0;
				sdr_002 <= 0;
				sdr_003 <= 0;
				sdr_004 <= 0;
				sdr_005 <= 0;
				sdr_006 <= 0;
				sdr_007 <= 0;
				sdr_008 <= 0;
				sdr_009 <= 0;
				sdr_010 <= 0;
				sdr_011 <= 0;
				sdr_012 <= 0;
				sdr_013 <= 0;
				sdr_014 <= 0;
				sdr_015 <= 0;
				sdr_016 <= 0;
				sdr_017 <= 0;
				sdr_018 <= 0;
				sdr_019 <= 0;
				sdr_020 <= 0;
				sdr_021 <= 0;
				sdr_022 <= 0;
				sdr_023 <= 0;
				sdr_024 <= 0;
				sdr_025 <= 0;
				sdr_026 <= 0;
				sdr_027 <= 0;
				sdr_028 <= 0;
				sdr_029 <= 0;
				sdr_030 <= 0;
				sdr_031 <= 0;
				sdr_032 <= 0;
				sdr_033 <= 0;
				sdr_034 <= 0;
				sdr_035 <= 0;
				sdr_036 <= 0;
				sdr_037 <= 0;
				sdr_038 <= 0;
				sdr_039 <= 0;
				sdr_040 <= 0;
				sdr_041 <= 0;
				sdr_042 <= 0;
				sdr_043 <= 0;
				sdr_044 <= 0;
				sdr_045 <= 0;
				sdr_046 <= 0;
				sdr_047 <= 0;
				sdr_048 <= 0;
				sdr_049 <= 0;
				sdr_050 <= 0;
				sdr_051 <= 0;
				sdr_052 <= 0;
				sdr_053 <= 0;
				sdr_054 <= 0;
				sdr_055 <= 0;
				sdr_056 <= 0;
				sdr_057 <= 0;
				sdr_058 <= 0;
				sdr_059 <= 0;
				sdr_060 <= 0;
				sdr_061 <= 0;
				sdr_062 <= 0;
				sdr_063 <= 0;
				
														  ///
														/////
				////////// GENERATED BY C PROGRAMA //////////
				/////////////////////////////////////////////
			end
			
			endcase
		end
	end
	//////////////////////////////////////////////////
	
	
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// DEVIDER
	// linear feedback shift XOR matrix
	// LFSR = LFSXOR + register
	
	// total: 32
	
	sc_parallel_lfs_XOR_001 sc_LFSXOR_matrix_001(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]));

    sc_parallel_lfs_XOR_003 sc_LFSXOR_matrix_003(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]));

    sc_parallel_lfs_XOR_005 sc_LFSXOR_matrix_005(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(2+1)-1:`REMAINDERS_SIZE*2]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(2+1)-1:`REMAINDERS_SIZE*2]));

    sc_parallel_lfs_XOR_007 sc_LFSXOR_matrix_007(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(3+1)-1:`REMAINDERS_SIZE*3]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(3+1)-1:`REMAINDERS_SIZE*3]));

    sc_parallel_lfs_XOR_009 sc_LFSXOR_matrix_009(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(4+1)-1:`REMAINDERS_SIZE*4]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(4+1)-1:`REMAINDERS_SIZE*4]));

    sc_parallel_lfs_XOR_011 sc_LFSXOR_matrix_011(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(5+1)-1:`REMAINDERS_SIZE*5]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(5+1)-1:`REMAINDERS_SIZE*5]));

    sc_parallel_lfs_XOR_013 sc_LFSXOR_matrix_013(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(6+1)-1:`REMAINDERS_SIZE*6]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(6+1)-1:`REMAINDERS_SIZE*6]));

    sc_parallel_lfs_XOR_015 sc_LFSXOR_matrix_015(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(7+1)-1:`REMAINDERS_SIZE*7]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(7+1)-1:`REMAINDERS_SIZE*7]));

    sc_parallel_lfs_XOR_017 sc_LFSXOR_matrix_017(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(8+1)-1:`REMAINDERS_SIZE*8]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(8+1)-1:`REMAINDERS_SIZE*8]));

    sc_parallel_lfs_XOR_019 sc_LFSXOR_matrix_019(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(9+1)-1:`REMAINDERS_SIZE*9]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(9+1)-1:`REMAINDERS_SIZE*9]));

    sc_parallel_lfs_XOR_021 sc_LFSXOR_matrix_021(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(10+1)-1:`REMAINDERS_SIZE*10]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(10+1)-1:`REMAINDERS_SIZE*10]));

    sc_parallel_lfs_XOR_023 sc_LFSXOR_matrix_023(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(11+1)-1:`REMAINDERS_SIZE*11]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(11+1)-1:`REMAINDERS_SIZE*11]));

    sc_parallel_lfs_XOR_025 sc_LFSXOR_matrix_025(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(12+1)-1:`REMAINDERS_SIZE*12]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(12+1)-1:`REMAINDERS_SIZE*12]));

    sc_parallel_lfs_XOR_027 sc_LFSXOR_matrix_027(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(13+1)-1:`REMAINDERS_SIZE*13]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(13+1)-1:`REMAINDERS_SIZE*13]));

    sc_parallel_lfs_XOR_029 sc_LFSXOR_matrix_029(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(14+1)-1:`REMAINDERS_SIZE*14]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(14+1)-1:`REMAINDERS_SIZE*14]));

    sc_parallel_lfs_XOR_031 sc_LFSXOR_matrix_031(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(15+1)-1:`REMAINDERS_SIZE*15]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(15+1)-1:`REMAINDERS_SIZE*15]));

    sc_parallel_lfs_XOR_033 sc_LFSXOR_matrix_033(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(16+1)-1:`REMAINDERS_SIZE*16]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(16+1)-1:`REMAINDERS_SIZE*16]));

    sc_parallel_lfs_XOR_035 sc_LFSXOR_matrix_035(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(17+1)-1:`REMAINDERS_SIZE*17]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(17+1)-1:`REMAINDERS_SIZE*17]));

    sc_parallel_lfs_XOR_037 sc_LFSXOR_matrix_037(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(18+1)-1:`REMAINDERS_SIZE*18]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(18+1)-1:`REMAINDERS_SIZE*18]));

    sc_parallel_lfs_XOR_039 sc_LFSXOR_matrix_039(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(19+1)-1:`REMAINDERS_SIZE*19]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(19+1)-1:`REMAINDERS_SIZE*19]));

    sc_parallel_lfs_XOR_041 sc_LFSXOR_matrix_041(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(20+1)-1:`REMAINDERS_SIZE*20]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(20+1)-1:`REMAINDERS_SIZE*20]));

    sc_parallel_lfs_XOR_043 sc_LFSXOR_matrix_043(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(21+1)-1:`REMAINDERS_SIZE*21]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(21+1)-1:`REMAINDERS_SIZE*21]));

    sc_parallel_lfs_XOR_045 sc_LFSXOR_matrix_045(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(22+1)-1:`REMAINDERS_SIZE*22]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(22+1)-1:`REMAINDERS_SIZE*22]));

    sc_parallel_lfs_XOR_047 sc_LFSXOR_matrix_047(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(23+1)-1:`REMAINDERS_SIZE*23]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(23+1)-1:`REMAINDERS_SIZE*23]));

    sc_parallel_lfs_XOR_049 sc_LFSXOR_matrix_049(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(24+1)-1:`REMAINDERS_SIZE*24]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(24+1)-1:`REMAINDERS_SIZE*24]));

    sc_parallel_lfs_XOR_051 sc_LFSXOR_matrix_051(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(25+1)-1:`REMAINDERS_SIZE*25]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(25+1)-1:`REMAINDERS_SIZE*25]));

    sc_parallel_lfs_XOR_053 sc_LFSXOR_matrix_053(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(26+1)-1:`REMAINDERS_SIZE*26]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(26+1)-1:`REMAINDERS_SIZE*26]));

    sc_parallel_lfs_XOR_055 sc_LFSXOR_matrix_055(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(27+1)-1:`REMAINDERS_SIZE*27]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(27+1)-1:`REMAINDERS_SIZE*27]));

    sc_parallel_lfs_XOR_057 sc_LFSXOR_matrix_057(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(28+1)-1:`REMAINDERS_SIZE*28]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(28+1)-1:`REMAINDERS_SIZE*28]));

    sc_parallel_lfs_XOR_059 sc_LFSXOR_matrix_059(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(29+1)-1:`REMAINDERS_SIZE*29]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(29+1)-1:`REMAINDERS_SIZE*29]));

    sc_parallel_lfs_XOR_061 sc_LFSXOR_matrix_061(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(30+1)-1:`REMAINDERS_SIZE*30]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(30+1)-1:`REMAINDERS_SIZE*30]));

    sc_parallel_lfs_XOR_063 sc_LFSXOR_matrix_063(
        .message(code_b),
        .cur_remainder(remainders[`REMAINDERS_SIZE*(31+1)-1:`REMAINDERS_SIZE*31]),
        .nxt_remainder(nxt_remainders[`REMAINDERS_SIZE*(31+1)-1:`REMAINDERS_SIZE*31]));
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
	
	//////////////////// POLYNOMIAL EVALUATION ////////////////////
	
	/////////////////////////////////////////////
	////////// GENERATED BY C PROGRAMA //////////
	/////
	///
	
	// EVALUATION MATRIX
	
	// total: 63
	
	sc_evaluation_matrix_001 sc_EM_001 (
        .in(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .out(evaluated_remainder_001) );

    sc_evaluation_matrix_002 sc_EM_002 (
        .in(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .out(evaluated_remainder_002) );

    sc_evaluation_matrix_003 sc_EM_003 (
        .in(remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]),
        .out(evaluated_remainder_003) );

    sc_evaluation_matrix_004 sc_EM_004 (
        .in(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .out(evaluated_remainder_004) );

    sc_evaluation_matrix_005 sc_EM_005 (
        .in(remainders[`REMAINDERS_SIZE*(2+1)-1:`REMAINDERS_SIZE*2]),
        .out(evaluated_remainder_005) );

    sc_evaluation_matrix_006 sc_EM_006 (
        .in(remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]),
        .out(evaluated_remainder_006) );

    sc_evaluation_matrix_007 sc_EM_007 (
        .in(remainders[`REMAINDERS_SIZE*(3+1)-1:`REMAINDERS_SIZE*3]),
        .out(evaluated_remainder_007) );

    sc_evaluation_matrix_008 sc_EM_008 (
        .in(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .out(evaluated_remainder_008) );

    sc_evaluation_matrix_009 sc_EM_009 (
        .in(remainders[`REMAINDERS_SIZE*(4+1)-1:`REMAINDERS_SIZE*4]),
        .out(evaluated_remainder_009) );

    sc_evaluation_matrix_010 sc_EM_010 (
        .in(remainders[`REMAINDERS_SIZE*(2+1)-1:`REMAINDERS_SIZE*2]),
        .out(evaluated_remainder_010) );

    sc_evaluation_matrix_011 sc_EM_011 (
        .in(remainders[`REMAINDERS_SIZE*(5+1)-1:`REMAINDERS_SIZE*5]),
        .out(evaluated_remainder_011) );

    sc_evaluation_matrix_012 sc_EM_012 (
        .in(remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]),
        .out(evaluated_remainder_012) );

    sc_evaluation_matrix_013 sc_EM_013 (
        .in(remainders[`REMAINDERS_SIZE*(6+1)-1:`REMAINDERS_SIZE*6]),
        .out(evaluated_remainder_013) );

    sc_evaluation_matrix_014 sc_EM_014 (
        .in(remainders[`REMAINDERS_SIZE*(3+1)-1:`REMAINDERS_SIZE*3]),
        .out(evaluated_remainder_014) );

    sc_evaluation_matrix_015 sc_EM_015 (
        .in(remainders[`REMAINDERS_SIZE*(7+1)-1:`REMAINDERS_SIZE*7]),
        .out(evaluated_remainder_015) );

    sc_evaluation_matrix_016 sc_EM_016 (
        .in(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .out(evaluated_remainder_016) );

    sc_evaluation_matrix_017 sc_EM_017 (
        .in(remainders[`REMAINDERS_SIZE*(8+1)-1:`REMAINDERS_SIZE*8]),
        .out(evaluated_remainder_017) );

    sc_evaluation_matrix_018 sc_EM_018 (
        .in(remainders[`REMAINDERS_SIZE*(4+1)-1:`REMAINDERS_SIZE*4]),
        .out(evaluated_remainder_018) );

    sc_evaluation_matrix_019 sc_EM_019 (
        .in(remainders[`REMAINDERS_SIZE*(9+1)-1:`REMAINDERS_SIZE*9]),
        .out(evaluated_remainder_019) );

    sc_evaluation_matrix_020 sc_EM_020 (
        .in(remainders[`REMAINDERS_SIZE*(2+1)-1:`REMAINDERS_SIZE*2]),
        .out(evaluated_remainder_020) );

    sc_evaluation_matrix_021 sc_EM_021 (
        .in(remainders[`REMAINDERS_SIZE*(10+1)-1:`REMAINDERS_SIZE*10]),
        .out(evaluated_remainder_021) );

    sc_evaluation_matrix_022 sc_EM_022 (
        .in(remainders[`REMAINDERS_SIZE*(5+1)-1:`REMAINDERS_SIZE*5]),
        .out(evaluated_remainder_022) );

    sc_evaluation_matrix_023 sc_EM_023 (
        .in(remainders[`REMAINDERS_SIZE*(11+1)-1:`REMAINDERS_SIZE*11]),
        .out(evaluated_remainder_023) );

    sc_evaluation_matrix_024 sc_EM_024 (
        .in(remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]),
        .out(evaluated_remainder_024) );

    sc_evaluation_matrix_025 sc_EM_025 (
        .in(remainders[`REMAINDERS_SIZE*(12+1)-1:`REMAINDERS_SIZE*12]),
        .out(evaluated_remainder_025) );

    sc_evaluation_matrix_026 sc_EM_026 (
        .in(remainders[`REMAINDERS_SIZE*(6+1)-1:`REMAINDERS_SIZE*6]),
        .out(evaluated_remainder_026) );

    sc_evaluation_matrix_027 sc_EM_027 (
        .in(remainders[`REMAINDERS_SIZE*(13+1)-1:`REMAINDERS_SIZE*13]),
        .out(evaluated_remainder_027) );

    sc_evaluation_matrix_028 sc_EM_028 (
        .in(remainders[`REMAINDERS_SIZE*(3+1)-1:`REMAINDERS_SIZE*3]),
        .out(evaluated_remainder_028) );

    sc_evaluation_matrix_029 sc_EM_029 (
        .in(remainders[`REMAINDERS_SIZE*(14+1)-1:`REMAINDERS_SIZE*14]),
        .out(evaluated_remainder_029) );

    sc_evaluation_matrix_030 sc_EM_030 (
        .in(remainders[`REMAINDERS_SIZE*(7+1)-1:`REMAINDERS_SIZE*7]),
        .out(evaluated_remainder_030) );

    sc_evaluation_matrix_031 sc_EM_031 (
        .in(remainders[`REMAINDERS_SIZE*(15+1)-1:`REMAINDERS_SIZE*15]),
        .out(evaluated_remainder_031) );

    sc_evaluation_matrix_032 sc_EM_032 (
        .in(remainders[`REMAINDERS_SIZE*(0+1)-1:`REMAINDERS_SIZE*0]),
        .out(evaluated_remainder_032) );

    sc_evaluation_matrix_033 sc_EM_033 (
        .in(remainders[`REMAINDERS_SIZE*(16+1)-1:`REMAINDERS_SIZE*16]),
        .out(evaluated_remainder_033) );

    sc_evaluation_matrix_034 sc_EM_034 (
        .in(remainders[`REMAINDERS_SIZE*(8+1)-1:`REMAINDERS_SIZE*8]),
        .out(evaluated_remainder_034) );

    sc_evaluation_matrix_035 sc_EM_035 (
        .in(remainders[`REMAINDERS_SIZE*(17+1)-1:`REMAINDERS_SIZE*17]),
        .out(evaluated_remainder_035) );

    sc_evaluation_matrix_036 sc_EM_036 (
        .in(remainders[`REMAINDERS_SIZE*(4+1)-1:`REMAINDERS_SIZE*4]),
        .out(evaluated_remainder_036) );

    sc_evaluation_matrix_037 sc_EM_037 (
        .in(remainders[`REMAINDERS_SIZE*(18+1)-1:`REMAINDERS_SIZE*18]),
        .out(evaluated_remainder_037) );

    sc_evaluation_matrix_038 sc_EM_038 (
        .in(remainders[`REMAINDERS_SIZE*(9+1)-1:`REMAINDERS_SIZE*9]),
        .out(evaluated_remainder_038) );

    sc_evaluation_matrix_039 sc_EM_039 (
        .in(remainders[`REMAINDERS_SIZE*(19+1)-1:`REMAINDERS_SIZE*19]),
        .out(evaluated_remainder_039) );

    sc_evaluation_matrix_040 sc_EM_040 (
        .in(remainders[`REMAINDERS_SIZE*(2+1)-1:`REMAINDERS_SIZE*2]),
        .out(evaluated_remainder_040) );

    sc_evaluation_matrix_041 sc_EM_041 (
        .in(remainders[`REMAINDERS_SIZE*(20+1)-1:`REMAINDERS_SIZE*20]),
        .out(evaluated_remainder_041) );

    sc_evaluation_matrix_042 sc_EM_042 (
        .in(remainders[`REMAINDERS_SIZE*(10+1)-1:`REMAINDERS_SIZE*10]),
        .out(evaluated_remainder_042) );

    sc_evaluation_matrix_043 sc_EM_043 (
        .in(remainders[`REMAINDERS_SIZE*(21+1)-1:`REMAINDERS_SIZE*21]),
        .out(evaluated_remainder_043) );

    sc_evaluation_matrix_044 sc_EM_044 (
        .in(remainders[`REMAINDERS_SIZE*(5+1)-1:`REMAINDERS_SIZE*5]),
        .out(evaluated_remainder_044) );

    sc_evaluation_matrix_045 sc_EM_045 (
        .in(remainders[`REMAINDERS_SIZE*(22+1)-1:`REMAINDERS_SIZE*22]),
        .out(evaluated_remainder_045) );

    sc_evaluation_matrix_046 sc_EM_046 (
        .in(remainders[`REMAINDERS_SIZE*(11+1)-1:`REMAINDERS_SIZE*11]),
        .out(evaluated_remainder_046) );

    sc_evaluation_matrix_047 sc_EM_047 (
        .in(remainders[`REMAINDERS_SIZE*(23+1)-1:`REMAINDERS_SIZE*23]),
        .out(evaluated_remainder_047) );

    sc_evaluation_matrix_048 sc_EM_048 (
        .in(remainders[`REMAINDERS_SIZE*(1+1)-1:`REMAINDERS_SIZE*1]),
        .out(evaluated_remainder_048) );

    sc_evaluation_matrix_049 sc_EM_049 (
        .in(remainders[`REMAINDERS_SIZE*(24+1)-1:`REMAINDERS_SIZE*24]),
        .out(evaluated_remainder_049) );

    sc_evaluation_matrix_050 sc_EM_050 (
        .in(remainders[`REMAINDERS_SIZE*(12+1)-1:`REMAINDERS_SIZE*12]),
        .out(evaluated_remainder_050) );

    sc_evaluation_matrix_051 sc_EM_051 (
        .in(remainders[`REMAINDERS_SIZE*(25+1)-1:`REMAINDERS_SIZE*25]),
        .out(evaluated_remainder_051) );

    sc_evaluation_matrix_052 sc_EM_052 (
        .in(remainders[`REMAINDERS_SIZE*(6+1)-1:`REMAINDERS_SIZE*6]),
        .out(evaluated_remainder_052) );

    sc_evaluation_matrix_053 sc_EM_053 (
        .in(remainders[`REMAINDERS_SIZE*(26+1)-1:`REMAINDERS_SIZE*26]),
        .out(evaluated_remainder_053) );

    sc_evaluation_matrix_054 sc_EM_054 (
        .in(remainders[`REMAINDERS_SIZE*(13+1)-1:`REMAINDERS_SIZE*13]),
        .out(evaluated_remainder_054) );

    sc_evaluation_matrix_055 sc_EM_055 (
        .in(remainders[`REMAINDERS_SIZE*(27+1)-1:`REMAINDERS_SIZE*27]),
        .out(evaluated_remainder_055) );

    sc_evaluation_matrix_056 sc_EM_056 (
        .in(remainders[`REMAINDERS_SIZE*(3+1)-1:`REMAINDERS_SIZE*3]),
        .out(evaluated_remainder_056) );

    sc_evaluation_matrix_057 sc_EM_057 (
        .in(remainders[`REMAINDERS_SIZE*(28+1)-1:`REMAINDERS_SIZE*28]),
        .out(evaluated_remainder_057) );

    sc_evaluation_matrix_058 sc_EM_058 (
        .in(remainders[`REMAINDERS_SIZE*(14+1)-1:`REMAINDERS_SIZE*14]),
        .out(evaluated_remainder_058) );

    sc_evaluation_matrix_059 sc_EM_059 (
        .in(remainders[`REMAINDERS_SIZE*(29+1)-1:`REMAINDERS_SIZE*29]),
        .out(evaluated_remainder_059) );

    sc_evaluation_matrix_060 sc_EM_060 (
        .in(remainders[`REMAINDERS_SIZE*(7+1)-1:`REMAINDERS_SIZE*7]),
        .out(evaluated_remainder_060) );

    sc_evaluation_matrix_061 sc_EM_061 (
        .in(remainders[`REMAINDERS_SIZE*(30+1)-1:`REMAINDERS_SIZE*30]),
        .out(evaluated_remainder_061) );

    sc_evaluation_matrix_062 sc_EM_062 (
        .in(remainders[`REMAINDERS_SIZE*(15+1)-1:`REMAINDERS_SIZE*15]),
        .out(evaluated_remainder_062) );

    sc_evaluation_matrix_063 sc_EM_063 (
        .in(remainders[`REMAINDERS_SIZE*(31+1)-1:`REMAINDERS_SIZE*31]),
        .out(evaluated_remainder_063) );
	
	                                          ///
	                                        /////	
	////////// GENERATED BY C PROGRAMA //////////
	/////////////////////////////////////////////
	
	
endmodule
